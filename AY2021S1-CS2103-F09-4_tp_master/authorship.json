[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tigerting98"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103-F09-4/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103-F09-4/tp/actions)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "# LogOnce"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tigerting98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "**LogOnce** is a one-stop logistics tracker app for clerks to monitor shipping statuses of all clients and perform common logistics operations. It is optimized for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, LogOnce can get your tracking tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tigerting98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "## Features for v1.2"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tigerting98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "v1.2 will have very basic features."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tigerting98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "* Managing relevant information to tracking orders"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "  * Managing client information - Name, address, orders under this client etc."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "  * Managing order data - Client information, address, order date, item etc."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "  * Associate clients with orders (Relationship between clients and orders)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "* CLI for user input"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "  * (Extension- Shortcuts for user input (fast typists))"
      }
    ],
    "authorContributionMap": {
      "-": 3,
      "tigerting98": 16
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "run {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tigerting98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "-": 72,
      "tigerting98": 4
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "### Xiao Chengxin"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "\u003cimg src\u003d\"images/cx0810.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "[[github](https://github.com/cx0810)]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "[[portfolio](team/cx0810.md)]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "### Syasya Azman"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "\u003cimg src\u003d\"images/syasyazman.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "[[github](http://github.com/Syasyazman)]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "[[portfolio](team/Syasyazman.md)]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "### Ting Xiao"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "\u003cimg src\u003d\"images/tigerting98.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "[[github](http://github.com/tigerting98)] [[portfolio](team/tigerting98.md)]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "### Pua Xuan Ming"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "\u003cimg src\u003d\"images/xnmng.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "[[github](http://github.com/xnmng)]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "[[portfolio](team/xnmng.md)]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "### You Yingfeng"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "\u003cimg src\u003d\"images/youyingfeng.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "[[github](http://github.com/youyingfeng)]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "[[portfolio](team/youyingfeng.md)]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: UI"
      }
    ],
    "authorContributionMap": {
      "-": 32,
      "Syasyazman": 21
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the address book data."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the address book data in json format and read it back."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "### User Interface"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "#### Proposed implementation"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "The updated user interface has three columns: the leftmost column acts as a navigation menu, the middle column displays "
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "the list of Clients/Orders and the rightmost column is supposed to display more details about the Client/Order."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "The switching of views is done by calling methods defined in MainWindow from the FXML file, upon clicking on the "
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "respective button. These methods are exposed in the `MainWindow` class as `handleClients()` and `handleOrders()`."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "_{Diagram will be added at a later date}_"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "Step 1. The user launches the application, and the User Interface is created."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "Step 2. The user clicks on the `Orders` button in order to view the orders. The button will call the function "
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "`handleOrders()`, causing the view in the middle column to display the list of Orders."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "Step 2. The user clicks on the `Clients` button in order to view the clients. The button will call the function "
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "`handleClients()`, causing the view in the middle column to display the list of Clients."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "Step 3. The user clicks on the `Help` button in order to find the link to the user guide. The button will call the "
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "function `handleHelp()`, which will open a dialog box with the link to the user guide."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "Step 4. The user clicks on the `Exit` button in order to close the application. The button will call the function "
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "`handleExit`, which will close the application."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "xnmng"
        },
        "content": "### Find feature"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "xnmng"
        },
        "content": "The find mechanism is facilitated by `FindCommand`, `FindCommandParser`, `FindOrderCommand` and `FindOrderCommandParser`. `FindCommandParser` and `FindOrderCommandParser` implement `Parser`."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "xnmng"
        },
        "content": "`FindCommand` and `FindOrderCommand` extend `Command`."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "xnmng"
        },
        "content": "These two commands allows the user to search for `Clients` and `Orders` by the name or description respectively."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "xnmng"
        },
        "content": "Currently, the search operations for both `Clients` and `Orders` are very similar. Given a command (e.g. `find adam jane` or `findorder iPhone iPad`), the command is processed by `AddressBookParser` and"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "xnmng"
        },
        "content": "passed to the corresponding parsers. There, the parser will process the given arguments and will search for all `Clients`/`Orders` whose name or description contain any"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "xnmng"
        },
        "content": "of the keywords give. For example, If there were two clients, one named \u0027Adam\u0027 and one named \u0027Jane\u0027, both clients will show up in the search results."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "xnmng"
        },
        "content": "The parsers will split the provided search terms into an array, and match them with client names or order descriptions through the use of streams. The current implementation of `FindOrderCommand`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "xnmng"
        },
        "content": "and `FindOrderCommandParser` are simply adapted from the `FindCommand` and `FindCommandParser` respectively. This was done to ensure a minimally functional feature"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "xnmng"
        },
        "content": "Thus, tokens are currently unused for more specific searches."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "xnmng"
        },
        "content": "\\[Proposed enhancements\\]:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "xnmng"
        },
        "content": "* Usage of optional tokens such as `--date`, `--address`, `--email` to narrow down search range. It will be implemented similarly (by matching keywords). A client or an order"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "xnmng"
        },
        "content": "must match at least one of the keywords in each category in order to be shown in the search results. The list of clients/orders will be converted"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "xnmng"
        },
        "content": "into a stream and be filtered by multiple predicates, each corresponding to a data field within `Client`/`Order`."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "xnmng"
        },
        "content": "* A further enhncement would be to reduce the strictness of the token search. Instead of having to match at least one keyword from each category,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "xnmng"
        },
        "content": "any keyword match in any category would allow for the order or client to show up in the search results. This will be done by maintaining different filtered lists and combining them"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "xnmng"
        },
        "content": "while ignoring duplicates."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "xnmng"
        },
        "content": "Given below are examples of usage scenarios and how the two commands behave at each step"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "xnmng"
        },
        "content": "_{Diagram will be added at a later date}_"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "### Delete Feature"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "The delete mechanism is split into two functionalities - `Delete Order` and `Delete Client`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "The delete mechanism is facilitated by `DeleteOrderCommand`, `DeleteOrderCommandParser`, `DeleteClientCommand`, "
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "`DeleteClientCommandParser`, `AddressBook` and `ModelManager`. "
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "`DeleteOrderCommand` and `DeleteClientCommand` extends `Command`, `DeleteOrderCommandParser` and "
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "`DeleteClientCommandParser` implements `Parser`, `AddressBook` implements `ReadOnlyAddressBook` and `ModelManager` "
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "implements `Model`."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#deletePerson()` and `Model#deleteOrder()`. They are also"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "exposed in the `AddressBook` class as `AddressBook#removeClient()` and `AddressBook#removeOrder()`."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "the `Delete Order` and `Delete Client` differs such that `Delete Order` is dependent on `Delete Client`. This is the "
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "most distinctive difference where deleting a client from the client list will delete some orders from the order "
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "list too."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "Given below is an example usage scenario and how the delete mechanism behaves at each step."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "**Delete Order**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "Step 1. The user launches application and views his/her list of 5 orders."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "Step 2. The user executes `order --description 123 --client 1 --address 123 --date 2020-12-12 2359`. An order is created"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": " and appended to the end of the order list. There are now a total of 6 orders in the order list."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "Step 3. The user decides to remove the order he had just created. The user notes that the order is at the last index "
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "of the order list. The user executes `delete-order --order 6` to remove the order from the order list."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "The following sequence diagram shows how the delete order operation works :"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "_diagrams will be uploaded soon_"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "**Delete Client**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "Step 1. The user launches application and views his/her list of 5 clients."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "Step 2. The user executes `client --name john --address 123 --email john@gmail.com --phone 12345678`. A a client is "
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "created and appended to the end of the client list. There are now a total of 6 clients in the client list."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "Step 3. The user decides to remove the client he had just created. The user notes that the client is at the last index "
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "of the client list. The user executes `delete-client --client 6` to remove the client from the client list."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "Step 4. When user deletes the client, all orders linked to the client will also be deleted."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "The following sequence diagram shows how the delete client operation works :"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "_diagrams will be uploaded soon_"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "cx0810"
        },
        "content": "### List Feature"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "cx0810"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "cx0810"
        },
        "content": "The list mechanism is split into two functionalities - `List Order` and `List Client`."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "cx0810"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "cx0810"
        },
        "content": "These two commands allows the user to list the `Clients` and `Orders` present in the system respectively."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "cx0810"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "cx0810"
        },
        "content": "The list mechanism is facilitated by `ListCommand`, `ListOrderCommand`, `Model`, `ModelManager` and `AddressBook`."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "cx0810"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "cx0810"
        },
        "content": "`ListCommand` and `ListOrderCommand` extends `Command`. `AddressBook` implements `ReadOnlyAddressBook` and `ModelManager` implements `Model`."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "cx0810"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "cx0810"
        },
        "content": "These operations are exposed in the `Model` interface as `getFilteredOrderList()` and `getFilteredPersonList()`. They are also exposed in the `AddressBook` as `getOrderList` and `getPersonList`."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "cx0810"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "cx0810"
        },
        "content": "\\[Proposed enhancements\\]:"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "cx0810"
        },
        "content": "* Use `list` to display the orders of each client in the same panel. "
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "cx0810"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "cx0810"
        },
        "content": "Given below is an example usage scenario of how the list mechanism behaves at each step."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "cx0810"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "cx0810"
        },
        "content": "_{Diagrams will be added at a later date}_"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "cx0810"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` — Saves the current address book state in its history."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data archiving feature will be implemented}_"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "xnmng"
        },
        "content": "### Update-client feature"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "xnmng"
        },
        "content": "The Update-client mechanism is facilitated by `UpdateClientCommand` and `UpdateClientCommandParser`. `UpdateClientCommandParser` implement `Parser`."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "xnmng"
        },
        "content": "`UpdateClientCommand` extend `Command`."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "xnmng"
        },
        "content": "This command allows the user to update an existing `Client` by their index."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "xnmng"
        },
        "content": "The parser will split the provided terms into an array, obtain what field is to be updated (`Name`, `Address`, `Email`, `Phone`) and obtain the field that is to be updated."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "xnmng"
        },
        "content": "Upon calling the `Execute` method in UpdateClientCommand, the model is queried to obtain the list of clients. From this list, the client is obtained, removed and a new client with the updated field is added into the same index as the deleted client."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "* has a need to manage a significant number of contacts"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "cx0810"
        },
        "content": "**Value proposition**: Allows for convenient and fast generation of internal documents for archiving for the logistics clerk."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "The application would speed up their work as they would no longer need to fill up separate forms (invoices, "
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "shipping manifests etc) with overlapping data as it would now be automated, thus increasing productivity. "
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "The product will be a base application that can be customized to fit different company standards."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                | I want to …​                                             | So that I can…​                                                    |"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "cx0810"
        },
        "content": "| -------- | --------------------- | ------------------------------------------------------- | ----------------------------------------------------------------- |"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "| `* * *`  | logistics clerk       | add client information                                  | store data of clients                                             |"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "| `* * *`  | logistics clerk       | add order information                                   | store order data of clients                                       |          "
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "| `* * *`  | logistics clerk       | add warehouse inventory information                     | store inventory data of warehouse                                 |"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "| `* * *`  | logistics clerk       | delete client information                               | remove client from the client list                                |"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "| `* * *`  | logistics clerk       | delete order information                                | remove order from the data                                        |"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "| `* * *`  | logistics clerk       | delete warehouse inventory information                  | remove outdated information                                       |"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "| `* * *`  | logistics clerk       | view details of individual orders                       | easily view the information i need for every order placed         | "
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "cx0810"
        },
        "content": "| `* * *`  | logistics clerk       | view details of individual clients                      | easily view the information i need for every client in the system |"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "| `* * *`  | logistics clerk       | attach orders to clients                                | easily track all orders involving the particular client           | "
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "xnmng"
        },
        "content": "(For all use cases below, the **System** is the `LogOnce` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "      "
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "xnmng"
        },
        "content": "**Use case: create client **"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "xnmng"
        },
        "content": "1. User requests to create a client"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "xnmng"
        },
        "content": "2. LogOnce shows a success message, along with the client that was just added."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "xnmng"
        },
        "content": "* 1a. The client name is missing"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    "
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "xnmng"
        },
        "content": "   * 1a1. LogOnce shows an error message."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "xnmng"
        },
        "content": "   "
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        Use case ends."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "xnmng"
        },
        "content": "* 1b. The client\u0027s address is missing"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    * 1b1. LogOnce shows an error message."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        "
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        Use case ends."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        "
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "xnmng"
        },
        "content": "**Use case: create order **"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "xnmng"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "xnmng"
        },
        "content": "1. User requests to create a order, which was ordered by a specific client."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "xnmng"
        },
        "content": "2. LogOnce shows a success message, along with the order that was just created and attached to the specified client."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    "
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "xnmng"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "xnmng"
        },
        "content": "* 1a. The client name is invalid"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    "
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "xnmng"
        },
        "content": "   * 1a1. LogOnce shows an error message."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "xnmng"
        },
        "content": "   "
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        Use case ends."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "xnmng"
        },
        "content": "* 1b. The order description is missing"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    * 1b1. LogOnce shows an error message."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        "
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        Use case ends."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        "
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "**Use case: delete client **"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "1. User requests to delete a client from client list"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "2. LogOnce shows a success message along with the client that was just removed."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "xnmng"
        },
        "content": "* 1a. The client id is invalid."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    "
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "xnmng"
        },
        "content": "   * 1a1. LogOnce shows an error message."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "xnmng"
        },
        "content": "   "
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        Use case ends."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        "
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "**Use case: delete order **"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "1. User requests to delete an order from order list"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "2. LogOnce shows a success message, along with the order that was just removed, and the client that initially placed the order."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    "
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "* 1a. The order id is invalid."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    * 1a1. LogOnce shows an error message."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        "
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        Use case ends."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "xnmng"
        },
        "content": "**Use case: list **"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "xnmng"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "xnmng"
        },
        "content": "1. User requests to list all orders in the client list"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "xnmng"
        },
        "content": "2. LogOnce displays a list of all orders in the order list (and the client that placed the order respectively)."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "xnmng"
        },
        "content": "**Use case: done order **"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "xnmng"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "xnmng"
        },
        "content": "1. User requests to marks an order attached to a certain client as done."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "xnmng"
        },
        "content": "2. LogOnce shows a success message, along with the order that was marked done, and the client that ordered the order."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "xnmng"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "xnmng"
        },
        "content": "* 1a. The client id is invalid."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "xnmng"
        },
        "content": "   * 1a1. LogOnce shows an error message."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        Use case ends."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "xnmng"
        },
        "content": "* 1b. The order id is invalid."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    * 1b1. LogOnce shows an error message."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        "
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        Use case ends."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "1. Technical Requirements"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    * Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    * The system software should work without requiring an installer."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    * The system software should not depend on any of the developers\u0027 or user\u0027s remote server."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    * The file sizes of the deliverables should not exceed the limit of 100Mb (JAR file) or 15Mb (PDF file)."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "2. Performance Requirements"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    * Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    * Should be able to send a response to user within 2 seconds."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    * Should be able to access the data storage within 2 seconds."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    * Tasks that require accessing data storage should be performed immediately upon accessing data storage."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "3. Quality Requirements"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    * A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    * The system should be usable by a novice logistics clerk who has prior knowledge on logistical operations but no work experience"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    * The system should not contain any audible information or data."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    * A user with experience on handling logistical data should be able to adapt to the system easily."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    * The system should contain visual information or data."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    * The user input should be primarily Command Line Interface (CLI)."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    * The system should use Graphical User Interface (GUI) to give visual feedback to users."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "4. Security Requirements"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    * Any user with access to the system will be able to use it, regardless of administrator rights."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "5. Business/Domain Requirements"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    * The system should abide to general logistics guidelines and operations."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    * The system does not need to cater specifically to any company\u0027s logistics operations."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "6. Constraints"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    * The system provides general logistical operations and is not catered to any organisation\u0027s guidelines or needs."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    * The system should be for a single user."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    * The data should be stored locally and should be in a human editable text file."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    * The system should not use any form of Database Management System."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    * The system software should primarily follow the Object-oriented paradigm."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    * The system software should not be heavily dependent on remote or public APIs."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "7. Others"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    * The source code should be open source."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    * The system product should be a free online service.     "
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "* **Private contact detail**: A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "* **Data entry**: An information that is to be keyed into the logistics database"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "* **Dangerous goods declaration**: Document(s) prepared by a consignor or shipper to certify that the dangerous goods "
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "being transported have been packaged, labeled, and declared in accordance with the standard international shipping regulations"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "* **Shipping manifests**: A document that contains a summary of cargo shipping details relevant to the shipping process"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "* **Certificate of origin**: international trade document, certifying that goods in a particular export shipment are "
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "wholly obtained, produced, manufactured or processed in a particular country"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "* **Bill of lading**: legal document issued by a carrier to a shipper that details the type, quantity and destination "
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "of the goods being carried"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "* **Freight forwarder**: Intermediary between a shipper and various transportation services"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "* **Third party warehousing**: organization\u0027s use of third-party businesses to outsource elements of its distribution, "
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "warehousing, and fulfillment services"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "### Deleting a person"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "1. Deleting a person while all persons are being shown"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 83,
      "-": 352,
      "cx0810": 22,
      "xnmng": 104,
      "Syasyazman": 63
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "# LogOnce"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tigerting98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "**LogOnce** is a one-stop logistics tracker app for clerks to monitor shipping statuses of all clients and perform common logistics operations. It is optimized for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, LogOnce can get your tracking tasks done faster than traditional GUI apps. **This application is currently being developed and has not been deployed yet.**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "* Words in angle brackets `\u003cparameter\u003e` are the parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "  e.g. in `order --description \u003corder description --client \u003cclient ID\u003e`, `\u003cclient ID\u003e` is a integer parameter such as `123`."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "* Words with `--` before them indicate keywords that must be used.\u003cbr\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "  e.g. `order --description Wooden Table --client 301`. `--description` and `--client` must be typed used."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "* Words with `-` before them indicate tokens that are optional and change the functionality of the command.\u003cbr\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "  e.g `list -a`. `-a` is a token that allows the `list` command to list completed orders in addition to current pending orders."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "### Adding a Client Order : `order`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "Creates an order made by a client. The order of the orders made by the client will be (by default) the natural ordering.\u003cbr\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "Orders will be assigned an ID number automatically when created. This ID number is not unique and must be used in conjunction with the client ID to identify an order."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "Format : `order --description \u003corder description\u003e --client \u003cclient ID\u003e` "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "`\u003corder description\u003e` must exist in the order command"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "`\u003cclient id\u003e` must exist in the order command (an order is always linked to a client)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "Example :"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "`order --description shoes --client 123` : creates an order ordered by client 123 called “shoes”"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "### Adding a Client : `client`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "Creates a new client with the name `\u003cclient name\u003e` and the address `\u003cclient address\u003e`."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "Format : `client --name \u003cclient name\u003e --address \u003cclient address\u003e --email \u003cclient email\u003e --phone \u003cclient phone no.\u003e`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "`\u003cclient name\u003e` must not be blank.\u003cbr\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "`\u003cclient address\u003e` must not be blank. \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "`\u003cclient email\u003e` must not be blank. \u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "`\u003cclient phone\u003e` must not be blank."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "Example :\u003cbr\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "`client --name John Wick --address New York Continental` : adds a client named John Wick whose address is the New York Continental"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "### Listing Orders : `list` "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "Returns a list of orders. The token `-a` can be used to list completed orders as well. "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cx0810"
        },
        "content": "Format : `listO`\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "Displays a list of all orders in the order list (and the client that placed the order respectively)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cx0810"
        },
        "content": "Format: `listC`\u003cbr\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cx0810"
        },
        "content": "Displays a list of all clients in the client list "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "`list -a`\u003cbr\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "Displays a list of current orders, and past orders (completed)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "### Deleting a Client : `delete-client`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "Deletes a client from client list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "Format : `delete --client \u003cclient id\u003e`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "Deletes client identified by `\u003cclient id\u003e`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "`\u003cclient id\u003e` must exist in the client list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "Example :"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "`delete-client --client 999` : deletes the client with client id 999 "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "### Deleting an Order : `delete-order`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "Deletes an order from order list."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "Format : `delete --order \u003corder id\u003e`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "Deletes order identified by `\u003corder id\u003e`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "`\u003corder id\u003e` must exist in the order list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "Example :"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "`delete-order --order 123` : deletes the order with order id 123"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "### Completing Orders : `done`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "Marks a certain order as done."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "Format : `done --order \u003corder id\u003e`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "Marks `Order` with `\u003corder id\u003e` as done."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "`\u003corder id\u003e` must exist in the order list."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "`\u003corder id\u003e` is based on the index number of orders in the GUI window."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "Example :"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "`done --client 10 --order 3` : deletes the order no. 3 of client with client id 10 "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "## Command summary"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "Action | Format"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "**Order** | `order --description \u003corder description\u003e --client \u003cclient ID\u003e` "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "**Client** | `client --name \u003cclient name\u003e --address \u003cclient address\u003e`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "**Delete** | `delete-order --order \u003corder id\u003e` \u003cbr\u003e `delete-client --client \u003cclient id\u003e`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cx0810"
        },
        "content": "**List** | `listC` \u003cbr\u003e `listO` \u003cbr\u003e `list -a`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "**Done** | `done --order \u003corder id\u003e`"
      }
    ],
    "authorContributionMap": {
      "-": 61,
      "cx0810": 4,
      "tigerting98": 41,
      "Syasyazman": 17
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "title: LogOnce"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103-F09-4/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103-F09-4/tp/actions)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "# LogOnce"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "**LogOnce** is a one-stop logistics tracker app for clerks to monitor shipping statuses of all clients and perform common logistics operations. It is optimized for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, LogOnce can get your tracking tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "## Features for v1.2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tigerting98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "v1.2 will have very basic features."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "* Managing relevant information to tracking orders"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "  * Managing client information - Name, address, orders under this client etc."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "  * Managing order data - Client information, address, order date, item etc."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "  * Associate clients with orders (Relationship between clients and orders)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "* CLI for user input"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "  * (Extension- Shortcuts for user input (fast typists))"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "More features coming soon!"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      }
    ],
    "authorContributionMap": {
      "-": 14,
      "tigerting98": 14
    }
  },
  {
    "path": "docs/team/Syasyazman.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "title: Syasya Azman\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "## Project: AddressBook Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "Syasyazman": 46
    }
  },
  {
    "path": "docs/team/cx0810.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "title: Xiao Chengxin\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "## Project: AddressBook Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "Syasyazman": 46
    }
  },
  {
    "path": "docs/team/tigerting98.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "title: Ting Xiao\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "## Project: AddressBook Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "Syasyazman": 46
    }
  },
  {
    "path": "docs/team/xnmng.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "title: Pua Xuan Ming\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "## Project: AddressBook Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "Syasyazman": 46
    }
  },
  {
    "path": "docs/team/youyingfeng.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "title: You Yingfeng\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "## Project: AddressBook Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "Syasyazman": 46
    }
  },
  {
    "path": "docs/tutorials/AddRemark.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Adding a command\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s walk you through the implementation of a new command — `remark`."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Create a new `remark` command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": " * Changes the remark of an existing client in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "### Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "### Run the application"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "![Output displayed](../images/add-remark/RemarkHello.png)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "## Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the client identified \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            + \"by the index number used in the last client listing. \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "## Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` to parse input from the user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "### Make the command accept parameters"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     * @param index of the client in the filtered client list to edit the remark"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     * @param remark of the client to be updated to"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "### Parse user input"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package. The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentTokenizer.java`:**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentMultimap.java`:**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "**`DeleteCommandParser.java`:**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommandParser.java`:**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508)."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## Add `Remark` to the model"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of client data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the client’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a client."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "### Add a new `Remark` class"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "Create a new `Remark` in `seedu.address.model.client`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "validation."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "### Make use of `Remark`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "## Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each client."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "Simply add the following to [`seedu.address.ui.PersonCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe)."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonListCard.fxml`:**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "That’s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "![$remark shows up in each entry](../images/add-remark/$Remark.png)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "## Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "### Modify `Person`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "### Update other usages of `Person`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "## Updating Storage"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "to see what the changes entail."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "## Finalizing the UI"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "public PersonCard(Person client, int displayedIndex) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    remark.setText(client.getRemark().value);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "![The remark label is bound properly!](../images/add-remark/RemarkBound.png)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "## Putting everything together"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "### Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        Person clientToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        Person editedClient \u003d new Person(clientToEdit.getName(), clientToEdit.getPhone(), clientToEdit.getEmail(),"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                clientToEdit.getAddress(), remark, clientToEdit.getTags());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        model.setPerson(clientToEdit, editedClient);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedClient));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     * {@code clientToEdit}."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private String generateSuccessMessage(Person clientToEdit) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        return String.format(message, clientToEdit);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "![Congratulations!](../images/add-remark/RemarkComplete.png)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing tests"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "### Automatically generating tests"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is `methodName_testScenario_expectedResult`. An example would be"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "`execute_filteredList_success`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "![Creating a test for `execute`.](../images/add-remark/CreateTest.png)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9)."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 18,
      "-": 376
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Removing Fields\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Antoine de Saint-Exupery"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When working on AddressBook, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we’ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "## Safely deleting `Address`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify *most* usages. Let’s try to use it as much as we can."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "### Assisted refactoring"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "The `address` field in `Person` is actually an instance of the `seedu.address.model.client.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "![Usages detected](../images/remove/UnsafeDelete.png)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "![List of conflicts](../images/remove/SafeDeleteConflicts.png)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Safe delete the field `address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Yes` when prompted to remove getters and setters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `View Usages` again.\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "### Manual refactoring"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "![$address](../images/remove/$address.png)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.fxml`**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "## Tidying up"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**`invalidPersonAddressBook.json`:**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "```json"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "  \"clients\": [ {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 2,
      "-": 101
    }
  },
  {
    "path": "docs/tutorials/TracingCode.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Tracing code\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Before we start"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "![ArchitectureDiagram](../images/ArchitectureDiagram.png)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "![Architecture sequence diagram from the developer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "guide](../images/ArchitectureSequenceDiagram.png)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows *between* the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram succeeds in informing the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting a break point"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in `seedu.address.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the `Search for target by name` feature. `Navigate` \\\u003e `Symbol`.](../images/tracing/Execute.png)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we’re looking for. However, it is just an `Interface`. Let’s delve further and find the implementation of the interface by using the `Find Usages` feature in IntelliJ IDEA."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " ![LeftGutter](../images/tracing/LeftGutter.png)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "## Tracing the execution path"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to jot down what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "1. To start the debugging session, simply `Run` \\\u003e `Debug Main`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "1. Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "1. The Debugger tool window should show up and look something like this:\u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "1. Use the `Show execution point` feature to jump to the line of code that we stopped at:\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. We are interested in the `logic.execute(commandText)` portion of that line so let’s `Step in` into that method call:\u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    ![StepInto](../images/tracing/StepInto.png)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "1. We end up in `LogicManager#execute()`. Let’s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "   **LogicManager\\#execute().**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(String commandText)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "           throws CommandException, ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        //Logging, safe to ignore"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        //Parse user input from String to a Command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        //Executes the Command and stores the result"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            // since it\u0027s being stored here."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` the logging code since it is of no interest to us now. ![StepOver](../images/tracing/StepOver.png)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    **`AddressBookParser\\#parseCommand()`**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "   public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "       final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "       final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Variables](../images/tracing/Variables.png)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into the `switch`, we obviously stop at **`AddressBookParser\\#parseCommand()`.**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:** Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them\\!"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the `Variable` tool window.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "   ![EditCommand](../images/tracing/EditCommand.png)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far matches with the diagram?\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "1. Now let’s see what happens when we call `command#execute()`\\!"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "   **`EditCommand\\#execute()`:**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "       Person clientToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "       Person editedClient \u003d createEditedPerson(clientToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "       if (!clientToEdit.isSamePerson(editedClient) \u0026\u0026 model.hasPerson(editedClient)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "           throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "       }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "       model.setPerson(clientToEdit, editedClient);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedClient));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "1. As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    `JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "1. Again, it appears that the heavy lifting is delegated. Let’s take a look at `JsonSerializableAddressBook`\u0027s constructor."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    **`JsonSerializableAddressBook\\#JsonSerializableAddressBook()`:**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "   /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "   public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "       clients.addAll("
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "           source.getPersonList()"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                 .stream()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                 .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                 .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    **`ResultDisplay\\#setFeedbackToUser()`**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "1. Finally, we step through until we reach the end of"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "the result being displayed to the user. From this tutorial, you learned"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "more about the inner workings of AddressBook and how the various"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "components mesh together to form one cohesive product."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "execution path tracing. In some cases, you can do further tracing for"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "the given commands to find exactly what happens."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    instead? What exceptions do you think will be thrown(if any), where"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    will the exceptions be thrown and where will they be handled?"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  `edit 1`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "2.  What components will you have to modify to perform the following"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    enhancements to the application?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  Make command words case-insensitive"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  Save the address book in the CSV format instead"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  Add a new command"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  Add a new field to `Person`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  Add a new entity to the address book"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 6,
      "-": 244
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public static final String MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX \u003d \"The client index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "    public static final String MESSAGE_ORDERS_LISTED_OVERVIEW \u003d \"%1$d orders listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public static final String MESSAGE_INVALID_ORDER_DISPLAYED_INDEX \u003d \"The order index provided is invalid\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public static final String MESSAGE_CREATE_ORDER_SUCCESS \u003d \"The order has been successfully created\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 11,
      "xnmng": 1,
      "Syasyazman": 2,
      "tigerting98": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cx0810"
        },
        "content": "    public Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 53,
      "cx0810": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import seedu.address.model.person.Client;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import seedu.address.model.person.Order;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of clients */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    ObservableList\u003cClient\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    /** Returns an unmodifiable view of the unfiltered list of clients */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    ObservableList\u003cClient\u003e getUnfilteredPersonList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of orders */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    ObservableList\u003cOrder\u003e getFilteredOrderList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    /** Returns an unmodifiable view of the unfiltered list of orders */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    ObservableList\u003cOrder\u003e getUnfilteredOrderList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 2,
      "-": 48,
      "Syasyazman": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import seedu.address.model.person.Client;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import seedu.address.model.person.Order;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public ObservableList\u003cClient\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public ObservableList\u003cClient\u003e getUnfilteredPersonList() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        return model.getUnfilteredPersonList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public ObservableList\u003cOrder\u003e getFilteredOrderList() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        return model.getFilteredOrderList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public ObservableList\u003cOrder\u003e getUnfilteredOrderList() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        return model.getUnfilteredOrderList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 2,
      "-": 79,
      "Syasyazman": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import seedu.address.model.person.Client;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private final Client toAdd;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public AddCommand(Client client) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        requireNonNull(client);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        toAdd \u003d client;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 5,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.CLIENT_PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.CLIENT_PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.CLIENT_PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.CLIENT_PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import seedu.address.model.person.Client;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "public class ClientCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"client\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a client to LogOnce. \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            + CLIENT_PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            + CLIENT_PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            + CLIENT_PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            + CLIENT_PREFIX_PHONE + \"PHONE\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New client added: %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This client already exists in LogOnce\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private final Client toAdd;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public ClientCommand(Client client) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        requireNonNull(client);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        toAdd \u003d client;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                || (other instanceof ClientCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                \u0026\u0026 toAdd.equals(((ClientCommand) other).toAdd));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteClientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.DELETE_PREFIX_CLIENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import seedu.address.model.person.Client;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "public class DeleteClientCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete-client\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + DELETE_PREFIX_CLIENT + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public static final String MESSAGE_DELETE_CLIENT_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public DeleteClientCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        List\u003cClient\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        Client clientToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        model.deletePerson(clientToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_CLIENT_SUCCESS, clientToDelete));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "                || (other instanceof DeleteClientCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteClientCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 4,
      "-": 40,
      "Syasyazman": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteOrderCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.DELETE_PREFIX_ORDER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import seedu.address.model.person.Order;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "public class DeleteOrderCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete-order\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            + \": Deletes the order identified by the index number used in the displayed order list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + DELETE_PREFIX_ORDER + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public static final String MESSAGE_DELETE_ORDER_SUCCESS \u003d \"Deleted Order: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public DeleteOrderCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        List\u003cOrder\u003e lastShownList \u003d model.getFilteredOrderList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        System.out.println(\"lastShownList size\" + lastShownList.size());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        System.out.println(\"targetIndex deletecommand\" + targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ORDER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        Order orderToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        System.out.println(\"client id of order to be deleted\" + orderToDelete.getClientId().getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        model.deleteOrder(orderToDelete);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_ORDER_SUCCESS, orderToDelete));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "                || (other instanceof DeleteOrderCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteOrderCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Syasyazman": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DoneCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tigerting98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.DONE_PREFIX_ORDER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tigerting98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tigerting98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "import seedu.address.model.person.Order;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tigerting98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tigerting98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tigerting98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Marked as done. \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "    public static final String MESSAGE_ALREADY_DONE \u003d \"This order is already completed. \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "    public static final String MESSAGE_NOT_FOUND \u003d \"There is no order with this index number. \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "            + \": marks the order identified by the index number used in the displayed order list as done.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "            + \"Parameters: INDEX must be a positive integer.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + DONE_PREFIX_ORDER + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tigerting98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "    private Index toMarkAsDoneIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tigerting98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "     *Creates an DoneCommand to mark the {@code Order} specified by {@code Index index} as done"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "    public DoneCommand(Index index) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "        toMarkAsDoneIndex \u003d index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tigerting98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "        List\u003cOrder\u003e lastShownList \u003d model.getFilteredOrderList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "        requireNonNull(lastShownList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        if (toMarkAsDoneIndex.getZeroBased() \u003e lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_FOUND);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "        Order orderToMark \u003d lastShownList.get(toMarkAsDoneIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "        if (orderToMark.isDone()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "            throw new CommandException(MESSAGE_ALREADY_DONE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "            orderToMark.markAsDone();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tigerting98": 50,
      "Syasyazman": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cx0810"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ORDERS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import seedu.address.model.person.Client;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        List\u003cClient\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        Client clientToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        Client editedClient \u003d createEditedPerson(clientToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        if (!clientToEdit.isSamePerson(editedClient) \u0026\u0026 model.hasPerson(editedClient)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        model.setPerson(clientToEdit, editedClient);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cx0810"
        },
        "content": "        model.updateFilteredOrderList(PREDICATE_SHOW_ALL_ORDERS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedClient));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private static Client createEditedPerson(Client clientToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        assert clientToEdit !\u003d null;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(clientToEdit.getName());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(clientToEdit.getPhone());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(clientToEdit.getEmail());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(clientToEdit.getAddress());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        return new Client(updatedName, updatedPhone, updatedEmail, updatedAddress);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 16,
      "-": 184,
      "cx0810": 2,
      "Syasyazman": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindOrderCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tigerting98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tigerting98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "import seedu.address.model.person.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tigerting98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tigerting98"
        },
        "content": " * Finds and lists all orders in address book whose description contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tigerting98"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tigerting98"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "public class FindOrderCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tigerting98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findorder\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tigerting98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all orders whose descriptions contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "                                                       + \"the specified keywords (case-insensitive) and displays \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "                                                       + \"them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "                                                       + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "                                                       + \"Example: \" + COMMAND_WORD + \"phone keyboard mouse\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tigerting98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "    private final DescriptionContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tigerting98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "    public FindOrderCommand(DescriptionContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tigerting98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "        model.updateFilteredOrderList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "                String.format(Messages.MESSAGE_ORDERS_LISTED_OVERVIEW, model.getFilteredOrderList().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tigerting98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "        assert other !\u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "                       || (other instanceof FindOrderCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "                                   \u0026\u0026 predicate.equals(((FindOrderCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tigerting98": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cx0810"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cx0810"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cx0810"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cx0810"
        },
        "content": "import seedu.address.ui.MainWindow;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cx0810"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listC\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cx0810"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(\"list\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cx0810"
        },
        "content": "        logger.log(Level.INFO, \"start processing\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cx0810"
        },
        "content": "        MainWindow.getInstance().handleClients();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cx0810"
        },
        "content": "        logger.log(Level.INFO, \"end processing\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 23,
      "cx0810": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListOrderCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cx0810"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cx0810"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cx0810"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cx0810"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ORDERS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cx0810"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cx0810"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cx0810"
        },
        "content": "import seedu.address.ui.MainWindow;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cx0810"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cx0810"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cx0810"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cx0810"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cx0810"
        },
        "content": "public class ListOrderCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cx0810"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cx0810"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listO\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cx0810"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cx0810"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all orders\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cx0810"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cx0810"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cx0810"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cx0810"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cx0810"
        },
        "content": "        model.updateFilteredOrderList(PREDICATE_SHOW_ALL_ORDERS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cx0810"
        },
        "content": "        MainWindow.getInstance().handleOrders();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cx0810"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cx0810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cx0810"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cx0810": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/OrderCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnmng"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xnmng"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.ORDER_PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnmng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.ORDER_PREFIX_CLIENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.ORDER_PREFIX_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnmng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.ORDER_PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnmng"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnmng"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnmng"
        },
        "content": "import seedu.address.model.person.Order;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xnmng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xnmng"
        },
        "content": " * Creates an order linked to an existing person in the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xnmng"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xnmng"
        },
        "content": "public class OrderCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"order\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            + \": Creates an order linked to an existing person in the address book.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            + \"Parameters: DESCRIPTION (string to describe the created order)\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            + \"CLIENT_ID (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + ORDER_PREFIX_DESCRIPTION + \" shoes \" + ORDER_PREFIX_CLIENT + \" 123\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "            + ORDER_PREFIX_ADDRESS + \"Jurong West Central 3\" + ORDER_PREFIX_DATE + \"2020-11-30 2359\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New client added: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ORDER \u003d \"This client already exists in LogOnce\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private final Order toAdd;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     * Creates an OrderCommand to add the specified {@code Order}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public OrderCommand(Order order) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        requireAllNonNull(order);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        this.toAdd \u003d order;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        if (model.hasOrder(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ORDER);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        model.addOrder(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                || (other instanceof OrderCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                \u0026\u0026 toAdd.equals(((OrderCommand) other).toAdd)); // same as ClientCommand\u0027s equals"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xnmng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 16,
      "xnmng": 41,
      "tigerting98": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import seedu.address.model.person.Client;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        Client client \u003d new Client(name, phone, email, address);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        return new AddCommand(client);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 3,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cx0810"
        },
        "content": "import seedu.address.logic.commands.ClientCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cx0810"
        },
        "content": "import seedu.address.logic.commands.DeleteClientCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cx0810"
        },
        "content": "import seedu.address.logic.commands.DeleteOrderCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cx0810"
        },
        "content": "import seedu.address.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "import seedu.address.logic.commands.FindOrderCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cx0810"
        },
        "content": "import seedu.address.logic.commands.ListOrderCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xnmng"
        },
        "content": "import seedu.address.logic.commands.OrderCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        case ClientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            return new ClientCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        case DeleteClientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            return new DeleteClientCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        case DeleteOrderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            return new DeleteOrderCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "        case FindOrderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "            return new FindOrderCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tigerting98"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cx0810"
        },
        "content": "        case ListOrderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cx0810"
        },
        "content": "            return new ListOrderCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cx0810"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "        case DoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "            return new DoneCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tigerting98"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        case OrderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            return new OrderCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 3,
      "-": 74,
      "cx0810": 8,
      "xnmng": 4,
      "tigerting98": 7,
      "Syasyazman": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    /* Original Prefix definitions */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    /* New Prefix definitions */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public static final Prefix CLIENT_PREFIX_NAME \u003d new Prefix(\"--name\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public static final Prefix CLIENT_PREFIX_ADDRESS \u003d new Prefix(\"--address\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public static final Prefix CLIENT_PREFIX_EMAIL \u003d new Prefix(\"--email\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public static final Prefix CLIENT_PREFIX_PHONE \u003d new Prefix(\"--phone\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    /* Prefix definitions for DELETE */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public static final Prefix DELETE_PREFIX_CLIENT \u003d new Prefix(\"--client\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public static final Prefix DELETE_PREFIX_ORDER \u003d new Prefix(\"--order\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    /* Prefix definitions for DONE */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "    public static final Prefix DONE_PREFIX_ORDER \u003d new Prefix(\"--order\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    /* Prefix definitions for ORDER */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public static final Prefix ORDER_PREFIX_DESCRIPTION \u003d new Prefix(\"--description\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public static final Prefix ORDER_PREFIX_CLIENT \u003d new Prefix(\"--client\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public static final Prefix ORDER_PREFIX_ADDRESS \u003d new Prefix(\"--address\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public static final Prefix ORDER_PREFIX_DATE \u003d new Prefix(\"--date\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    /* Formatter for all date/time inputs */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public static final DateTimeFormatter DEFAULT_DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 19,
      "-": 14,
      "xnmng": 2,
      "Syasyazman": 2,
      "tigerting98": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ClientCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.CLIENT_PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.CLIENT_PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.CLIENT_PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.CLIENT_PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import seedu.address.logic.commands.ClientCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import seedu.address.model.person.Client;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "public class ClientCommandParser implements Parser\u003cClientCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public ClientCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                                           CLIENT_PREFIX_NAME,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                                           CLIENT_PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                                           CLIENT_PREFIX_EMAIL,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                                           CLIENT_PREFIX_PHONE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        if (!arePrefixesPresent(argMultimap,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                                CLIENT_PREFIX_NAME,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                                CLIENT_PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                                CLIENT_PREFIX_EMAIL,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                                CLIENT_PREFIX_PHONE)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(CLIENT_PREFIX_NAME).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(CLIENT_PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(CLIENT_PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(CLIENT_PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        Client client \u003d new Client(name, phone, email, address);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        return new ClientCommand(client);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteClientCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.DELETE_PREFIX_CLIENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import seedu.address.logic.commands.DeleteClientCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "public class DeleteClientCommandParser implements Parser\u003cDeleteClientCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public DeleteClientCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "                    ArgumentTokenizer.tokenize(args, DELETE_PREFIX_CLIENT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            if (!arePrefixesPresent(argMultimap,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "                    DELETE_PREFIX_CLIENT)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "                    || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "                        DeleteClientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            Index index \u003d ParserUtil.parseClientIndex(argMultimap.getValue(DELETE_PREFIX_CLIENT).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            return new DeleteClientCommand(index);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteClientCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 23,
      "Syasyazman": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteOrderCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.DELETE_PREFIX_ORDER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import seedu.address.logic.commands.DeleteOrderCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "public class DeleteOrderCommandParser implements Parser\u003cDeleteOrderCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public DeleteOrderCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "                    ArgumentTokenizer.tokenize(args, DELETE_PREFIX_ORDER);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            if (!arePrefixesPresent(argMultimap,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "                    DELETE_PREFIX_ORDER)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "                    || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "                        DeleteOrderCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            Index index \u003d ParserUtil.parseOrderIndex(argMultimap.getValue(DELETE_PREFIX_ORDER).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            System.out.print(\"deletecommandparser index\" + index.getZeroBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            return new DeleteOrderCommand(index);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteOrderCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Syasyazman": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DoneCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tigerting98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.DONE_PREFIX_ORDER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tigerting98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tigerting98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "import seedu.address.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tigerting98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tigerting98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tigerting98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "public class DoneCommandParser implements Parser\u003cDoneCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tigerting98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "    public DoneCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "            ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "                    ArgumentTokenizer.tokenize(args, DONE_PREFIX_ORDER);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tigerting98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "            if (!arePrefixesPresent(argMultimap,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "                    DONE_PREFIX_ORDER)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "                        || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "                        DoneCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tigerting98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "            Index index \u003d ParserUtil.parseOrderIndex(argMultimap.getValue(DONE_PREFIX_ORDER).get());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tigerting98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "            return new DoneCommand(index);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DoneCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tigerting98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tigerting98"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tigerting98": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindOrderCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tigerting98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tigerting98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tigerting98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "import seedu.address.logic.commands.FindOrderCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "import seedu.address.model.person.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tigerting98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tigerting98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "public class FindOrderCommandParser implements Parser\u003cFindOrderCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tigerting98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "    private static final Logger findOrderCommandParserLogger \u003d Logger.getLogger(\"focp\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tigerting98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindOrderCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "     * and returns a FindOrderCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "    public FindOrderCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "            findOrderCommandParserLogger.log(Level.WARNING, \"empty search keywords\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindOrderCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tigerting98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "        String[] descriptionKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tigerting98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "        return new FindOrderCommand(new DescriptionContainsKeywordsPredicate(Arrays.asList(descriptionKeywords)));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tigerting98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tigerting98": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/OrderCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnmng"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xnmng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xnmng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.ORDER_PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.ORDER_PREFIX_CLIENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.ORDER_PREFIX_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.ORDER_PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xnmng"
        },
        "content": "import seedu.address.logic.commands.OrderCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xnmng"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import seedu.address.model.person.Order;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xnmng"
        },
        "content": "public class OrderCommandParser {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * @param args full user input string"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * @return an OrderCommand object for execution"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public OrderCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                                           ORDER_PREFIX_DESCRIPTION,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                                           ORDER_PREFIX_CLIENT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                                           ORDER_PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                                           ORDER_PREFIX_DATE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        if (!arePrefixesPresent(argMultimap,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                                ORDER_PREFIX_DESCRIPTION,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                                ORDER_PREFIX_CLIENT,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                                ORDER_PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                                ORDER_PREFIX_DATE)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, OrderCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        Index orderId \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        Index clientId \u003d ParserUtil.parseOrderIndex(argMultimap.getValue(ORDER_PREFIX_CLIENT).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        String description \u003d argMultimap.getValue(ORDER_PREFIX_DESCRIPTION).orElse(\"\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(ORDER_PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        System.out.println(argMultimap.getValue(ORDER_PREFIX_DATE).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        LocalDateTime deliveryDateTime \u003d ParserUtil.parseDate(argMultimap.getValue(ORDER_PREFIX_DATE).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        LocalDateTime creationDateTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        boolean isDone \u003d false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        Order order \u003d new Order(orderId, clientId, description, address, deliveryDateTime, creationDateTime, isDone);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        return new OrderCommand(order);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xnmng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 44,
      "xnmng": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.DEFAULT_DATE_TIME_FORMATTER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     * Parses {@code clientIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public static Index parseClientIndex(String clientIndex) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        requireNonNull(clientIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        String trimmedIndex \u003d clientIndex.trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     * Parses {@code orderIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public static Index parseOrderIndex(String orderIndex) throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        requireNonNull(orderIndex);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        String trimmedIndex \u003d orderIndex.trim();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public static LocalDateTime parseDate(String s) throws ParseException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            return LocalDateTime.parse(s, DEFAULT_DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            throw new ParseException(e.getMessage());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 15,
      "-": 126,
      "Syasyazman": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import seedu.address.model.person.Client;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import seedu.address.model.person.Order;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import seedu.address.model.person.UniqueOrderList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson and .isSameOrder comparison)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    private final UniqueOrderList orders;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        orders \u003d new UniqueOrderList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public void setPersons(List\u003cClient\u003e clients) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        this.persons.setPersons(clients);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     * Replaces the contents of the order list with {@code orders}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     * {@code orders} must not contain duplicate orders."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public void setOrders(List\u003cOrder\u003e orders) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        this.orders.setOrders(orders);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        setOrders(newData.getOrderList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public boolean hasClient(Client client) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        requireNonNull(client);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        return persons.contains(client);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public void addClient(Client p) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        if (p.getClientId() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            ObservableList\u003cClient\u003e tempClientList \u003d this.getPersonList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            if (tempClientList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                p.setClientId(1);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                int newIndex \u003d tempClientList.get(tempClientList.size() - 1).getClientId() + 1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                p.setClientId(newIndex);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public void setClient(Client target, Client editedClient) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        requireNonNull(editedClient);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        persons.setPerson(target, editedClient);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public void removeClient(Client key) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        int clientId \u003d key.getClientId();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        assert clientId !\u003d 0;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        ObservableList\u003cOrder\u003e tempOrderList \u003d this.getOrderList();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        System.out.println(\"size of order list\" + (tempOrderList.size() + 1));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        for (int i \u003d 0; i \u003c tempOrderList.size(); i++) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            System.out.println(\"index\" + i);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            Order order \u003d tempOrderList.get(i);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            Index clientLinkedId \u003d order.getClientId();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            if (clientLinkedId.getZeroBased() \u003d\u003d clientId) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "                removeOrder(order);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    // order-level operations"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public boolean hasOrder(Order order) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        requireNonNull(order);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        return orders.contains(order);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public void addOrder(Order o) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        requireNonNull(o);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        if (o.getOrderId().getZeroBased() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            ObservableList\u003cOrder\u003e tempOrderList \u003d this.getOrderList();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            if (tempOrderList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                o.setOrderId(1);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                int newOrderId \u003d tempOrderList.get(tempOrderList.size() - 1).getOrderId().getZeroBased() + 1;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                o.setOrderId(newOrderId);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        orders.add(o);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public void setOrder(Order target, Order editedOrder) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        requireNonNull(editedOrder);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        orders.setOrder(target, editedOrder);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public void removeOrder(Order key) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        orders.remove(key);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public ObservableList\u003cClient\u003e getPersonList() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public ObservableList\u003cOrder\u003e getOrderList() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        return orders.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "                \u0026\u0026 orders.equals(((AddressBook) other).orders));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        // todo : implementation for orders hashcode"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 33,
      "-": 108,
      "Syasyazman": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import seedu.address.model.person.Client;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import seedu.address.model.person.Order;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cx0810"
        },
        "content": "    Predicate\u003cClient\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cx0810"
        },
        "content": "    Predicate\u003cOrder\u003e PREDICATE_SHOW_ALL_ORDERS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cx0810"
        },
        "content": "    boolean hasPerson(Client client);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cx0810"
        },
        "content": "    void deletePerson(Client target);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cx0810"
        },
        "content": "    void addPerson(Client client);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cx0810"
        },
        "content": "    void setPerson(Client target, Client editedClient);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cx0810"
        },
        "content": "    ObservableList\u003cClient\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cx0810"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cClient\u003e predicate);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    /** Returns an unmodifiable view of the unfiltered person list */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    ObservableList\u003cClient\u003e getUnfilteredPersonList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     * Returns true if a order with the same identity as {@code order} exists in the order book."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cx0810"
        },
        "content": "    boolean hasOrder(Order client);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     * Deletes the given order."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     * The order must exist in the order book"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cx0810"
        },
        "content": "    void deleteOrder(Order target);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     * Adds the given order."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     * {@code order} must not already exist in the order book."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cx0810"
        },
        "content": "    void addOrder(Order order);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     * Replaces the given order {@code target} with {@code editedOrder}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     * {@code target} must exist in the order book."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     * The person identity of {@code editedOrder} must not be the same as another existing order in the order book."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cx0810"
        },
        "content": "    void setOrder(Order target, Order editedOrder);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    /** Returns an unmodifiable view of the filtered order list */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cx0810"
        },
        "content": "    ObservableList\u003cOrder\u003e getFilteredOrderList();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     * Updates the filter of the filtered order list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cx0810"
        },
        "content": "    void updateFilteredOrderList(Predicate\u003cOrder\u003e predicate);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    /** Returns an unmodifiable view of the unfiltered order list */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    ObservableList\u003cOrder\u003e getUnfilteredOrderList();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 1,
      "-": 79,
      "cx0810": 14,
      "Syasyazman": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import seedu.address.model.person.Client;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import seedu.address.model.person.Order;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private final FilteredList\u003cClient\u003e filteredClients;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    private final FilteredList\u003cOrder\u003e filteredOrders;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        filteredClients \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        filteredOrders \u003d new FilteredList\u003c\u003e(this.addressBook.getOrderList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public boolean hasPerson(Client client) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        requireNonNull(client);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        return addressBook.hasClient(client);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public void deletePerson(Client target) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        addressBook.removeClient(target);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public void addPerson(Client client) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        addressBook.addClient(client);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public void setPerson(Client target, Client editedClient) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        requireAllNonNull(target, editedClient);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        addressBook.setClient(target, editedClient);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d OrderBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public boolean hasOrder(Order order) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        requireNonNull(order);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        return addressBook.hasOrder(order);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public void deleteOrder(Order target) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        addressBook.removeOrder(target);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public void addOrder(Order order) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        addressBook.addOrder(order);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        updateFilteredOrderList(PREDICATE_SHOW_ALL_ORDERS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public void setOrder(Order target, Order editedOrder) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        requireAllNonNull(target, editedOrder);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        addressBook.setOrder(target, editedOrder);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Client List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public ObservableList\u003cClient\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        return filteredClients;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cClient\u003e predicate) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        filteredClients.setPredicate(predicate);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public ObservableList\u003cClient\u003e getUnfilteredPersonList() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        Predicate alwaysTrue \u003d t -\u003e true;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        filteredClients.setPredicate(alwaysTrue);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        return filteredClients;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "                \u0026\u0026 filteredClients.equals(other.filteredClients)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "                \u0026\u0026 filteredOrders.equals(other.filteredOrders);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Order List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Order} backed by the internal list of"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     * {@code versionedOrderBook}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public ObservableList\u003cOrder\u003e getFilteredOrderList() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        return filteredOrders;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public void updateFilteredOrderList(Predicate\u003cOrder\u003e predicate) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        filteredOrders.setPredicate(predicate);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public ObservableList\u003cOrder\u003e getUnfilteredOrderList() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        Predicate alwaysTrue \u003d t -\u003e true;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        filteredOrders.setPredicate(alwaysTrue);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        return filteredOrders;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 17,
      "-": 134,
      "Syasyazman": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import seedu.address.model.person.Client;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import seedu.address.model.person.Order;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    ObservableList\u003cClient\u003e getPersonList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     * Returns an unmodifiable view of the orders list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     * This list will not contain any duplicate orders."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    ObservableList\u003cOrder\u003e getOrderList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 2,
      "-": 15,
      "Syasyazman": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Client.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnmng"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnmng"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "public class Client {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private Index clientId;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private List\u003cIndex\u003e orders;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public Client(Name name, Phone phone, Email email, Address address) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        requireAllNonNull(name, phone, email, address);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        this.clientId \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        this.orders \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     * Used when loading clients from an existing file"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public Client(Name name, Phone phone, Email email, Address address, Index clientId, List\u003cIndex\u003e orders) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        requireAllNonNull(name, phone, email, address);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        this.clientId \u003d clientId;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        this.orders \u003d orders;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public int getClientId() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        return clientId.getZeroBased();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public List\u003cIndex\u003e getOrders() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        return orders;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public void setClientId(int id) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        this.clientId \u003d Index.fromZeroBased(id);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public boolean isSamePerson(Client otherClient) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        if (otherClient \u003d\u003d this) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        return otherClient !\u003d null"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                \u0026\u0026 otherClient.getName().equals(getName())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                \u0026\u0026 (otherClient.getPhone().equals(getPhone()) || otherClient.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        if (!(other instanceof Client)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        Client otherClient \u003d (Client) other;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        return otherClient.getName().equals(getName())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                \u0026\u0026 otherClient.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                \u0026\u0026 otherClient.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                \u0026\u0026 otherClient.getAddress().equals(getAddress());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        return Objects.hash(name, phone, email, address);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "               .append(\" Phone: \")"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "               .append(getPhone())"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "               .append(\" Email: \")"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "               .append(getEmail())"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "               .append(\" Address: \")"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "               .append(getAddress());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 43,
      "-": 86,
      "xnmng": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/DescriptionContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tigerting98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tigerting98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tigerting98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tigerting98"
        },
        "content": " * Tests that a {@code Order}\u0027s {@code Description} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tigerting98"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "public class DescriptionContainsKeywordsPredicate implements Predicate\u003cOrder\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tigerting98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "    public DescriptionContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tigerting98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "    public boolean test(Order order) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "                       .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(order.getDescription(), keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tigerting98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "                       || (other instanceof DescriptionContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "                                   \u0026\u0026 keywords.equals(((DescriptionContainsKeywordsPredicate) other).keywords));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tigerting98": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cClient\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public boolean test(Client client) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(client.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 3,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Order.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xnmng"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "// class not implemented yet"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "public class Order {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            \"Order date should be in the format yyyy-mm-dd\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private Index orderId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    private final Index clientId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private LocalDateTime deliveryDateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private LocalDateTime creationDateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cx0810"
        },
        "content": "    private boolean isDone \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tigerting98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     * Constructor which returns an order object with additional fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * @param description of the order"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * @param clientId id of the client this order is attached to"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public Order(Index clientId,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                 String description,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                 Address address,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                 LocalDateTime deliveryDateTime,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                 LocalDateTime creationDateTime,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                 boolean isDone) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        this.orderId \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        this.clientId \u003d Index.fromZeroBased(clientId.getOneBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        this.deliveryDateTime \u003d deliveryDateTime;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        this.creationDateTime \u003d creationDateTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     * Constructor which returns an order object with additional fields"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public Order(Index orderId,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                 Index clientId,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                 String description,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                 Address address,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                 LocalDateTime deliveryDateTime,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                 LocalDateTime creationDateTime,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                 boolean isDone) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        this.orderId \u003d orderId;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        this.clientId \u003d Index.fromZeroBased(clientId.getOneBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        this.deliveryDateTime \u003d deliveryDateTime;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        this.creationDateTime \u003d creationDateTime;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public Index getOrderId() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        return orderId;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tigerting98"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public Index getClientId() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        return this.clientId;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cx0810"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public LocalDateTime getDeliveryDateTime() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        return deliveryDateTime;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public LocalDateTime getCreationDateTime() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        return creationDateTime;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     * Returns true if both orders of the same id have at least one other identity field that is the same."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     * This defines a weaker notion of equality between two orders."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public boolean isSameOrder(Order otherOrder) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        return otherOrder \u003d\u003d this;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public void setOrderId(int orderId) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        this.orderId \u003d Index.fromZeroBased(orderId);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "     * Marks this {@code Order} as done"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "        // feel free to change - tx"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        // TODO: Refactor to use copy constructor?"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tigerting98"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tigerting98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cx0810"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 66,
      "cx0810": 3,
      "xnmng": 10,
      "Syasyazman": 16,
      "tigerting98": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/OrderIdContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": " * Tests that an {@code Order}\u0027s {@code orderId} matches any of the keywords given."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "public class OrderIdContainsKeywordsPredicate implements Predicate\u003cOrder\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    private final Index keyword;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public OrderIdContainsKeywordsPredicate(Index keyword) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public boolean test(Order order) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        Index id \u003d order.getOrderId();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        return keyword.equals(id);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "                || (other instanceof OrderIdContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "                \u0026\u0026 keyword.equals(((OrderIdContainsKeywordsPredicate) other).keyword)); // state check"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Syasyazman": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniqueOrderList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicateOrderException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import seedu.address.model.person.exceptions.OrderNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": " * A list of orders that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": " * An order is considered unique by comparing using {@code Order#isSameOrder(Order)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": " * orders uses Order#isSameOrder(Order) for equality so as to ensure that the order being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": " * unique in terms of identity in the UniqueOrderList. However, the removal of a order uses Order#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": " * as to ensure that the order with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": " * @see Order#isSameOrder(Order)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "public class UniqueOrderList implements Iterable\u003cOrder\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    private final ObservableList\u003cOrder\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    private final ObservableList\u003cOrder\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public boolean contains(Order toCheck) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameOrder);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public void add(Order toAdd) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            throw new DuplicateOrderException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public void setOrder(Order target, Order editedOrder) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        requireAllNonNull(target, editedOrder);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            throw new OrderNotFoundException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        if (!target.isSameOrder(editedOrder) \u0026\u0026 contains(editedOrder)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            throw new DuplicateOrderException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        internalList.set(index, editedOrder);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public void remove(Order toRemove) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            throw new OrderNotFoundException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public void setOrders(UniqueOrderList replacement) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public void setOrders(List\u003cOrder\u003e orders) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        requireAllNonNull(orders);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        if (!ordersAreUnique(orders)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            throw new DuplicateOrderException();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        internalList.setAll(orders);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public ObservableList\u003cOrder\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public Iterator\u003cOrder\u003e iterator() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "                || (other instanceof UniqueOrderList // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueOrderList) other).internalList));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    private boolean ordersAreUnique(List\u003cOrder\u003e orders) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        for (int i \u003d 0; i \u003c orders.size() - 1; i++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            for (int j \u003d i + 1; j \u003c orders.size(); j++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "                if (orders.get(i).isSameOrder(orders.get(j))) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "                }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Syasyazman": 136
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniquePersonList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": " * @see Client#isSamePerson(Client)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "public class UniquePersonList implements Iterable\u003cClient\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private final ObservableList\u003cClient\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private final ObservableList\u003cClient\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public boolean contains(Client toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public void add(Client toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public void setPerson(Client target, Client editedClient) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        requireAllNonNull(target, editedClient);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        if (!target.isSamePerson(editedClient) \u0026\u0026 contains(editedClient)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        internalList.set(index, editedClient);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public void remove(Client toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public void setPersons(List\u003cClient\u003e clients) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        requireAllNonNull(clients);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        if (!personsAreUnique(clients)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        internalList.setAll(clients);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public ObservableList\u003cClient\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public Iterator\u003cClient\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private boolean personsAreUnique(List\u003cClient\u003e clients) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        for (int i \u003d 0; i \u003c clients.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            for (int j \u003d i + 1; j \u003c clients.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                if (clients.get(i).isSamePerson(clients.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 21,
      "-": 116
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/DuplicateOrderException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": " * Signals that the operation will result in duplicate Orders (Orders are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "public class DuplicateOrderException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public DuplicateOrderException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        super(\"Operation would result in duplicate orders\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Syasyazman": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/OrderNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": " * Signals that the operation is unable to find the specified order."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "public class OrderNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Syasyazman": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import seedu.address.model.person.Client;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public static Client[] getSamplePersons() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        return new Client[] {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            new Client(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\")),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            new Client(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\")),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            new Client(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\")),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            new Client(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\")),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            new Client(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\")),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            new Client(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"))"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        for (Client sampleClient : getSamplePersons()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            sampleAb.addClient(sampleClient);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 17,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedClient.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import seedu.address.model.person.Client;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": " * Jackson-friendly version of {@link Client}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "class JsonAdaptedClient {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Client\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private final String clientId;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private final int[] orders;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public JsonAdaptedClient(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                             @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                             @JsonProperty(\"clientId\") String clientId, @JsonProperty(\"orders\") int[] orders) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        this.clientId \u003d clientId;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        this.orders \u003d orders;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public JsonAdaptedClient(Client source) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        clientId \u003d String.valueOf(source.getClientId());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        orders \u003d source.getOrders().stream()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                                   .map(order -\u003e order.getZeroBased())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                                   .mapToInt(Integer::intValue)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                                   .toArray();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public Client toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        if (clientId \u003d\u003d null) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Index.class.getSimpleName()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        Index modelClientId;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            int index \u003d Integer.parseInt(clientId);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            modelClientId \u003d Index.fromZeroBased(index);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        if (orders \u003d\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Orders\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        for (int order : orders) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            if (order \u003c\u003d 0) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                throw new IllegalValueException(\"Bad value in order list\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        final List\u003cIndex\u003e modelOrders \u003d new ArrayList\u003c\u003e(Arrays.stream(orders)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                                                              .mapToObj(number -\u003e Index.fromZeroBased(number))"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                                                              .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        return new Client(modelName, modelPhone, modelEmail, modelAddress, modelClientId, modelOrders);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 45,
      "-": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedOrder.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cx0810"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cx0810"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cx0810"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cx0810"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cx0810"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cx0810"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cx0810"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cx0810"
        },
        "content": "import seedu.address.model.person.Order;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cx0810"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cx0810"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cx0810"
        },
        "content": " * Jackson-friendly version of {@link Order}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cx0810"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cx0810"
        },
        "content": "class JsonAdaptedOrder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cx0810"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Order\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private final int orderId;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private final int clientId;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cx0810"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private final String deliveryDateTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private final String creationDateTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private final boolean isDone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cx0810"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cx0810"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cx0810"
        },
        "content": "     * Constructs a {@code JsonAdaptedOrder} with the given order details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cx0810"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cx0810"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public JsonAdaptedOrder(@JsonProperty(\"orderId\") int orderId, @JsonProperty(\"clientId\") int clientId,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                            @JsonProperty(\"description\") String description, @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                            @JsonProperty(\"deliveryDateTime\") String deliveryDateTime,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                            @JsonProperty(\"creationDateTime\") String creationDateTime,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                            @JsonProperty(\"isDone\") boolean isDone) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        this.orderId \u003d orderId;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        this.clientId \u003d clientId;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cx0810"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        this.deliveryDateTime \u003d deliveryDateTime;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        this.creationDateTime \u003d creationDateTime;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cx0810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cx0810"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cx0810"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cx0810"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cx0810"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cx0810"
        },
        "content": "    public JsonAdaptedOrder(Order source) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        this.orderId \u003d source.getOrderId().getZeroBased();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        this.clientId \u003d source.getClientId().getZeroBased();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        this.description \u003d source.getDescription();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        this.address \u003d source.getAddress().toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        this.deliveryDateTime \u003d source.getDeliveryDateTime().toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        this.creationDateTime \u003d source.getCreationDateTime().toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        this.isDone \u003d source.isDone();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cx0810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cx0810"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cx0810"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cx0810"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cx0810"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cx0810"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cx0810"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cx0810"
        },
        "content": "    public Order toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        // Field declarations"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        final Index modelOrderId;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        final Index modelClientId;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        final Address modelAddress;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        final LocalDateTime modelDeliveryDateTime;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        final LocalDateTime modelCreationDateTime;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        // Safety checks and value assignment"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        if (orderId \u003c\u003d 0) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            throw new IllegalValueException(\"Invalid value for order ID!\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        modelOrderId \u003d Index.fromZeroBased(orderId);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        if (clientId \u003c\u003d 0) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            throw new IllegalValueException(\"Invalid value for client ID!\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        modelClientId \u003d Index.fromZeroBased(clientId);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cx0810"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cx0810"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, String.class.getSimpleName()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cx0810"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cx0810"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cx0810"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        if (deliveryDateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                    LocalDateTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cx0810"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        modelDeliveryDateTime \u003d LocalDateTime.parse(deliveryDateTime);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cx0810"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        if (creationDateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                    LocalDateTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        modelCreationDateTime \u003d LocalDateTime.parse(creationDateTime);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cx0810"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        return new Order(modelOrderId,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                         modelClientId,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                         description,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                         modelAddress,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                         modelDeliveryDateTime,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                         modelCreationDateTime,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                         isDone);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cx0810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cx0810"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cx0810"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 69,
      "cx0810": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import seedu.address.model.person.Client;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cx0810"
        },
        "content": "import seedu.address.model.person.Order;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cx0810"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ORDER \u003d \"Orders list contain duplicate order(s).\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private final List\u003cJsonAdaptedClient\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cx0810"
        },
        "content": "    private final List\u003cJsonAdaptedOrder\u003e orders \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedClient\u003e persons,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                                       @JsonProperty(\"orders\") List\u003cJsonAdaptedOrder\u003e orders) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cx0810"
        },
        "content": "        this.orders.addAll(orders);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        persons.addAll(source.getPersonList().stream().map(JsonAdaptedClient::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cx0810"
        },
        "content": "        orders.addAll(source.getOrderList().stream().map(JsonAdaptedOrder::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        for (JsonAdaptedClient jsonAdaptedClient : persons) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            Client client \u003d jsonAdaptedClient.toModelType();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            if (addressBook.hasClient(client)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            addressBook.addClient(client);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cx0810"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cx0810"
        },
        "content": "        for (JsonAdaptedOrder jsonAdaptedOrder : orders) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cx0810"
        },
        "content": "            Order order \u003d jsonAdaptedOrder.toModelType();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cx0810"
        },
        "content": "            if (addressBook.hasOrder(order)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cx0810"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ORDER);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cx0810"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cx0810"
        },
        "content": "            addressBook.addOrder(order);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cx0810"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cx0810"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 9,
      "-": 52,
      "cx0810": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ErrorWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "public class ErrorWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://se-education.org/addressbook-level3/UserGuide.html\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private static final String FXML \u003d \"ErrorWindow.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private Button okButton;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private Label errorMessage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public ErrorWindow(Stage root) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        errorMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public ErrorWindow() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public void setErrorText(String message) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        errorMessage.setText(message);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private void closeWindow() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        this.hide();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 98
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private static final String FXML \u003d \"NewMainWindow.fxml\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cx0810"
        },
        "content": "    private static MainWindow mainWindow \u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private OrderListPanel orderListPanel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private ErrorWindow errorWindow;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private NewClientForm newClientForm;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private NewOrderForm newOrderForm;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    // Stores the state of the view"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private Page currentPage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private Button helpMenuButton;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private HBox resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private HBox statusbarPlaceholder;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private Label listTitle;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private VBox extraInfoPlaceholder;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cx0810"
        },
        "content": "    private MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        errorWindow \u003d new ErrorWindow();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        newClientForm \u003d new NewClientForm(this);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        newOrderForm \u003d new NewOrderForm(this);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        currentPage \u003d Page.CLIENTS;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cx0810"
        },
        "content": "    public static MainWindow setInstance(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cx0810"
        },
        "content": "        mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cx0810"
        },
        "content": "        return mainWindow;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cx0810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cx0810"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cx0810"
        },
        "content": "    public static MainWindow getInstance() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cx0810"
        },
        "content": "        assert mainWindow !\u003d null;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cx0810"
        },
        "content": "        return mainWindow;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        setButtonAccelerator(helpMenuButton, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private void setButtonAccelerator(Button button, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        assert(button !\u003d null);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        Scene scene \u003d button.getScene();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        assert(scene !\u003d null);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        scene.getAccelerators().put(keyCombination,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                new Runnable() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                    @FXML"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                    public void run() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        button.fire();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                });"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        // basically this is to allow for kb shortcuts"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        orderListPanel \u003d new OrderListPanel(logic.getFilteredOrderList());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        // AnchorPane.setLeftAnchor(resultDisplay.getRoot(), 10.0);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        resultDisplayPlaceholder.setAlignment(Pos.CENTER_LEFT);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        // AnchorPane.setRightAnchor(statusBarFooter.getRoot(), 10.0);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        statusbarPlaceholder.setAlignment(Pos.CENTER_RIGHT);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     * Changes the view to display the list of Clients."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public void handleClients() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        if (currentPage !\u003d Page.CLIENTS) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            // Only execute if clients are not already displayed"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            currentPage \u003d Page.CLIENTS;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            listTitle.setText(\" Clients\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            personListPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            listTitle.setText(\" Clients\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            personListPanel \u003d new PersonListPanel(logic.getUnfilteredPersonList());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            personListPanelPlaceholder.getChildren().removeAll();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     * Changes the view to display the list of Orders."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public void handleOrders() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        if (currentPage !\u003d Page.ORDERS) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "cx0810"
        },
        "content": "            // Only execute if orders are not already displayed"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            currentPage \u003d Page.ORDERS;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            listTitle.setText(\" Orders\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            orderListPanel \u003d new OrderListPanel(logic.getFilteredOrderList());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            personListPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            personListPanelPlaceholder.getChildren().add(orderListPanel.getRoot());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            listTitle.setText(\" Orders\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            orderListPanel \u003d new OrderListPanel(logic.getUnfilteredOrderList());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            personListPanelPlaceholder.getChildren().removeAll();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            personListPanelPlaceholder.getChildren().add(orderListPanel.getRoot());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private void handleError() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        if (!errorWindow.isShowing()) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            errorWindow.show();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            errorWindow.focus();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private void handleAdd() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        if (currentPage \u003d\u003d Page.CLIENTS) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            System.out.println(\"kak\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            extraInfoPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            extraInfoPlaceholder.getChildren().add(newClientForm.getRoot());"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        } else if (currentPage \u003d\u003d Page.ORDERS) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            System.out.println(\"kek\");"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            extraInfoPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            extraInfoPlaceholder.getChildren().add(newOrderForm.getRoot());"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            extraInfoPlaceholder.getChildren().removeAll();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            // TODO: set a popup message that can be easily closed by pressing enter"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            resultDisplay.setFeedbackToUser(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            errorWindow.setErrorText(e.getMessage());"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            this.handleError();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    enum Page {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        CLIENTS, ORDERS;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 112,
      "-": 192,
      "cx0810": 11,
      "Syasyazman": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/NewClientForm.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.CLIENT_PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.CLIENT_PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.CLIENT_PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.CLIENT_PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "public class NewClientForm extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private static final String FXML \u003d \"NewClientForm.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    // copied over from email"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private final MainWindow mainWindow;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private TextField nameField;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private TextField phoneField;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private TextField addressField;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private TextField emailField;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private Label nameErrorDisplay;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private Label phoneErrorDisplay;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private Label addressErrorDisplay;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private Label emailErrorDisplay;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     * Creates a {@code NewClientForm}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public NewClientForm(MainWindow mainWindow) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        this.mainWindow \u003d mainWindow;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    // main issue here is getting mainwindow to display the result properly"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    // thankfully cyclic dependencies are allowed"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private void submitForm() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            validateInput();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            String commandString \u003d \"client \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                    + CLIENT_PREFIX_NAME + \" \" + nameField.getText() + \" \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                    + CLIENT_PREFIX_PHONE + \" \" + phoneField.getText() + \" \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                    + CLIENT_PREFIX_ADDRESS + \" \" + addressField.getText() + \" \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                    + CLIENT_PREFIX_EMAIL + \" \" + emailField.getText();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            mainWindow.executeCommand(commandString);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            resetForm();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        } catch (ValidationException | ParseException | CommandException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            // The behaviour for validationException is already handled properly in validateInput"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            // ParseException and CommandException should not occur unless the command format changes,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            // which is highly unlikely."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            // Therefore this is left blank intentionally."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private void resetForm() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        nameField.clear();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        phoneField.clear();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        addressField.clear();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        emailField.clear();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private void validateInput() throws ValidationException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        boolean isInputValid \u003d true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        if (nameField.getText() \u003d\u003d null || nameField.getText().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            isInputValid \u003d false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            nameErrorDisplay.setText(\"Name cannot be blank!\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            nameErrorDisplay.setText(\"\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        if (phoneField.getText() \u003d\u003d null || phoneField.getText().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            isInputValid \u003d false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            phoneErrorDisplay.setText(\"Phone cannot be blank!\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        } else if (!phoneField.getText().matches(\"\\\\d{3,}\")) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            isInputValid \u003d false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            phoneErrorDisplay.setText(\"Phone number is invalid!\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            phoneErrorDisplay.setText(\"\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        if (addressField.getText() \u003d\u003d null || addressField.getText().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            isInputValid \u003d false;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            addressErrorDisplay.setText(\"Address cannot be blank!\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            addressErrorDisplay.setText(\"\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        if (emailField.getText() \u003d\u003d null || emailField.getText().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            isInputValid \u003d false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            emailErrorDisplay.setText(\"Email cannot be blank!\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        } else if (emailField.getText().matches(VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            isInputValid \u003d false;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            emailErrorDisplay.setText(\"Email provided is not of a valid format!\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            emailErrorDisplay.setText(\"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        if (!isInputValid) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            throw new ValidationException(\"Invalid input!\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    static class ValidationException extends Exception {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        ValidationException(String message) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            super(message);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 138
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/NewOrderForm.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.ORDER_PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.ORDER_PREFIX_CLIENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.ORDER_PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.ORDER_PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "public class NewOrderForm extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private static final String FXML \u003d \"NewOrderForm.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private final MainWindow mainWindow;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private TextField descriptionField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private TextField clientField;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private TextField addressField;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private TextField dateField;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private Label descriptionErrorDisplay;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private Label clientErrorDisplay;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private Label addressErrorDisplay;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private Label dateErrorDisplay;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     * Creates a {@code NewClientForm}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public NewOrderForm(MainWindow mainWindow) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        this.mainWindow \u003d mainWindow;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    // main issue here is getting mainwindow to display the result properly"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    // thankfully cyclic dependencies are allowed"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private void submitForm() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            validateInput();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            String commandString \u003d \"order \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                    + ORDER_PREFIX_DESCRIPTION + \" \" + descriptionField.getText() + \" \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                    + ORDER_PREFIX_CLIENT + \" \" + clientField.getText() + \" \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                    + ORDER_PREFIX_ADDRESS + \" \" + addressField.getText() + \" \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                    + ORDER_PREFIX_DATE + \" \" + dateField.getText();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            mainWindow.executeCommand(commandString);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            resetForm();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        } catch (ValidationException | ParseException | CommandException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            // The behaviour for validationException is already handled properly in validateInput"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            // ParseException and CommandException should not occur unless the command format changes,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            // which is highly unlikely."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            // Therefore this is left blank intentionally."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private void resetForm() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        descriptionField.clear();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        clientField.clear();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        addressField.clear();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        dateField.clear();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private void validateInput() throws ValidationException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        boolean isInputValid \u003d true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        if (descriptionField.getText() \u003d\u003d null || descriptionField.getText().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            isInputValid \u003d false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            descriptionErrorDisplay.setText(\"Description cannot be blank!\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            descriptionErrorDisplay.setText(\"\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        if (clientField.getText() \u003d\u003d null || dateField.getText().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            isInputValid \u003d false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            clientErrorDisplay.setText(\"Client ID cannot be blank!\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        } else if (!clientField.getText().matches(\"\\\\d{5}\")) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            // this should mean \"repeat digit 5 times\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            isInputValid \u003d false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            clientErrorDisplay.setText(\"Enter a valid 5-digit client ID!\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            clientErrorDisplay.setText(\"\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        if (addressField.getText() \u003d\u003d null || dateField.getText().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            isInputValid \u003d false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            addressErrorDisplay.setText(\"Address cannot be blank!\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            addressErrorDisplay.setText(\"\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        if (dateField.getText() \u003d\u003d null || dateField.getText().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            isInputValid \u003d false;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            dateErrorDisplay.setText(\"Date cannot be blank!\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            dateErrorDisplay.setText(\"\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        if (!isInputValid) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            throw new ValidationException(\"Invalid input!\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    static class ValidationException extends Exception {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        ValidationException(String message) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            super(message);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 128
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/OrderCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.DEFAULT_DATE_TIME_FORMATTER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import seedu.address.model.person.Order;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": " * An UI component that displays information of a {@code Order}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "public class OrderCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private static final String FXML \u003d \"OrderListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public final Order order;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private Label orderId;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private Label clientId;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     * Creates a {@code OrderCode} with the given {@code Order} and index to display."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public OrderCard(Order order, int displayedIndex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        this.order \u003d order;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        orderId.setText(\"Order #\" + String.format(\"%05d\", order.getOrderId().getZeroBased()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        description.setText(order.getDescription());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        clientId.setText(\"Deliver to Client #\" + String.format(\"%05d\", order.getClientId().getZeroBased()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        date.setText(\"Delivery date: \" + order.getDeliveryDateTime().format(DEFAULT_DATE_TIME_FORMATTER));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        if (!(other instanceof OrderCard)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        OrderCard card \u003d (OrderCard) other;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                \u0026\u0026 order.equals(card.order);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/OrderListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import seedu.address.model.person.Order;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": " * Panel containing the list of orders."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "public class OrderListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(OrderListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private ListView\u003cOrder\u003e personListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     * Creates a {@code PersonListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public OrderListPanel(ObservableList\u003cOrder\u003e orderList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        personListView.setItems(orderList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new OrderListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    class OrderListViewCell extends ListCell\u003cOrder\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        protected void updateItem(Order order, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            super.updateItem(order, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            if (empty || order \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                setGraphic(new OrderCard(order, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import seedu.address.model.person.Client;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public final Client client;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonCode} with the given {@code Person} and index to display."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public PersonCard(Client client, int displayedIndex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        this.client \u003d client;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        name.setText(client.getName().fullName + \" [ID#\" + String.format(\"%05d\", client.getClientId()) + \"]\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        phone.setText(client.getPhone().value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        address.setText(client.getAddress().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        email.setText(client.getEmail().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                \u0026\u0026 client.equals(card.client);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 9,
      "-": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import seedu.address.model.person.Client;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private ListView\u003cClient\u003e personListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public PersonListPanel(ObservableList\u003cClient\u003e clientList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        personListView.setItems(clientList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cClient\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        protected void updateItem(Client client, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            super.updateItem(client, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            if (empty || client \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                setGraphic(new PersonCard(client, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 9,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ResultDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private Label resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 2,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cx0810"
        },
        "content": "            mainWindow \u003d MainWindow.setInstance(primaryStage, this.logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 88,
      "cx0810": 1
    }
  },
  {
    "path": "src/main/resources/view/ErrorWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Error\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            \u003cVBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                    \u003cLabel fx:id\u003d\"errorMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                            \u003cInsets top\u003d\"10.0\" bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                    \u003cButton fx:id\u003d\"okButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#closeWindow\" text\u003d\"OK\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                            \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                    \u003c/Button\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 33
    }
  },
  {
    "path": "src/main/resources/view/LightTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ".root {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -color-menu: #E0E0E0;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -color-list: #EEEEEE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "/* Scroll bar */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-background-color: -color-list;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-background-color: derive(-color-list, -20%);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "/* Split pane divider */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ".split-pane:horizontal \u003e .split-pane-divider {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-border-color:  transparent;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ".split-pane:vertical \u003e .split-pane-divider {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-border-color:  transparent;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-padding: 0 0 0 0"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "/* Pane coloring styles */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ".menupane {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-background-color: -color-menu;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-border-color: -color-menu;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ".menupane .vbox {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-background-color: -color-menu;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-border-color: -color-menu;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ".listpane {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-background-color: -color-list;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-border-color: -color-list;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "/* Lists */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-background-color: -color-list;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-background-color: -color-list;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-background-color: derive(-color-list, 20%);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-background-color: derive(-color-list, -10%);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "/* For commandbox */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ".command-box-holder {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-padding: 0 0 0 0"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "/* for result display */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ".result-display-wrapper {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-stroke-width: 1;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ".result-display-wrapper .text-area, .text-area .viewport, .text-area .content {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "/*"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": " */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-border-color: transparent;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-text-fill: #888888;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-background-color: derive(-color-menu, 30%);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "  -fx-background-color: derive(-color-menu, 50%);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-background-color: derive(-color-menu, 50%);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "/* PersonListCard */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ".cell-big-label {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ".cell-small-label {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 195
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "         title\u003d\"Address App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        \u003cVBox fx:id\u003d\"clientList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/resources/view/NewClientForm.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003cHBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "      \u003cGridPane minHeight\u003d\"400.0\" minWidth\u003d\"200.0\" prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"NEVER\" maxWidth\u003d\"194.39996337890625\" minWidth\u003d\"0.0\" prefWidth\u003d\"22.399993896484375\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"ALWAYS\" minWidth\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"NEVER\" maxWidth\u003d\"99.20001220703125\" minWidth\u003d\"10.0\" prefWidth\u003d\"20.800048828125\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "          \u003cRowConstraints maxHeight\u003d\"-Infinity\" minHeight\u003d\"10.0\" prefHeight\u003d\"10.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            \u003cRowConstraints maxHeight\u003d\"-Infinity\" minHeight\u003d\"10.0\" prefHeight\u003d\"10.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            \u003cRowConstraints maxHeight\u003d\"-Infinity\" minHeight\u003d\"10.0\" prefHeight\u003d\"10.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            \u003cRowConstraints maxHeight\u003d\"-Infinity\" minHeight\u003d\"10.0\" prefHeight\u003d\"10.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            \u003cLabel text\u003d\"Create a new client\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                  \u003cFont size\u003d\"27.0\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            \u003cVBox GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                  \u003cHBox alignment\u003d\"BOTTOM_LEFT\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        \u003cInsets bottom\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                     \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        \u003cLabel text\u003d\"Name\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                              \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                           \u003c/font\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                           \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                              \u003cInsets /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                           \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        \u003cLabel fx:id\u003d\"nameErrorDisplay\" textFill\u003d\"#ff4242\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                           \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                              \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                           \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                  \u003cTextField fx:id\u003d\"nameField\" promptText\u003d\"Enter the client\u0027s name here\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            \u003cVBox layoutX\u003d\"35.0\" layoutY\u003d\"88.0\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"3\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                  \u003cHBox alignment\u003d\"BOTTOM_LEFT\"\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        \u003cInsets bottom\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                     \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        \u003cLabel text\u003d\"Phone\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                              \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                           \u003c/font\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        \u003cLabel fx:id\u003d\"phoneErrorDisplay\" textFill\u003d\"#ff4242\"\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                           \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                              \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                           \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                  \u003cTextField fx:id\u003d\"phoneField\" promptText\u003d\"Enter the client\u0027s phone number here\" /\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            \u003cVBox layoutX\u003d\"35.0\" layoutY\u003d\"177.0\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                  \u003cHBox alignment\u003d\"BOTTOM_LEFT\"\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        \u003cInsets bottom\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                     \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        \u003cLabel text\u003d\"Address\"\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                              \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                           \u003c/font\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                           \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                              \u003cInsets /\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                           \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        \u003cLabel fx:id\u003d\"addressErrorDisplay\" textFill\u003d\"#ff4242\"\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                           \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                              \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                           \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                  \u003cTextField fx:id\u003d\"addressField\" promptText\u003d\"Enter the client\u0027s physical address here\" /\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            \u003cVBox layoutX\u003d\"35.0\" layoutY\u003d\"260.0\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"7\"\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                  \u003cHBox alignment\u003d\"BOTTOM_LEFT\"\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        \u003cInsets bottom\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                     \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        \u003cLabel text\u003d\"Email\"\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                              \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                           \u003c/font\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        \u003cLabel fx:id\u003d\"emailErrorDisplay\" textFill\u003d\"#ff4242\"\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                           \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                              \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                           \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                  \u003cTextField fx:id\u003d\"emailField\" promptText\u003d\"Enter the client\u0027s email address here\" /\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            \u003cHBox prefHeight\u003d\"100.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"9\"\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                \u003cButton minWidth\u003d\"80.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#submitForm\" prefWidth\u003d\"160.0\" text\u003d\"Create\"\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        \u003cFont size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                     \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        \u003cInsets right\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                     \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                  \u003c/Button\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                  \u003cButton minWidth\u003d\"50.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#resetForm\" prefWidth\u003d\"160.0\" text\u003d\"Clear\"\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        \u003cFont size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                     \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        \u003cInsets /\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                     \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                  \u003c/Button\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 157
    }
  },
  {
    "path": "src/main/resources/view/NewMainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003c?import javafx.scene.control.ButtonBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003cfx:root minHeight\u003d\"576\" minWidth\u003d\"865\" onCloseRequest\u003d\"#handleExit\" title\u003d\"LogOnce\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "   \u003cscene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "      \u003cScene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "         \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "             \u003cURL value\u003d\"@LightTheme.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "             \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "         \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "         \u003croot\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            \u003cGridPane prefHeight\u003d\"576.0\" prefWidth\u003d\"865.0\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "              \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "              \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "              \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                \u003cRowConstraints maxHeight\u003d\"-Infinity\" minHeight\u003d\"38.0\" prefHeight\u003d\"38.0\" vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                \u003cRowConstraints maxHeight\u003d\"-Infinity\" minHeight\u003d\"30.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "              \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                  \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                     \u003cpadding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        \u003cInsets left\u003d\"5.0\" right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                     \u003c/padding\u003e\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                  \u003cGridPane GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                     \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"-Infinity\" minWidth\u003d\"150.0\" prefWidth\u003d\"150.0\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                     \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                     \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        \u003cRowConstraints minHeight\u003d\"10.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                     \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                      \u003cAnchorPane styleClass\u003d\"menupane\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                              \u003cVBox layoutY\u003d\"68.0\" styleClass\u003d\"menupane\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                                 \u003cchildren\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                                    \u003cButton mnemonicParsing\u003d\"false\" onAction\u003d\"#handleClients\" prefHeight\u003d\"74.0\" prefWidth\u003d\"148.0\" styleClass\u003d\"button\" text\u003d\"Clients\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                                    \u003cButton mnemonicParsing\u003d\"false\" onAction\u003d\"#handleOrders\" prefHeight\u003d\"74.0\" prefWidth\u003d\"148.0\" styleClass\u003d\"button\" text\u003d\"Orders\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                                    \u003cButton fx:id\u003d\"helpMenuButton\" layoutX\u003d\"11.0\" layoutY\u003d\"85.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" prefHeight\u003d\"74.0\" prefWidth\u003d\"148.0\" styleClass\u003d\"button\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                                    \u003cButton layoutX\u003d\"11.0\" layoutY\u003d\"160.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" prefHeight\u003d\"74.0\" prefWidth\u003d\"148.0\" styleClass\u003d\"button\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                                 \u003c/children\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                              \u003c/VBox\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        \u003cSplitPane dividerPositions\u003d\"0.5\" prefHeight\u003d\"576.0\" prefWidth\u003d\"865.0\" stylesheets\u003d\"@LightTheme.css\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                          \u003citems\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                              \u003cVBox prefHeight\u003d\"506.0\" prefWidth\u003d\"266.0\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                                 \u003cchildren\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                                    \u003cLabel fx:id\u003d\"listTitle\" prefHeight\u003d\"70.0\" prefWidth\u003d\"250.0\" text\u003d\" Clients\" textFill\u003d\"#7f7f7f\"\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                                       \u003cfont\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                                          \u003cFont size\u003d\"36.0\" /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                                       \u003c/font\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                                    \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" prefHeight\u003d\"435.0\" prefWidth\u003d\"246.0\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                                    \u003cButtonBar buttonOrder\u003d\"\" nodeOrientation\u003d\"RIGHT_TO_LEFT\" prefHeight\u003d\"40.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                                      \u003cbuttons\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                                        \u003cButton onAction\u003d\"#handleAdd\" mnemonicParsing\u003d\"false\" nodeOrientation\u003d\"LEFT_TO_RIGHT\" text\u003d\"+\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                                      \u003c/buttons\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                                    \u003c/ButtonBar\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                                 \u003c/children\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                              \u003c/VBox\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                              \u003cVBox fx:id\u003d\"extraInfoPlaceholder\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                          \u003c/items\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                  \u003cGridPane GridPane.rowIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"1.7976931348623157E308\" minWidth\u003d\"10.0\" prefWidth\u003d\"600.0\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                    \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                      \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                    \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        \u003cHBox fx:id\u003d\"resultDisplayPlaceholder\" prefWidth\u003d\"574.0\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        \u003cHBox fx:id\u003d\"statusbarPlaceholder\" GridPane.columnIndex\u003d\"1\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "         \u003c/root\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "      \u003c/Scene\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "   \u003c/scene\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 103
    }
  },
  {
    "path": "src/main/resources/view/NewOrderForm.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003cHBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "      \u003cGridPane minHeight\u003d\"400.0\" minWidth\u003d\"200.0\" prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "         \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"NEVER\" maxWidth\u003d\"194.39996337890625\" minWidth\u003d\"0.0\" prefWidth\u003d\"22.399993896484375\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"ALWAYS\" minWidth\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"NEVER\" maxWidth\u003d\"99.20001220703125\" minWidth\u003d\"10.0\" prefWidth\u003d\"20.800048828125\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "         \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "         \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            \u003cRowConstraints maxHeight\u003d\"-Infinity\" minHeight\u003d\"10.0\" prefHeight\u003d\"10.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            \u003cRowConstraints maxHeight\u003d\"-Infinity\" minHeight\u003d\"10.0\" prefHeight\u003d\"10.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            \u003cRowConstraints maxHeight\u003d\"-Infinity\" minHeight\u003d\"10.0\" prefHeight\u003d\"10.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            \u003cRowConstraints maxHeight\u003d\"-Infinity\" minHeight\u003d\"10.0\" prefHeight\u003d\"10.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "         \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            \u003cLabel text\u003d\"Create a new order\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                  \u003cFont size\u003d\"27.0\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            \u003cVBox GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                  \u003cHBox alignment\u003d\"BOTTOM_LEFT\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        \u003cInsets bottom\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                     \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        \u003cLabel text\u003d\"Description\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                              \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                           \u003c/font\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                           \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                              \u003cInsets /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                           \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        \u003cLabel fx:id\u003d\"descriptionErrorDisplay\" textFill\u003d\"#ff4242\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                           \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                              \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                           \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                  \u003cTextField fx:id\u003d\"descriptionField\" promptText\u003d\"Enter a short summary of the order here\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            \u003cVBox layoutX\u003d\"35.0\" layoutY\u003d\"88.0\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"3\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                  \u003cHBox alignment\u003d\"BOTTOM_LEFT\"\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        \u003cInsets bottom\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                     \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        \u003cLabel text\u003d\"Client ID\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                              \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                           \u003c/font\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        \u003cLabel fx:id\u003d\"clientErrorDisplay\" textFill\u003d\"#ff4242\"\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                           \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                              \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                           \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                  \u003cTextField fx:id\u003d\"clientField\" promptText\u003d\"Enter the unique ID of the client here\" /\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            \u003cVBox layoutX\u003d\"35.0\" layoutY\u003d\"177.0\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                  \u003cHBox alignment\u003d\"BOTTOM_LEFT\"\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        \u003cInsets bottom\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                     \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        \u003cLabel text\u003d\"Delivery address\"\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                              \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                           \u003c/font\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                           \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                              \u003cInsets /\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                           \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        \u003cLabel fx:id\u003d\"addressErrorDisplay\" textFill\u003d\"#ff4242\"\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                           \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                              \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                           \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                  \u003cTextField fx:id\u003d\"addressField\" promptText\u003d\"Enter the delivery address here\" /\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            \u003cVBox layoutX\u003d\"35.0\" layoutY\u003d\"260.0\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"7\"\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                  \u003cHBox alignment\u003d\"BOTTOM_LEFT\"\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        \u003cInsets bottom\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                     \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        \u003cLabel text\u003d\"Delivery date\"\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                              \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                           \u003c/font\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        \u003cLabel fx:id\u003d\"dateErrorDisplay\" textFill\u003d\"#ff4242\"\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                           \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                              \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                           \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                  \u003cTextField fx:id\u003d\"dateField\" promptText\u003d\"Enter the date of delivery here\" /\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            \u003cHBox prefHeight\u003d\"100.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"9\"\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                  \u003cButton minWidth\u003d\"80.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#submitForm\" prefWidth\u003d\"160.0\" text\u003d\"Create\"\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        \u003cFont size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                     \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        \u003cInsets right\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                     \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                  \u003c/Button\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                  \u003cButton minWidth\u003d\"50.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#resetForm\" prefWidth\u003d\"160.0\" text\u003d\"Clear\"\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        \u003cFont size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                     \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        \u003cInsets /\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                     \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                  \u003c/Button\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 157
    }
  },
  {
    "path": "src/main/resources/view/OrderListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                \u003cLabel fx:id\u003d\"orderId\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            \u003cLabel fx:id\u003d\"clientId\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$clientId\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$clientId\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 34,
      "Syasyazman": 2
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"result-display-wrapper\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "           xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "  \u003cLabel fx:id\u003d\"resultDisplay\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 3,
      "-": 6
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/duplicatePersonAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    \"name\" : \"kappa\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    \"phone\" : \"12345678\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    \"email\" : \"a@b.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    \"address\" : \"chuu\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    \"clientId\" : \"1\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  } , {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    \"name\" : \"kappa\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    \"phone\" : \"12345678\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    \"email\" : \"a@b.com\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    \"address\" : \"chuu\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    \"clientId\" : \"1\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "  }],"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "  \"orders\" : []"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 12,
      "-": 4
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/invalidPersonAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    \"name\" : \"\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    \"phone\" : \"12345678\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    \"email\" : \"a@b.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    \"address\" : \"chuu\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    \"clientId\" : \"1\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "  \"orders\" : []"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 7,
      "-": 3
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/typicalPersonsAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    \"name\" : \"kappa\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    \"phone\" : \"12345678\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    \"email\" : \"a@b.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    \"address\" : \"chuu\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    \"clientId\" : \"1\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "  \"orders\" : [ {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    \"id\" : \"100\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    \"description\" : \"test\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 9,
      "-": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import seedu.address.model.person.Client;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        String deleteCommand \u003d \"delete-client --client 9\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cx0810"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cx0810"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        Client expectedClient \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        expectedModel.addPerson(expectedClient);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cx0810"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cx0810"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cx0810"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cx0810"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cx0810"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 3,
      "-": 155,
      "cx0810": 7,
      "Syasyazman": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import seedu.address.model.person.Client;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        Client validClient \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        expectedModel.addPerson(validClient);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        assertCommandSuccess(new AddCommand(validClient), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validClient), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        Client clientInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        assertCommandFailure(new AddCommand(clientInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 7,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import seedu.address.model.person.Client;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import seedu.address.model.person.Order;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        Client validClient \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validClient).execute(modelStub);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validClient), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        assertEquals(Arrays.asList(validClient), modelStub.personsAdded);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        Client validClient \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validClient);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validClient);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        Client alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        Client bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        public void addPerson(Client client) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        public boolean hasPerson(Client client) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        public void deletePerson(Client target) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        public void setPerson(Client target, Client editedClient) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        public ObservableList\u003cClient\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cClient\u003e predicate) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        public ObservableList\u003cClient\u003e getUnfilteredPersonList() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        public void addOrder(Order order) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        public boolean hasOrder(Order order) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        public void deleteOrder(Order target) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        public void setOrder(Order target, Order editedOrder) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        public ObservableList\u003cOrder\u003e getFilteredOrderList() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        public void updateFilteredOrderList(Predicate\u003cOrder\u003e predicate) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        public ObservableList\u003cOrder\u003e getUnfilteredOrderList() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        private final Client client;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        ModelStubWithPerson(Client client) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            requireNonNull(client);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            this.client \u003d client;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        public boolean hasPerson(Client client) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            requireNonNull(client);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            return this.client.isSamePerson(client);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        final ArrayList\u003cClient\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        public boolean hasPerson(Client client) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            requireNonNull(client);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            return personsAdded.stream().anyMatch(client::isSamePerson);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        public void addPerson(Client client) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            requireNonNull(client);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            personsAdded.add(client);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 30,
      "-": 166,
      "Syasyazman": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import seedu.address.model.person.Client;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import seedu.address.model.person.Order;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import seedu.address.model.person.OrderIdContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        List\u003cClient\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        Client client \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        final String[] splitName \u003d client.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the order at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     * {@code model}\u0027s order book."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public static void showOrderAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredOrderList().size());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        Order order \u003d model.getFilteredOrderList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        final Index id \u003d order.getOrderId();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        model.updateFilteredOrderList(new OrderIdContainsKeywordsPredicate(id));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        assertEquals(1, model.getFilteredOrderList().size());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 6,
      "-": 122,
      "Syasyazman": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteClientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CLIENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import seedu.address.model.person.Client;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": " * {@code DeleteClientCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "public class DeleteClientCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        Client clientToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        DeleteClientCommand deleteClientCommand \u003d new DeleteClientCommand(INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteClientCommand.MESSAGE_DELETE_CLIENT_SUCCESS, clientToDelete);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        expectedModel.deletePerson(clientToDelete);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        assertCommandSuccess(deleteClientCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        DeleteClientCommand deleteClientCommand \u003d new DeleteClientCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        assertCommandFailure(deleteClientCommand, model, Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        Client clientToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        DeleteClientCommand deleteClientCommand \u003d new DeleteClientCommand(INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteClientCommand.MESSAGE_DELETE_CLIENT_SUCCESS, clientToDelete);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        expectedModel.deletePerson(clientToDelete);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        assertCommandSuccess(deleteClientCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_CLIENT;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        DeleteClientCommand deleteClientCommand \u003d new DeleteClientCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        assertCommandFailure(deleteClientCommand, model, Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        DeleteClientCommand deleteFirstCommand \u003d new DeleteClientCommand(INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        DeleteClientCommand deleteSecondCommand \u003d new DeleteClientCommand(INDEX_SECOND_CLIENT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        DeleteClientCommand deleteFirstCommandCopy \u003d new DeleteClientCommand(INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no client."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 82,
      "Syasyazman": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteOrderCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showOrderAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ORDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ORDER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import seedu.address.model.person.Order;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": " * {@code DeleteOrderCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "public class DeleteOrderCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        Order orderToDelete \u003d model.getFilteredOrderList().get(INDEX_FIRST_ORDER.getZeroBased());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        DeleteOrderCommand deleteOrderCommand \u003d new DeleteOrderCommand(INDEX_FIRST_ORDER);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteOrderCommand.MESSAGE_DELETE_ORDER_SUCCESS, orderToDelete);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        expectedModel.deleteOrder(orderToDelete);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        assertCommandSuccess(deleteOrderCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredOrderList().size() + 1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        DeleteOrderCommand deleteOrderCommand \u003d new DeleteOrderCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        assertCommandFailure(deleteOrderCommand, model, Messages.MESSAGE_INVALID_ORDER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        showOrderAtIndex(model, INDEX_FIRST_ORDER);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        Order orderToDelete \u003d model.getFilteredOrderList().get(INDEX_FIRST_ORDER.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        DeleteOrderCommand deleteOrderCommand \u003d new DeleteOrderCommand(INDEX_FIRST_ORDER);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteOrderCommand.MESSAGE_DELETE_ORDER_SUCCESS, orderToDelete);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        expectedModel.deleteOrder(orderToDelete);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        showNoOrder(expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        assertCommandSuccess(deleteOrderCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        showOrderAtIndex(model, INDEX_FIRST_ORDER);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_ORDER;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getOrderList().size());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        DeleteOrderCommand deleteOrderCommand \u003d new DeleteOrderCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        assertCommandFailure(deleteOrderCommand, model, Messages.MESSAGE_INVALID_ORDER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        DeleteOrderCommand deleteFirstCommand \u003d new DeleteOrderCommand(INDEX_FIRST_ORDER);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        DeleteOrderCommand deleteSecondCommand \u003d new DeleteOrderCommand(INDEX_SECOND_ORDER);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        DeleteOrderCommand deleteFirstCommandCopy \u003d new DeleteOrderCommand(INDEX_FIRST_ORDER);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no order."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    private void showNoOrder(Model model) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        model.updateFilteredOrderList(p -\u003e false);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        assertTrue(model.getFilteredOrderList().isEmpty());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Syasyazman": 108
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditClientDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "public class EditClientDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 1,
      "-": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CLIENT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import seedu.address.model.person.Client;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        Client editedClient \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedClient).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_CLIENT, descriptor);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedClient);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedClient);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        Client lastClient \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastClient);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        Client editedClient \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedClient);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        expectedModel.setPerson(lastClient, editedClient);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_CLIENT, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        Client editedClient \u003d model.getFilteredPersonList().get(INDEX_FIRST_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedClient);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        Client clientInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        Client editedClient \u003d new PersonBuilder(clientInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_CLIENT,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedClient);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedClient);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        Client firstClient \u003d model.getFilteredPersonList().get(INDEX_FIRST_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstClient).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_CLIENT, descriptor);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        Client clientInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_CLIENT,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                new EditPersonDescriptorBuilder(clientInList).build());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_CLIENT;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_CLIENT, DESC_AMY);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_CLIENT, copyDescriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_CLIENT, DESC_AMY)));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_CLIENT, DESC_BOB)));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 17,
      "-": 135,
      "Syasyazman": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cx0810"
        },
        "content": "//package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cx0810"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cx0810"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cx0810"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cx0810"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cx0810"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cx0810"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cx0810"
        },
        "content": "//import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cx0810"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cx0810"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cx0810"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cx0810"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cx0810"
        },
        "content": "//import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cx0810"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cx0810"
        },
        "content": "///**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cx0810"
        },
        "content": "// * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cx0810"
        },
        "content": "// */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cx0810"
        },
        "content": "//public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cx0810"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cx0810"
        },
        "content": "//    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cx0810"
        },
        "content": "//    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cx0810"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cx0810"
        },
        "content": "//    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cx0810"
        },
        "content": "//    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cx0810"
        },
        "content": "//        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cx0810"
        },
        "content": "//        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cx0810"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cx0810"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cx0810"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cx0810"
        },
        "content": "//    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cx0810"
        },
        "content": "//        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cx0810"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cx0810"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cx0810"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cx0810"
        },
        "content": "//    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cx0810"
        },
        "content": "//        showPersonAtIndex(model, INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cx0810"
        },
        "content": "//        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cx0810"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cx0810"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "cx0810": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import seedu.address.model.person.Client;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        Client expectedClient \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedClient));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedClient));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedClient));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedClient));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedClient));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        Client expectedClientMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedClientMultipleTags));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        Client expectedClient \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                new AddCommand(expectedClient));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 11,
      "-": 130
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "//import seedu.address.logic.commands.DeleteClientCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import seedu.address.model.person.Client;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        Client client \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(client));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        assertEquals(new AddCommand(client), command);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    //      @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    //      public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    //          DeleteClientCommand command \u003d (DeleteClientCommand) parser.parseCommand("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    //                  DeleteClientCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CLIENT.getOneBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    //          assertEquals(new DeleteClientCommand(INDEX_FIRST_CLIENT), command);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    //      }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        Client client \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(client).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "                + INDEX_FIRST_CLIENT.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_CLIENT, descriptor), command);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "                parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 6,
      "-": 84,
      "Syasyazman": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteClientCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import seedu.address.logic.commands.DeleteClientCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": " * outside of the DeleteClientCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": " * same path through the DeleteClientCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "public class DeleteClientCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    private DeleteClientCommandParser parser \u003d new DeleteClientCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    //    public void parse_validArgs_returnsDeleteClientCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    //        assertParseSuccess(parser, \"1\", new DeleteClientCommand(INDEX_FIRST_CLIENT));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "                DeleteClientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "Syasyazman": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteOrderCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "//import seedu.address.logic.commands.DeleteOrderCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": " * outside of the DeleteOrderCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": " * same path through the DeleteOrderCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "public class DeleteOrderCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    private DeleteOrderCommandParser parser \u003d new DeleteOrderCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    //      @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    //      public void parse_validArgs_returnsDeleteOrderCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    //          assertParseSuccess(parser, \"1\", new DeleteOrderCommand(INDEX_FIRST_CLIENT));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    //      }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    //"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    //      @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    //      public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    //          assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    //                  DeleteOrderCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    //      }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 11,
      "Syasyazman": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CLIENT;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_CLIENT;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        // NOTE: Tags have been deprecated and therefore these tests are not used."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        // assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        // assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        // assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_CLIENT;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_CLIENT;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 6,
      "-": 176,
      "Syasyazman": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        assertEquals(INDEX_FIRST_CLIENT, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        assertEquals(INDEX_FIRST_CLIENT, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 193,
      "Syasyazman": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import seedu.address.model.person.Client;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import seedu.address.model.person.Order;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        Client editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        List\u003cClient\u003e newClients \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newClients);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasClient(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        assertFalse(addressBook.hasClient(ALICE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        addressBook.addClient(ALICE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        assertTrue(addressBook.hasClient(ALICE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        addressBook.addClient(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        Client editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        assertTrue(addressBook.hasClient(editedAlice));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        private final ObservableList\u003cClient\u003e clients \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        AddressBookStub(Collection\u003cClient\u003e clients) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            this.clients.setAll(clients);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        public ObservableList\u003cClient\u003e getPersonList() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            return clients;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        public ObservableList\u003cOrder\u003e getOrderList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            // not yet implemented"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 16,
      "-": 87,
      "Syasyazman": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/ClientTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "public class ClientTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    // public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    //     Client client \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    //     assertThrows(UnsupportedOperationException.class, () -\u003e client.getTags().remove(0));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        Client editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        Client aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        Client editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 9,
      "-": 81
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniqueClientListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "public class UniqueClientListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        Client editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        Client editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cClient\u003e) null));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        List\u003cClient\u003e clientList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        uniquePersonList.setPersons(clientList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        List\u003cClient\u003e listWithDuplicateClients \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicateClients));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 8,
      "-": 162
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedClientTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import static seedu.address.storage.JsonAdaptedClient.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "public class JsonAdaptedClientTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private static final String VALID_ID \u003d \"1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    private static final int[] EMPTY_ORDER_LIST \u003d new int[1];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        JsonAdaptedClient person \u003d new JsonAdaptedClient(BENSON);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        JsonAdaptedClient person \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                new JsonAdaptedClient(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_ID,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        EMPTY_ORDER_LIST);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        JsonAdaptedClient person \u003d new JsonAdaptedClient(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_ID,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                EMPTY_ORDER_LIST);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        JsonAdaptedClient person \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                new JsonAdaptedClient(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_ID,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        EMPTY_ORDER_LIST);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        JsonAdaptedClient person \u003d new JsonAdaptedClient(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_ID,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                EMPTY_ORDER_LIST);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        JsonAdaptedClient person \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                new JsonAdaptedClient(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_ID,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        EMPTY_ORDER_LIST);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        JsonAdaptedClient person \u003d new JsonAdaptedClient(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_ID,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                EMPTY_ORDER_LIST);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        JsonAdaptedClient person \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                new JsonAdaptedClient(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_ID,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                        EMPTY_ORDER_LIST);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        JsonAdaptedClient person \u003d new JsonAdaptedClient(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_ID,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "                EMPTY_ORDER_LIST);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 25,
      "-": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    //    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    //        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    //        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    //        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    //"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    //        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    //        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    //        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    //        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    //"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    //        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    //        original.addClient(HOON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    //        original.removeClient(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    //        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    //        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    //        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    //"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    //        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    //        original.addClient(IDA);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    //        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    //        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    //        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    //"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 80,
      "Syasyazman": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableAddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    // public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    //     JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    //             JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    //     AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    //     AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    //     assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    // public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    //     JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    //             JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    //     assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    //             dataFromFile::toModelType);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 15,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import seedu.address.model.person.Client;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder(AddressBook addressBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a new {@code Person} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public AddressBookBuilder withPerson(Client client) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        addressBook.addClient(client);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 3,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import seedu.address.model.person.Client;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public EditPersonDescriptorBuilder(Client client) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        descriptor.setName(client.getName());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        descriptor.setPhone(client.getPhone());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        descriptor.setEmail(client.getEmail());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        descriptor.setAddress(client.getAddress());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    // public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    //     Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    //     descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    //     return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 11,
      "-": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/OrderBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import seedu.address.model.person.Order;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": " * A utility class to help with building Order objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "public class OrderBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public static final String DEFAULT_CLIENTID \u003d \"2\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"shoes\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"2020-12-12 2359\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    private Index clientId;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    private LocalDateTime date;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     * Creates a {@code OrderBuilder} with the default details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public OrderBuilder() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            clientId \u003d ParserUtil.parseIndex(DEFAULT_CLIENTID);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            description \u003d DEFAULT_DESCRIPTION;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            date \u003d ParserUtil.parseDate(DEFAULT_DATE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     * Initializes the OrderBuilder with the data of {@code orderToCopy}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public OrderBuilder(Order orderToCopy) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        clientId \u003d orderToCopy.getClientId();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        description \u003d orderToCopy.getDescription();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        date \u003d orderToCopy.getDeliveryDateTime();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        address \u003d orderToCopy.getAddress();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     * Sets the {@code clientId} of the {@code Order} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public OrderBuilder withClientId(String clientId) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            this.clientId \u003d ParserUtil.parseIndex(clientId);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Order} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public OrderBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public OrderBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     * Sets the {@code Date} of the {@code Order} that we are building."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public OrderBuilder withDate(String date) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            this.date \u003d ParserUtil.parseDate(DEFAULT_DATE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     * Sets the {@code description} of the {@code Order} that we are building."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public OrderBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     * Creates {@code Order} using the order fields."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public Order build() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        LocalDateTime creationDateTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        return new Order(clientId, description, address, date, creationDateTime, false);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Syasyazman": 111
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import seedu.address.model.person.Client;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonBuilder} with the default details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public PersonBuilder(Client clientToCopy) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        name \u003d clientToCopy.getName();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        phone \u003d clientToCopy.getPhone();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        email \u003d clientToCopy.getEmail();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        address \u003d clientToCopy.getAddress();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public Client build() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        return new Client(name, phone, email, address);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 8,
      "-": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import seedu.address.model.person.Client;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public static String getAddCommand(Client client) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(client);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public static String getPersonDetails(Client client) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        sb.append(PREFIX_NAME + client.getName().fullName + \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        sb.append(PREFIX_PHONE + client.getPhone().value + \" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        sb.append(PREFIX_EMAIL + client.getEmail().value + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        sb.append(PREFIX_ADDRESS + client.getAddress().value + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 9,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import seedu.address.model.person.Client;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPersonList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the person in the {@code model}\u0027s person list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public static Client getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 2,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public static final Index INDEX_FIRST_CLIENT \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public static final Index INDEX_SECOND_CLIENT \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public static final Index INDEX_THIRD_CLIENT \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public static final Index INDEX_FIRST_ORDER \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public static final Index INDEX_SECOND_ORDER \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public static final Index INDEX_THIRD_ORDER \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 9,
      "Syasyazman": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalOrders.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import seedu.address.model.person.Client;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "import seedu.address.model.person.Order;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": " * A utility class containing a list of {@code Order} objects to be used in tests."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "public class TypicalOrders {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public static final Order SHOES \u003d new OrderBuilder().withDescription(\"shoes\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withClientId(\"1\").withDate(\"2020-12-12 2359\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            .withTags(\"important\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public static final Order DRESS \u003d new OrderBuilder().withDescription(\"dress\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\").withClientId(\"2\").withDate(\"2020-10-12 2359\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            .withTags(\"important\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public static final Order SKIRT \u003d new OrderBuilder().withDescription(\"skirt\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            .withAddress(\"wall street\").withClientId(\"2\").withDate(\"2020-8-12 2359\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            .withTags(\"important\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public static final Order HAT \u003d new OrderBuilder().withDescription(\"hat\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            .withAddress(\"10th street\").withClientId(\"3\").withDate(\"2020-6-12 2359\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            .withTags(\"important\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public static final Order BRACELET \u003d new OrderBuilder().withDescription(\"bracelet\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            .withAddress(\"michegan ave\").withClientId(\"4\").withDate(\"2020-4-12 2359\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            .withTags(\"important\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public static final Order HELMET \u003d new OrderBuilder().withDescription(\"helmet\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            .withAddress(\"little tokyo\").withClientId(\"5\").withDate(\"2020-2-12 2359\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            .withTags(\"important\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public static final Order GLASSES \u003d new OrderBuilder().withDescription(\"glasses\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            .withAddress(\"4th street\").withClientId(\"6\").withDate(\"2020-2-30 2359\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            .withTags(\"important\").build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public static final Client AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public static final Client BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    private TypicalOrders() {} // prevents instantiation"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        for (Order order : getTypicalOrders()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "            ab.addOrder(order);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    public static List\u003cOrder\u003e getTypicalOrders() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(SHOES, DRESS, SKIRT, HAT, BRACELET, HELMET, GLASSES));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Syasyazman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Syasyazman": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "import seedu.address.model.person.Client;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public static final Client ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public static final Client BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public static final Client CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public static final Client DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public static final Client ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public static final Client FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public static final Client GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public static final Client HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public static final Client IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public static final Client AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public static final Client BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "        for (Client client : getTypicalPersons()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "            ab.addClient(client);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "youyingfeng"
        },
        "content": "    public static List\u003cClient\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youyingfeng": 15,
      "-": 61
    }
  }
]
