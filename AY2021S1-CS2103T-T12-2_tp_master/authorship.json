[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-T12-2/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-T12-2/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": "* tCheck is a desktop application that helps bubble tea store managers manage the staffs’ contact information, store’s inventory and historical sales data. It is optimized for CLI(Command Line Interface) users to update and retrieve the information more efficiently."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": "* It is named tCheck, which is a word play on tea Check. This application is tailor-made for bubble tea shop managers, to help them on store management."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "* The project simulates an ongoing software project for a desktop application (called _AddressBook_) used for managing contact details."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  * It is **written in OOP fashion**. It provides a **reasonably well-written** code base **bigger** (around 6 KLoC) than what students usually write in beginner-level SE modules, without being overwhelmingly big."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  * It comes with a **reasonable level of user and developer documentation**."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": "* For the detailed documentation of this project, see"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    * [User Guide](docs/UserGuide.md)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    * [Developers Guide](docs/DeveloperGuide.md)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    * [About Us](docs/AboutUs.md)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "WM71811": 13,
      "-": 6
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    archiveName \u003d \u0027tCheck.jar\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WM71811"
        },
        "content": "run {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WM71811"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "WM71811": 6,
      "-": 71
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "You can reach us at the email `seer[at]comp.nus.edu.sg`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "### Tan Ying Hui"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "\u003cimg src\u003d\"images/ureshiiying.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "[[github](https://github.com/ureshiiYing)]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "[[portfolio](team/tanyinghui.md)]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "* Responsibilities: Documentation"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "### Yan BingTao"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "\u003cimg src\u003d\"images/yanbingtao.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "[[github](https://github.com/yanbingtao)]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "[[portfolio](team/yanbingtao.md)]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* Responsibilities: Integration - In charge of versioning of the code, maintaining the code repository, integrating various parts of the software to create a whole."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WM71811"
        },
        "content": "### Wang Mo"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WM71811"
        },
        "content": "\u003cimg src\u003d\"images/wm71811.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WM71811"
        },
        "content": "[[github](http://github.com/WM71811)] "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WM71811"
        },
        "content": "[[portfolio](team/wangmo.md)]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WM71811"
        },
        "content": "* Responsibilities: Code Quality"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Persdre"
        },
        "content": "### Wang Qian"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Persdre"
        },
        "content": "\u003cimg src\u003d\"images/persdre.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Persdre"
        },
        "content": "[[github](http://github.com/persdre)]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Persdre"
        },
        "content": "[[portfolio](team/wangqian.md)]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Persdre"
        },
        "content": "* Role: Developer \u0026 Code Quality Reviewer"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Persdre"
        },
        "content": "* Responsibilities: Develop \u0026 Check code quality"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "### Zhang Yi"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "\u003cimg src\u003d\"images/diwu-yi.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "[[github](https://github.com/Diwu-Yi)]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "[[portfolio](team/zhangyi.md)]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "* Role: Project Tester and Contributor"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 6,
      "Diwu-Yi": 5,
      "yanbingtao": 6,
      "WM71811": 5,
      "-": 32,
      "Persdre": 6
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the address book data."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the address book data in json format and read it back."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WM71811"
        },
        "content": "* can save the ingredient book data in json format and read it back."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "### \\[Completed\\] Recording/ Updating Sales Data"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "tCheck allows users to record and update the sales information on the drink sold. The command to use this feature is:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "`s-update A/NUM B/NUM ...` where:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "* `A`, `B`, `C` are abbreviations for the drink types."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "* `NUM` refers to the number of drinks sold."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "Currently, tCheck supports the tracking of 6 types of `Drink`s."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "* `BSBM`  : Brown Sugar Boba Milk"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "* `BSBBT` : Brown Sugar Boba Black Tea"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "* `BSBGT` : Brown Sugar Boba Green Tea"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "* `BSPM`  : Brown Sugar Pearl Milk"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "* `BSPBT` : Brown Sugar Pearl Black Tea"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "* `BSPGT` : Brown Sugar Pearl Green Tea"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "#### Completed Implementation"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    "
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "The completed mechanism to record the sales data is facilitated by the `SalesBook`. It implements the"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "`ReadOnlySalesBook` interface, which will allow the sales data to be displayed graphically in the user interface."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "The sales data is stored in a `UniqueSalesRecordList`, which is a list of `SalesRecordEntry`. A `SalesRecordEntry`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "contains the `numberSold` for a type of `Drink`. The `SalesBook` implements the following operations:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " "
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " * `SalesBook#overwriteSales(Map\u003cDrink, Integer\u003e sales)`  —  Overwrites the sales record with the given sales data"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " * `SalesBook#isEmptySalesRecord()`  —  Returns true if the sales record is empty"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "If the `SalesBook` has not been initialised with the user\u0027s sales input, which means that the `SalesBook` is empty, then"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "the first sales record will set the sales record with the user input. Drink items that were not provided in the user"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "input will be set to a default value of 0. "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "Subsequent sales update will overwrite existing sales record for the particular `Drink`."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#overwrite(Map\u003cDrink, Integer\u003e salesInput)` and "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "`Model#isEmptySalesBook()`. "
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "Given below is an example usage scenario and how the recording sales data mechanism behaves at each step."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "Step 1: The user launches the application for the first time. The `SalesBook` will be initialized with an empty"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "`SalesBook` as no sales information has been recorded yet. The `UniqueSalesRecordList` is currently empty."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "Step 2: The user executes the `s-update BSBM/100 BSBGT/120` command to record that 100 Brown Sugar Boba Milk (BSBM) and"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "120 Brown Sugar Boba Green Tea (BSBGT) were sold. The `s-update` command will initialise the sales record in `SalesBook`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "when it is executed. This is because the current `SalesBook` is empty. It calls "
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "`Model#overwrite(Map\u003cDrink, Integer\u003e salesInput)`, which will save the sales data into the `UniqueSalesRecordList` in "
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "the `SalesBook`. The other `Drink` types whose sales numbers were not given will be initialised to 0."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "Step 3: The user realises he left out some sales data. He executes the `s-update BSBBT/180 BSPM/64` command to record"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "that 180 Brown Sugar Boba Black Tea (BSBBT) and 64 Brown Sugar Pearl Milk (BSPM) were sold. Since the `SalesBook` has "
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "already been initialised, when the `s-update` command executes, it calls "
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "`Model#overwrite(Map\u003cDrink, Integer\u003e salesInput)` which will only overwrite the sales data for the `Drink` items that"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "were given in the user input will be overwritten."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " "
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "Step 4: The user then realises that he had made an error in recording the number of Brown Sugar Boba Milk (BSBM) sold. "
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "He then executes the `s-update BSBM/110` to correct this error. The `s-update` command will call "
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "`Model#overwrite(Map\u003cDrink, Integer\u003e salesInput)` to overwrite the sales data for Brown Sugar Boba Milk (BSBM) only."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "The following sequence diagram shows how the sales update operation works:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "![SalesUpdateSequenceDiagram](images/SalesUpdateSequenceDiagram.png)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "The following activity diagram summarises what happens when a user executes the `s-update` command."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "![SalesUpdateActivityDiagram](images/SalesUpdateActivityDiagram.png)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "##### Aspect: How the sales record updates"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "* **Alternative 1 (current choice)**: Overwrite the sales data only for the drink items specified by the"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "user in the `s-update` command"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    *  Pros: More intuitive and convenient for the user. If the user made any error or miss out any details, he can"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     correct the sales data with a shorter command."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    *  Cons: Less easy to implement"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "* **Alternative 2**: Replace the sales record based on what has been given by the user, for every"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "  `s-update` command"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    * Pros: Easy to implement"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    * Cons: May not be intuitive and convenient for the user, as the user would have to ensure that his command has"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     no error and contains all information. If he made an error or left something out, he would have to retype the"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "      entire command again."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "#### Aspect: How to implement `Drink` types"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "* **Alternative 1 (current choice)**: Implement `Drink` type as an Enumeration class"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    * Pros: Simple to implement. Since there is only a fixed set of drink items to represent, we can use an Enumeration"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     class to represent the types of `Drink`s. It is also easier to add more types of drinks in the future."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    * Cons: If more functionalities are required from `Drink` in the future, then it may not be feasible to use an"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     Enumeration class."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "* **Alternative 2**: Implement `Drink` type as a normal class, where the fields could include a String to identify"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " the type of Drink. The various Drink type would then inherit from this class."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    * Pros: It can can be extended more easily if there is a greater variety of drinks to store in the future."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    * Cons: There are not many operations to do with `Drink`s. It is only used to represent a constant set of"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     drink types."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     "
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Persdre"
        },
        "content": "## \\[Completed\\] Finding sales data of some drinks"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Persdre"
        },
        "content": "  "
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Persdre"
        },
        "content": "Finds specific drinks\u0027 sales data feature allows the user to get the sales data of a drink quickly. The command is:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Persdre"
        },
        "content": "  "
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Persdre"
        },
        "content": "* `s-find KEYWORD [MORE_KEYWORDS]` - Views sales data of drinks with the specified keywords."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Persdre"
        },
        "content": "  "
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Persdre"
        },
        "content": "#### Completed Implementation"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Persdre"
        },
        "content": "  "
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Persdre"
        },
        "content": "The completed finds sales data of some drinks mechanism is facilitated by `InputContainsKeywordsPredicate`. It implements "
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Persdre"
        },
        "content": "Predicate\u003cSalesRecordEntry\u003e. "
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Persdre"
        },
        "content": "It exposes to `#Model updateFilteredSalesList(Predicate\u003cSalesRecordEntry\u003e predicate)`."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Persdre"
        },
        "content": "  "
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Persdre"
        },
        "content": "Given below is an example usage scenario and how the find drinks\u0027 sales data mechanism behaves at each step."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Persdre"
        },
        "content": "  "
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Persdre"
        },
        "content": "Step 1. The user launches the application. If the storage file for the sales book is empty, `SalesBook` will "
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Persdre"
        },
        "content": "be initialized with the six pre-defined drinks, namely `BSBM`, `BSBBT`, `BSBGT`, `BSPM`, `BSPBT` and `BSPGT`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Persdre"
        },
        "content": "with the sales data of 0 for all. If the storage file for the sales book is not empty, `SalesBook` will read the  "
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Persdre"
        },
        "content": "data from the storage file."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Persdre"
        },
        "content": "  "
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Persdre"
        },
        "content": "Step 2. The user executes `s-find BSBBT` to view BSBBT\u0027s current sales data. The `s-find BSBBT` command is"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Persdre"
        },
        "content": "parsed by `SalesFindCommandParser` which parses the input to get the matched drink\u0027s name and "
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Persdre"
        },
        "content": "returns an  `SalesFindCommand`,  which returns the drinks their sales data."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Persdre"
        },
        "content": "  "
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Persdre"
        },
        "content": "The following activity diagram shows how the find drink\u0027s sales data operation works:"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Persdre"
        },
        "content": "![Find Drink\u0027s Activity Diagram](images/SalesFindActivityDiagram.png) "
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Persdre"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Persdre"
        },
        "content": "  "
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Persdre"
        },
        "content": "##### Aspect: How to find drink\u0027s sales data"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Persdre"
        },
        "content": "  "
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Persdre"
        },
        "content": "  * **Current Choice**: Obtain the drink\u0027s name entered by the user, and use the"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Persdre"
        },
        "content": "  drink\u0027s name to find the sales data by looping through the salesbook."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    * Pros: Code is more readable and consistent with the logic of finding employees."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    * Cons: Every execution of the command will require one to access the sales record list loop through "
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    the list once, which may increase the time required for the operation. "
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Persdre"
        },
        "content": "         "
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Persdre"
        },
        "content": "## \\[Completed\\] View a single ingredient\u0027s level feature"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Persdre"
        },
        "content": "  "
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Persdre"
        },
        "content": "View a single ingredients\u0027 level feature allows the user to view the level of a particular ingredient when the need"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Persdre"
        },
        "content": "arises. The command is:"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Persdre"
        },
        "content": "  "
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Persdre"
        },
        "content": "* `i-view-single i/INGREDIENT_NAME` - Views the ingredient\u0027s level of the ingredient with the specified ingredient name."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Persdre"
        },
        "content": "  "
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Persdre"
        },
        "content": "#### Completed Implementation"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Persdre"
        },
        "content": "  "
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Persdre"
        },
        "content": "The completed view a single ingredient\u0027s level mechanism is facilitated by `IngredientBook`. It implements "
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Persdre"
        },
        "content": "`ReadOnlyIngredientBook` interface and offers methods to view the ingredients\u0027 levels from the application\u0027s "
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Persdre"
        },
        "content": "`ingredientBook`. Particularly, it implements the following operation:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Persdre"
        },
        "content": "  "
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Persdre"
        },
        "content": "  * `IngredientBook#findIngredientByName(IngredientName ingredientName)` — Returns the ingredient with the target "
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Persdre"
        },
        "content": "  ingredient name. "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Persdre"
        },
        "content": "  "
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Persdre"
        },
        "content": "This operation is exposed in the `Model` interface as `Model#findIngredientByName(IngredientName ingredientName)`."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Persdre"
        },
        "content": "  "
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Persdre"
        },
        "content": "Given below is an example usage scenario and how the view a single ingredient\u0027s level mechanism behaves at each step."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Persdre"
        },
        "content": "  "
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Persdre"
        },
        "content": "Step 1. The user launches the application. If the storage file for the ingredient book is empty, `IngredientBook` will "
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Persdre"
        },
        "content": "be initialized with the five pre-defined ingredients, namely `Milk`, `Pearl`, `Boba`, `Oolong Tea` and `Brown Suagr`, "
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Persdre"
        },
        "content": "with an amount of 0 for all. If the storage file for the ingredient book is not empty, `IngredientBook` will read the  "
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Persdre"
        },
        "content": "data from the storage file."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Persdre"
        },
        "content": "  "
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Persdre"
        },
        "content": "Step 2. The user executes `i-view-single i/Milk` to view milk\u0027s current level. The `i-view-single i/Milk` command is"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Persdre"
        },
        "content": "parsed by `IngredientViewSingleCommandParser` which parses the ingredient to get the ingredient name and "
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Persdre"
        },
        "content": "returns an  `IngredientViewSingleCommand`. Logic executes the `IngredientViewSingleCommand` and calls "
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Persdre"
        },
        "content": "`Model#findIngredientByName(IngredientName ingredientName)`, which returns the ingredient with the ingredient name"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Persdre"
        },
        "content": "entered by the user."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Persdre"
        },
        "content": "  "
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Persdre"
        },
        "content": "The following activity diagram shows how the view a single ingredient level operation works:"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Persdre"
        },
        "content": "![View a Single Ingredient Activity Diagram](images/IngredientViewSingleActivityDiagram.png) "
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Persdre"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Persdre"
        },
        "content": "  "
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Persdre"
        },
        "content": "##### Aspect: How find the ingredient\u0027s level executes"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Persdre"
        },
        "content": "  "
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Persdre"
        },
        "content": "  * **Alternative 1 (current choice):** Obtain the ingredient name of the ingredient entered by the user, and use the"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Persdre"
        },
        "content": "  ingredient name to find the ingredient by looping through the ingredient list."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    * Pros: Code is more readable."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    * Cons: Every execution of the command will require one to access the name of the ingredient and loop through "
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    the list once, which may increase the time required for the operation. "
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    "
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Persdre"
        },
        "content": "  * **Alternative 2:** Map the ingredient entered by the user to a index which corresponds to the index of the "
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Persdre"
        },
        "content": "  ingredient in the list, then find the ingredient using the index."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    * Pros: Do not require looping through the list every time `IngredientViewSingleCommand` executes."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    * Cons: Code may be less readable.     "
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Persdre"
        },
        "content": "  "
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "### \\[Completed\\] Set ingredients\u0027 levels feature"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "The completed set ingredients\u0027 levels feature consists of three commands with slightly different formats, which complement one another, to provide a set of useful commands for enhanced user experiences. The three commands are :"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "* `i-set i/INGREDIENT_NAME m/AMOUNT` — Sets the level of one specific ingredient to the specified amount."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "* `i-set-default` — Sets the levels of all ingredients defined in the ingredient book to pre-determined amounts."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "* `i-set-all M/AMOUNT_FOR_MILK P/AMOUNT_FOR_PEARL B/AMOUNT_FOR_BOBA L/AMOUNT_FOR_BLACK_TEA G/AMOUNT_FOR_GREEN_TEA S/AMOUNT_FOR_BROWN_SUGAR` — Sets the levels of all ingredients defined in the ingredient book to different specified amounts for each ingredient."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "#### Completed Implementation"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "The completed set ingredients\u0027 levels mechanism is facilitated by `IngredientBook`. It implements `ReadOnlyIngredientBook` interface and offers methods to set the system\u0027s `ingredientBook`. Particularly, it implements the following three operations:"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "* `IngredientBook#setIngredient(Ingredient target, Ingredient newAmount)` — Sets the amount the `target` ingredient in the ingredient book to the specified new amount."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "* `IngredientBook#setIngredients(List\u003cIngredient\u003e ingredients)` — Sets the amounts of all ingredients defined in the ingredient book to the specified amounts in `ingredients` list."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "* `IngredientBook#setData(ReadOnlyIngredientBook newAmount)` — Sets the amounts of all ingredients defined in the ingredient book according to the `newAmount` ingredient book."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#setIngredient(Ingredient target, Ingredient newAMount)` and `Model#setIngredientBook(ReadOnlyIngredientBook ingredientBook)` respectively."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The `IngredientBook#setIngredients(List\u003c\u003e ingredients)` is not exposed in model because it is only used to change the internal states of `ReadOnlyIngredientBook ingredientBook` quickly."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "Given below is an example usage scenario and how the set ingredients\u0027 levels mechanism behaves at each step."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "Step 1. The user launches the application. The `IngredientBook` will be initialized with the six pre-defined ingredients, namely `Milk`, `Pearl`, `Boba`, `Black Tea` , `Green Tea` and `Brown Sugar`, with an amount of 0 for all."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "![IngredientBookState0](images/IngredientBookState0.png)"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "Step 2. The user executes `i-set-default` to set the amounts of all ingredients to the default levels of the system. The `i-set-default` command calls `Model#setIngredientBook(ReadOnlyIngredientBook ingredientBook)`, causing the initial ingredient book to be replaced by the `ingredientBook` with the amounts of ingredients to be equal to their default levels."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#setIngredientBook(ReadOnlyIngredientBook ingredientBook)`, so the ingredient book will not be changed in the system."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "Step 3. The user finds that the real amounts for one particular ingredient in his/her stall, milk for example, is different from the default level stored in the application and decides to set the amount for milk by executing the `i-set i/INGREDIENT_NAME m/AMOUNT` command. In this case, the exact command entered is : `i-set i/Milk m/100`."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "The command calls `Model#setIngredient(Ingredient target, Ingredient newAmount)`, causing the `target` in the current ingredient book to be replaced by `newAmount` ."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If `i-set` command fails its execution, it will not call `Model#setIngredient(Ingredient target, Ingredient newAmount)`, so the ingredient book will not be modified in the system."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "Step 4. After some time of operation, the user decides to update the ingredient book with current amounts of ingredients in his/her stall by executing the `i-set-all M/AMOUNT_FOR_MILK P/AMOUNT_FOR_PEARL B/AMOUNT_FOR_BOBA L/AMOUNT_FOR_BLACK_TEA G/AMOUNT_FOR_GREEN_TEA S/AMOUNT_FOR_BROWN_SUGAR` command. "
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "In this case, the exact command entered is :  `i-set-all M/10 P/15 B/20 L/5 G/5 S/15`. The command calls `Model#setIngredient(ReadOnlyIngredientBook ingredientBook)`, causing the current ingredient book to be replaced by the `ingredientBook` with new different specified amounts for each ingredient."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "The following sequence diagram shows how the set ingredients operation works, using `i-set i/INGREDIENT m/AMOUNT` as an example:"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "![SetSequenceDiagram](images/SetSequenceDiagram.png)"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new `i-set`  command:"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "![SetActivityDiagram](images/SetActivityDiagram.png)"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "##### Aspect: How set ingredients\u0027 levels executes"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "* **Alternative 1 (current choice):** Differentiates into three commands to be able to set one ingredient\u0027s amount, set all ingredients\u0027 amounts to default levels and set all ingredients\u0027 amounts to different levels."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "  * Pros: Different commands can suit the needs of the user at different times. In the first few times of usage, the user is still not very familiar with the application and thus may only use `i-set-default` together with `i-set i/INGREDIENT m/AMOUNT` to make adjustments."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "  When the user becomes an expert user, he/she can utilize the `i-set-all` command to complete the task of setting ingredients\u0027 levels with greater efficiency."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "  * Cons: More implementation and testing work required to ensure all commands are working as expected."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "* **Alternative 2:** Has only one command :  `i-set i/INGREDIENT_NAME m/AMOUNT`."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "  "
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "  * Pros: Easier to implement and test. Theoretically speaking, this one command can achieve the same effect as `i-set-default` and `i-set-all`  by entering it multiple times."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "  * Cons: Does not really suit the user\u0027s needs because it can be tedious to set each ingredient individually."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "WM71811"
        },
        "content": "### \\[Completed\\] List ingredients\u0027 levels feature"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "WM71811"
        },
        "content": "List ingredients\u0027 levels feature allows the user to view all the ingredient levels to check if any ingredient should"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "WM71811"
        },
        "content": "be restocked. The command is:"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  "
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "WM71811"
        },
        "content": "* `i-list` - Lists the ingredients\u0027 levels of all ingredients."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "WM71811"
        },
        "content": "#### Completed Implementation"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "WM71811"
        },
        "content": "The completed list ingredients\u0027 levels mechanism is facilitated by `IngredientBook`. It implements "
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "WM71811"
        },
        "content": "`ReadOnlyIngredientBook` interface and offers methods to view the ingredients\u0027 levels from the application\u0027s "
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "WM71811"
        },
        "content": "`ingredientBook`. Particularly, it implements the following operation:"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "WM71811"
        },
        "content": "* `IngredientBook#getFilteredIngredientList()` — Returns the list of ingredients consisting of ingredient names and "
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "WM71811"
        },
        "content": "ingredient levels in the ingredient book."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "WM71811"
        },
        "content": "This operation is exposed in the `Model` interface as `Model#getFilteredIngredientList()`."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "WM71811"
        },
        "content": "Given below is an example usage scenario and how the list ingredients\u0027 levels mechanism behaves at each step."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "WM71811"
        },
        "content": "Step 1. The user launches the application. If the storage file for the ingredient book is empty, `IngredientBook` will "
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "WM71811"
        },
        "content": "be initialized with the five pre-defined ingredients, namely `Milk`, `Pearl`, `Boba`, `Oolong Tea` and `Brown Suagr`, "
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "WM71811"
        },
        "content": "with an amount of 0 for all. If the storage file for the ingredient book is not empty, `IngredientBook` will read the  "
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "WM71811"
        },
        "content": "data from the storage file."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "WM71811"
        },
        "content": "Step 2. The user executes `i-list` to view the list of all ingredients and their levels. The `i-list` command calls "
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "WM71811"
        },
        "content": "`Model#getFilteredIngredientList()`, which returns the list of ingredients in `IngredientBook`."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "WM71811"
        },
        "content": "The following sequence diagram shows how the list ingredients operation works:"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "WM71811"
        },
        "content": "![List Ingredients Sequence Diagram](images/IngredientListSequenceDiagram.png)"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "WM71811"
        },
        "content": "##### Aspect: How list ingredients\u0027 levels executes"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "WM71811"
        },
        "content": "* **Alternative 1 (current choice):** Access the ingredient list and loop through the list to return the list of "
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "WM71811"
        },
        "content": "ingredients showing their ingredient names and levels."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  * Pros: Easier to implement and code is more readable."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  * Cons: Every execution of the command will loop through the list once, which can be avoided if an alternative design"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  is used."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "WM71811"
        },
        "content": "* **Alternative 2:** Maintain a field in `ingredientbook` that stores the string representing the list of ingredients in"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "WM71811"
        },
        "content": "terms of their ingredient names and levels."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "WM71811"
        },
        "content": " * Pros: Clearer implementation. `IngredientListCommand` will not need to manipulate the list of ingredients during"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "WM71811"
        },
        "content": " execution."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "WM71811"
        },
        "content": " * Cons: This may result in a slower response of the application since the field would be updated every time the "
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "WM71811"
        },
        "content": " ingredient list is updated."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  "
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "WM71811"
        },
        "content": "## \\[Completed\\] View a single ingredient\u0027s level feature"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  "
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "WM71811"
        },
        "content": "View a single ingredients\u0027 level feature allows the user to view the level of a particular ingredient when the need"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "WM71811"
        },
        "content": "arises. The command is:"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  "
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "WM71811"
        },
        "content": "* `i-view-single i/INGREDIENT_NAME` - Views the ingredient\u0027s level of the ingredient with the specified ingredient name."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  "
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "WM71811"
        },
        "content": "#### Completed Implementation"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  "
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "WM71811"
        },
        "content": "The completed view a single ingredient\u0027s level mechanism is facilitated by `IngredientBook`. It implements "
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "WM71811"
        },
        "content": "`ReadOnlyIngredientBook` interface and offers methods to view the ingredients\u0027 levels from the application\u0027s "
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "WM71811"
        },
        "content": "`ingredientBook`. Particularly, it implements the following operation:"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  "
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  * `IngredientBook#findIngredientByName(IngredientName ingredientName)` — Returns the ingredient with the target "
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  ingredient name. "
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  "
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "WM71811"
        },
        "content": "This operation is exposed in the `Model` interface as `Model#findIngredientByName(IngredientName ingredientName)`."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  "
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "WM71811"
        },
        "content": "Given below is an example usage scenario and how the view a single ingredient\u0027s level mechanism behaves at each step."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  "
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "WM71811"
        },
        "content": "Step 1. The user launches the application. If the storage file for the ingredient book is empty, `IngredientBook` will "
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "WM71811"
        },
        "content": "be initialized with the five pre-defined ingredients, namely `Milk`, `Pearl`, `Boba`, `Oolong Tea` and `Brown Suagr`, "
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "WM71811"
        },
        "content": "with an amount of 0 for all. If the storage file for the ingredient book is not empty, `IngredientBook` will read the  "
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "WM71811"
        },
        "content": "data from the storage file."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  "
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "WM71811"
        },
        "content": "Step 2. The user executes `i-view-single i/Milk` to view milk\u0027s current level. The `i-view-single i/Milk` command is"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "WM71811"
        },
        "content": "parsed by `IngredientViewSingleCommandParser` which parses the ingredient to get the ingredient name and "
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "WM71811"
        },
        "content": "returns an  `IngredientViewSingleCommand`. Logic executes the `IngredientViewSingleCommand` and calls "
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "WM71811"
        },
        "content": "`Model#findIngredientByName(IngredientName ingredientName)`, which returns the ingredient with the ingredient name"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "WM71811"
        },
        "content": "entered by the user."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  "
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "WM71811"
        },
        "content": "The following activity diagram shows how the view a single ingredient level operation works:"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "![View a Single Ingredient Activity Diagram](images/IngredientViewSingleActivityDiagram.png) "
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  "
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "WM71811"
        },
        "content": "##### Aspect: How find the ingredient\u0027s level executes"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  "
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  * **Alternative 1 (current choice):** Obtain the ingredient name of the ingredient entered by the user, and use the"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  ingredient name to find the ingredient by looping through the ingredient list."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    * Pros: Code is more readable."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    * Cons: Every execution of the command will require one to access the name of the ingredient and loop through "
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    the list once, which may increase the time required for the operation. "
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    "
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  * **Alternative 2:** Map the ingredient entered by the user to a index which corresponds to the index of the "
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  ingredient in the list, then find the ingredient using the index."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    * Pros: Do not require looping through the list every time `IngredientViewSingleCommand` executes."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    * Cons: Code may be less readable."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    "
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "WM71811"
        },
        "content": "## \\[Completed\\] Reset all ingredients\u0027 levels feature"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "WM71811"
        },
        "content": "Reset all ingredients\u0027 levels feature allows the user to reset all the ingredient levels to zero. It helps the user to"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "WM71811"
        },
        "content": "remove data that are no longer needed. The command is:"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  "
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "WM71811"
        },
        "content": "* `i-reset-all` - Resets the ingredients\u0027 levels of all ingredients to zero."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  "
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "WM71811"
        },
        "content": "#### Completed Implementation"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  "
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "WM71811"
        },
        "content": "The completed reset all ingredients\u0027 levels mechanism is facilitated by `IngredientBook`. It implements "
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "WM71811"
        },
        "content": "ReadOnlyIngredientBook` interface and offers methods to view the ingredients\u0027 levels from the application\u0027s "
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "WM71811"
        },
        "content": "ingredientBook`. Particularly, it implements the following operation:"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  "
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  * `IngredientBook#getFilteredIngredientList()` — Returns the list of ingredients consisting of ingredient names and "
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  ingredient levels in the ingredient book."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  "
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "WM71811"
        },
        "content": "This operation is exposed in the `Model` interface as `Model#getFilteredIngredientList()`."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  "
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "WM71811"
        },
        "content": "Given below is an example usage scenario and how the reset all ingredients\u0027 levels mechanism behaves at each step."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  "
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "WM71811"
        },
        "content": "Step 1. The user launches the application. If the storage file for the ingredient book is empty, `IngredientBook` will "
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "WM71811"
        },
        "content": "be initialized with the five pre-defined ingredients, namely `Milk`, `Pearl`, `Boba`, `Oolong Tea` and `Brown Suagr`, "
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "WM71811"
        },
        "content": "with an amount of 0 for all. If the storage file for the ingredient book is not empty, `IngredientBook` will read the  "
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "WM71811"
        },
        "content": "data from the storage file."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  "
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "WM71811"
        },
        "content": "Step 2. The user executes `i-reset-all` to reset all ingredients\u0027 levels. The `i-reset-all` command calls"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "WM71811"
        },
        "content": "`Model#getFilteredIngredientList()`, which returns the list of ingredients in `IngredientBook`. The list of "
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "WM71811"
        },
        "content": "ingredients is checked to see whether all ingredient levels are already at zero. If it is true, the user will "
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "WM71811"
        },
        "content": "be informed that all ingredient levels are already at zero. Otherwise, ingredients that have levels not at zero"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "WM71811"
        },
        "content": "would be replaced by a new ingredient object with the same ingredient name and a zero ingredient level."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  "
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "WM71811"
        },
        "content": "The following activity diagram shows how the reset all ingredients\u0027 levels operation works:"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "WM71811"
        },
        "content": "![Reset all Ingredients\u0027 Levels Activity Diagram](images/IngredientResetAllActivityDiagram.png)"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "WM71811"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  "
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "WM71811"
        },
        "content": "##### Aspect: How reset the ingredients\u0027 levels executes"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  "
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  * **Alternative 1 (current choice):** Loop through the ingredient list twice, the first time to check if all "
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  ingredient levels are at zero, the second time to replace the original ingredient that has a non-zero ingredient "
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  level with a new ingredient with the same ingredient name and a zero ingredient level."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    * Pros: Easier implementation."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    * Cons: Execution of the command may require one to create one or more new ingredients, which may increase the time "
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    required for the operation. "
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    "
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  * **Alternative 2:** Loop through the ingredient list twice, the first time to check if all ingredient levels are "
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  already at zero, the second time to update the ingredient level to zero."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    * Pros: Clear implementation. Do not lead to creation of new ingredient objects."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    * Cons: Editing the ingredient level may be more error-prone."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "### \\[Completed\\] Archive person\u0027s contact information feature"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "When employees are no longer working in the store, their contact information would usually be deleted, or kept in"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "the archive. tCheck simulates this archive, storing these contact information in the app so that the user can still"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "retrieve them back when needed. For example, when an employee is rehired by the manager, the manager(user) can move"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "this specific employee\u0027s contact information back to the currently active contact information list from the"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "archived record."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "The completed archive person\u0027s contact information feature consists of four commands with slightly different"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "formats, which complement one another, to provide a set of useful commands for enhanced user experiences. The four"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "commands are :"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "* `c-archive INDEX` — Archives the person identified by the index number used in the displayed person list."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "* `c-unarchive INDEX` — Unarchives the person identified by the index number used in the displayed person list."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "* `c-archive-all` — Archives all persons in the displayed person list."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "* `c-archive-list` — Shows a list of all archived persons\u0027 contact details."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "#### Completed Implementation"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "The archiving of persons is facilitated by the `ArchiveStatus` attribute of a person. The following methods in the"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " `Person` class and the `Model` interface facilitate this feature:"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "* `Person#archive()` — A method that sets the person\u0027s `ArchiveStatus` to `true`. It\u0027s equivalent to archive the person."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "* `Person#unarchive()` — A method that sets the person\u0027s `ArchiveStatus` to `false`. It\u0027s equivalent to unarchive the"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " person."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "* `Model#PREDICATE_SHOW_ALL_ACTIVE_PERSONS` — A `Predicate` function that filters our archived persons from a given"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " `PersonList`."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "* `Model#PREDICATE_SHOW_ALL_ARCHIVED_PERSONS` — A `Predicate` function that filters our active(not archived"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "\t) persons from a given `PersonList`."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "\t"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "![Structure of the Archive/Unarchive Component](images/ArchiveClassDiagram.png)"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "*Figure Archive-1. Overview class diagram representation of the person archiving/unarchiving implementation*"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "Given below shows how the `c-archive`, `c-unarchive`, and `c-archive-all` mechanism works in steps based on different scenarios. Two activity diagrams are provided before each detailed explanation to describe how tCheck handles an archiving/unarchiving commands. Three sequence diagrams are attached after the description "
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "##### 1. Archiving a person"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "*Figure Archive-2. Activity diagram representation of the general flow of archiving of a peron in tCheck*"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "User can archive a specific person by entering the `c-archive INDEX` command. The following steps describe how this behavior is implemented:"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "Step 1: The user archives a `Person` in the current observable `PersonList` with command `c-archive 1`. `ArchiveCommand` is created with the parsed arguments, and executed."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "Step 2: The `Person` will then be checked if the `ArchiveStatus` is `true`. An error message will be displayed if the user tries to archive a person from the archived person list."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "Step 3: The `Person` will have a new `ArchivedStatus` value, which will be set to `true` by using the `Person#archive()` method."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "Step 4: The current `FilteredList` will be updated to only show active `Persons`, facilitated by the predicate `Model#PREDICATE_SHOW_ALL_ACTIVE_PERSONS`"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "![Structure of the Storage Component](images/ArchiveSequenceDiagram.png)"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "*Figure Archive-3. Sequence diagram representation of archiving a person*"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "##### 2. Unarchiving a person"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "![Structure of the Storage Component](images/UnarchiveActivityDiagram.png)"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "*Figure Archive-4. Activity diagram representation of the general flow of unarchiving of a peron in tCheck*"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "User can unarchive an already-archived person\u0027s contact information by entering the `c-unarchive INDEX` command. The following steps describe how this behavior is implemented:"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "Step 1: The user unarchives a `Person` in the current observable `PersonList` with command `c-unarchive 1`. `UnarchiveCommand` is created with the parsed arguments, and executed."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "Step 2: The `Person` will then be checked if the `ArchiveStatus` is `false`. An error message will be displayed if the user tries to unarchive a person from the active person list."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "Step 3: The `Person` will have a new `ArchivedStatus` value, which will be set to `false` by using the `Person#unarchive()` method."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "Step 4: The current `FilteredList` will be updated to only show active `Persons`, facilitated by the predicate `Model#PREDICATE_SHOW_ALL_ACTIVE_PERSONS`"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "![Structure of the Storage Component](images/UnarchiveSequenceDiagram.png)"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "*Figure Archive-5. Sequence diagram representation of unarchiving a person*"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "##### 3. Archiving all persons"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "User can archive all persons\u0027 contact information by entering the `c-archive-all` command. The following steps describe how this behavior is implemented:"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "Step 1: The user archives all `Person`s in the current observable `PersonList` with command `c-archive-all`. `ArchiveAllCommand` is created with the parsed arguments, and executed."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "Step 2: For each `Person` in the observable \u0027PersonList\u0027, `ArchiveAllCommand` will create a `Person` object, and then set this `Person`\u0027s `ArchiveStatus` to `true` by using the `Person#archive()` method."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "Step 3: The current `FilteredList` will be updated to only show the empty active `Persons`, facilitated by the predicate `Model#PREDICATE_SHOW_ALL_ACTIVE_PERSONS`"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "![Structure of the Storage Component](images/ArchiveAllSequenceDiagram.png)"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "*Figure Archive-6. Sequence diagram representation of archiving all persons*"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "##### Aspect: The implementation to store archived persons"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "* **Alternative 1 (current choice):** `Person` contains an `ArchiveStatus` field."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    * Pros: Easy to implement "
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    * Cons: If the `PersonList` contains a huge number of `Person`s, the processing speech will be slow for certain"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "      command (eg: c-archive-list), because it needs to go into each `Person` to check if the `ArchiveStatus` is `true`."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "* **Alternative 2:** Storing archived persons in a separate json file."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "  * Pros:  Execute `c-archive-list` very fast, even for huge amount of data, because it can just display all the data"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "   inside this file."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "  * Cons: Hard to implement and maintain."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "Alternative 1 was chosen, because for a bubble tea shop, normally the total number of employees will be less than 100. "
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "And the software doesn\u0027t need to handle huge amount of data. On the other hand, if alternative 2 were"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "used, `Logic` and `Model` have to deal another set of data. Consequently, application\u0027s overall complexity will be"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "increased. "
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "### \\[Completed\\] Edit employees\u0027s contact information feature"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "Compared with the original implementation, this feature adds emergency contact information of the employee. It can help"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "the user to contact some staff when emergency situation happens. The command is:"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "- `edit INDEX [n/NAME] [p/PHONE] [e/EMERGENCY_CONTACT] [t/TAG] …​​`"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "#### Completed Implementation"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "The completed edit employee\u0027s contact information is facilitated by `AddressBook`. It implements `ReadOnlyAddressBook`"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "interface and offers method to edit the application\u0027s `AddressBook`. Particularly, it changes Person\u0027s constructor and "
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "function declarations to add emergency there."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "Given below is an example usage scenario and how the edit mechanism behaves at each step."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "Step 1: The user launches the application for the first time. Because now there isn\u0027t any information in addressbook. "
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "The user can\u0027t edit now."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "Step 2: The user executes `add n/Betsy Crowe e/81234567 p/1234567 t/morning shift t/part-time`. The `add` command calls"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "`Model#addPerson()` to add Besty\u0027s information in the `AddressBook`. The updated `AddressBook` is stored in "
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "`addressbook.json`."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "Step 3: The user executes `edit 1 n/Besty Crowe e/54749110 p/1234567 t/morning shift t/part-time` to change Besty Crowe\u0027s"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "phone number. This`edit` command calls `Model#setPerson()` to replace the original Besty Crowe\u0027s information in the "
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "`Addressbook`, causing the updated `Addressbook` to be stored in `addressbook.json`, overwriting the former one."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "#### Design Consideration"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "##### Aspect: How to display the emergency contact"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "* **Alternative 1 (current choice):** Displays the emergency contact of the similar format"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "with phone number, using a prefix to identify them."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "  * Cons: May seem a little redundancy."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "* **Alternative 2:** Use different icons to represent phone and emergency contact "
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "  * Pros: Will be easy to tell from."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "  * Cons: Need more work."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "WM71811"
        },
        "content": "* is the store manager of a T*ger Sugar milk tea shop"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "WM71811"
        },
        "content": "* is very busy with daily operations and has little time for manual writing or recording"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "WM71811"
        },
        "content": "* is a fast typist"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "WM71811"
        },
        "content": "* has many employees (both part-time and full-time) to manage"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "WM71811"
        },
        "content": "* needs to save all the employees’ contact numbers"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "WM71811"
        },
        "content": "* needs to forward one person’s contact to another"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  employee to let them directly communicate with each other "
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "WM71811"
        },
        "content": "* cares about the daily revenue"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "WM71811"
        },
        "content": "* does an inventory check daily to ensure that ingredients are sufficient"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  for the shop to operate smoothly"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "WM71811"
        },
        "content": "* needs to keep track of the daily revenue"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "WM71811"
        },
        "content": "* prefers desktop apps over other types"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "**Value proposition**:"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "* To manage the employees\u0027 contact information digitally"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    * The product will provide a platform to allow the user to save his/ her employees’ contact "
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "      information (eg. emergency contacts, address etc)."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    * It can manage contacts faster than a typical mouse/GUI driven app "
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "* To digitise inventory keeping"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    * The product will help to digitise inventory keeping, and thus helps to save the user’s time and prevent "
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "      human error in calculation. It does not ensure that the employees use the same amount of ingredients in making "
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "      the drinks. The user only needs to enter the number of each type of bubble tea sold on the day. It will notify the user"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "      which ingredients are running low on stock and remind him/ her to restock them soon. "
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    * The product could also help the user calculate the total cost for restocking."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "* To digitise daily revenue tracking"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    * Given the number of each type of bubble tea sold, the product can provide the user with the revenue for each day."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    * The product also helps Amy to keep track of the daily revenue changes, and the revenue for each type of product. "
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "      This would allow Amy to check which kind of bubble tea sells better and consider adopting similar ideas when "
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "      making new products. "
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "Persdre"
        },
        "content": "Priorities: 1 (must have), 2 (nice to have), 3 (unlikely to have)"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "Persdre"
        },
        "content": "| As a/an                           | I can/I want to (features that are going to be implemented)                                                                  | So that (benefit gained)                                                                                 | Priority |"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "Persdre"
        },
        "content": "| --------------------------------- | ---------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------- |"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "Persdre"
        },
        "content": "| Store manager                     | have a centralised system that helps me keep track of my employees’ contact numbers                                          | I don\u0027t need to organize working contacts on my personal phone                                           | 1                                                             |"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "Persdre"
        },
        "content": "| Store manager                     | have a software that helps me on daily inventory checking                                                                    | I can reduce the amount of human errors that may be involved and track the shop\u0027s inventory conveniently | 1                                                             |"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "Persdre"
        },
        "content": "| Busy store manager                | receive reminders to restock                                                                                                 | I won\u0027t lose revenue because of unexpected ingredient shortage during operation                          | 1                                                             |"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "Persdre"
        },
        "content": "| First-time user                   | be able to download the app                                                                                                  | I can play around and check out what it can do before actual usage                                       | 1                                                             |"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "Persdre"
        },
        "content": "| First-time user                   | use the help feature                                                                                                         | I can get more familiar with the app features                                                            | 1                                                             |"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "Persdre"
        },
        "content": "| First-time user                   | find out if the app is running smoothly and bug-free                                                                         | I can decide if using this app will indeed help me run a store                                           | 1                                                             |"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "Persdre"
        },
        "content": "| Concerned manager                 | check the employees\u0027s contact number if they are absent without stating any reasons                                          | I can easily contact them in a short time                                                                | 1                                                             |"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "Persdre"
        },
        "content": "| Second-time user                  | initialize the ingredients level in the app                                                                                  | I need not remember the amount of inventories, and only need to update when I do a restock               | 1                                                             |"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "Persdre"
        },
        "content": "| Second-time user                  | find the emergency contacts of my employees quickly if they are injured                                                      | I can find the person to contact and know what action to take in the shortest time possible              | 1                                                             |"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "Persdre"
        },
        "content": "| Intermediate user                 | input the number of each type of drinks sold into tCheck at the end of the day, and know the amount of remaining ingredients | I can document the amount of ingredients left                                                            | 1                                                             |"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "Persdre"
        },
        "content": "| Expert user                       | to delete some of the employees\u0027 data who are no longer working at the shop                                                  | they are no longer tracked by the app.                                                                   | 1                                                             |"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "Persdre"
        },
        "content": "| Second-time user                  | view the revenue from the last day                                                                                           | I can predict how much demand it would likely to be for today                                            | 1                                                             |"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "Persdre"
        },
        "content": "| Store manager                     | have a software to help me calculate my daily revenue                                                                        | I don\u0027t need to manually calculate them and it will become less troublesome to do so                     | 2                                                             |"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "Persdre"
        },
        "content": "| Busy and concenrned store manager | have a software to remind me on check my employees\u0027 health condition for each shift                                          | I won\u0027t forget to check, espcially when I\u0027m busy                                                         | 2                                                             |"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "Persdre"
        },
        "content": "| First-time user                   | read the \"About\" page in the app                                                                                             | I know how to use this software to help my business                                                      | 2                                                             |"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "Persdre"
        },
        "content": "| First-time user                   | register for a password-protected account                                                                                    | I can be sure that my user data will not be viewed by non-users                                          | 2                                                             |"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "Persdre"
        },
        "content": "| First-time user                   | be able to navigate the app easily                                                                                           | I only need basic intuition to use the navigation bar (For GUI)                                          | 2                                                             |"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "Persdre"
        },
        "content": "| Impatient first-time user         | have a fast-response inventory keeping application                                                                           | I don\u0027t waste time waiting for the app to load                                                           | 2                                                             |"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "Persdre"
        },
        "content": "| Second-time user                  | only use the software and access my data if I enter the correct login information                                            | it prevents unauthorised users from viewing the shop\u0027s information                                       | 2                                                             |"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "Persdre"
        },
        "content": "| Second-time user                  | be reminded of the task of checking the employee\u0027s health condition                                                          | I would not forget to check the employees\u0027 health status each day before the shop opens                  | 2                                                             |"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "Persdre"
        },
        "content": "| Concerned manager                 | check and record the health conditions of my employees                                                                       | I can do my best to ensure the safety of food is guanranteed                                             | 2                                                             |"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "Persdre"
        },
        "content": "| Second-time user                  | view the inventory from the last day                                                                                         | I can restock before the ingredients ran out of stock and affect my business                             | 2                                                             |"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "Persdre"
        },
        "content": "| Intermediate user                 | input the number of each type of drinks sold into tCheck at the end of the day,and find out the total revenue of the day     | I can document the daily revenue                                                                         | 2                                                             |"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "Persdre"
        },
        "content": "| Intermediate user                 | do closing duties according to a check list shown on the app                                                                 | I will not forget important things                                                                       | 2                                                             |"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "Persdre"
        },
        "content": "| Intermediate user                 | use the ingredient data                                                                                                      | I can prepare for next day\u0027s ingredients                                                                 | 2                                                             |"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "Persdre"
        },
        "content": "| Busy store manager                | use shortcut commands                                                                                                        | it makes my input process into tCheck faster and more convenient.                                        | 2                                                             |"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "Persdre"
        },
        "content": "| Expert user                       | my data to be saved reliably                                                                                                 | my data won\u0027t be lost even if my computer crashes                                                        | 2                                                             |"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "Persdre"
        },
        "content": "| Expert user                       | have fast responses after a long usage period                                                                                | I will not waste time waiting for the app even after extensive usage                                     | 2                                                             |"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "Persdre"
        },
        "content": "| Expert user                       | export my data from the application                                                                                          | the performace of the store can be analyzed easily by using other third-party softwares                  | 2                                                             |"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "Persdre"
        },
        "content": "| Intermediate user                 | to look through my employees\u0027 health condition data of the last 10 days                                                      | I can roughly gauge the conditions of my employees                                                       | 3                                                             |                                              |"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "(For all use cases below, the **System** is the `tCheck` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "**Use Case: UC01 - Archive a contact detail of an employee**"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "1. User chooses to archive one employee’s contact details. "
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "2. tCheck requests for details of the employee to archive."
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "3. User enters the archive details."
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "4. tCheck will move this corresponding contact detail into the archive and displays a success message."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "     "
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "     Use case ends."
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "* 3a. tCheck detects an incorrect input format or is unable to find the entered data."
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        "
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        * 3a1. tCheck requests for the correct data."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        "
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    \t* 3a2. User enters new data."
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    \t"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    \tSteps 3a1-3a2 are repeated until the data entered are correct."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    \t"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    \tUse case resumes from step 4."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "**Use Case: UC02 - Archive all contact details**"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "1. User chooses to archive all employee’s contact details. "
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "2. User enters the request to archive all employees’ contact details."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "3. tCheck will move all contact details into the archive and displays a success message."
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     Use case ends."
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "* 2a. tCheck detects an incorrect input format."
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        * 2a1. tCheck requests for the input to be in the correct format."
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        "
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "      \t* 2a2. User enters new data."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "      \t"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "      \tSteps 2a1-2a2 are repeated until the data entered are correct."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "      \t"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "      \tUse case resumes from step 3."
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "      \t"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "* 2b. tCheck detects an empty contact list."
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "   \t    * 2b1. tCheck shows a warning message."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "   \t    "
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "   \t    Use case ends."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "**UC03 - Set ingredient level for a single ingredient**"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "1. User chooses to set the ingredient level for an ingredient."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "2. tCheck requests for the name of the ingredient."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "3. User enters the name of the ingredient."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "4. tCheck requests for the amount of the particular ingredient."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "5. User enters the amount of the particular ingredient."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "6. tCheck will set the ingredient level for this ingredient and displays a success message."
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "        Use case ends."
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "* 3a. tCheck is unable to find the entered name."
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "  \t    * 3a1. tCheck requests for the correct data."
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "  \t    "
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "  \t    * 3a2. User enters new data."
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "  \t    "
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        Steps 3a1-3a2 are repeated until the data entered are correct."
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        "
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "      \tUse case resumes from step 4."
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "      \t"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "* 5a. tCheck detects an invalid amount value"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "   \t    * 5a1. tCheck requests for the correct data."
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "   \t    "
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "   \t    * 5a2. User enters new data."
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "   \t    "
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        Steps 5a1-5a2 are repeated until the data entered are correct."
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        "
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "       \tUse case resumes from step 6."
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "**UC05 - Set sales level for all types of drinks**"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "1. User chooses to set the sales volume for a type of drink."
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "2. tCheck requests for the drink name."
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "3. User enters the name of the drink."
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "4. tCheck requests for the number of that type of drink sold on that day."
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "5. User enters the number of that type of drink sold."
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "6. tCheck will set the sales level for this drink and displays a success message."
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     Steps 1-6 are repeated until the sales of all types of drinks are updated."
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     "
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     Use case ends."
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "* 3a. tCheck is unable to find the entered name."
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "  \t    * 3a1. tCheck requests for the correct data."
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "  \t    "
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "  \t    * 3a2. User enters new data."
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "  \t    "
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        Steps 3a1-3a2 are repeated until the data entered are correct."
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        "
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "      \tUse case resumes from step 4."
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "      \t"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "* 5a. tCheck detects an invalid sales amount."
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": " \t    * 5a1. tCheck requests for the correct data."
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": " \t    "
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": " \t    * 5a2. User enters new data."
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": " \t    "
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        Steps 5a1-5a2 are repeated until the data entered are correct."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     \tUse case resumes from step 6."
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "     \t"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "2.  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "3.  Should be able to respond within 1 second for each operation."
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "4.  Should be able to function fully without connecting to internet."
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "5.  Should be for a single user."
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "6.  Should not handle the printing of the report (i.e. sales report)."
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "7.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "8.  A user without prior experience on inventory management system should be able to accomplish most of the tasks"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " using commands. "
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "* **Private contact detail**: A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "### Deleting a person"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "1. Deleting a person while all persons are being shown"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 199,
      "Diwu-Yi": 154,
      "yanbingtao": 8,
      "WM71811": 153,
      "-": 334,
      "Persdre": 119
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "\u003cimg src\u003d\"images/tCheckLogo.png\" width\u003d\"200\" height\u003d\"200\" /\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Persdre"
        },
        "content": "Welcome to the tCheck User Guide! Thank you for choosing tCheck, the most popular command-line milk tea shop management desktop application in the T-Sugar chain!"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Persdre"
        },
        "content": "tCheck offers an integrated system to efficiently manage a T-Sugar shop, by providing sales tracking, ingredient tracking and employees\u0027 contact management in one platform."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Persdre"
        },
        "content": "This guide will help you to get started with tCheck, and provide useful tips along the way."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    * [About this document](#about-this-document)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    * [Quick start](#quick-start)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    * [Features](#features)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        * [Commands - Sales Tracking](#commands-sales-tracking) "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        * [Commands - Ingredients Tracking](#commands-ingredients-tracking)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        * [Commands - Contact details](#commands-contact-details)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        * [Commands - General](#commands-general)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    * [Command summary](#command-summary)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Persdre"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Persdre"
        },
        "content": "## About this document  \u003ca name\u003d\"about-this-document\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Persdre"
        },
        "content": "This document introduces the features of tCheck. "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Persdre"
        },
        "content": "The following are symbols and formatting used in this document:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Persdre"
        },
        "content": ":bulb: "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Persdre"
        },
        "content": "Tips are used to describe small features or techniques"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Persdre"
        },
        "content": "that may come in handy when using tCheck!"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Persdre"
        },
        "content": ":information_source: "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Persdre"
        },
        "content": "Notes describe certain features or behaviour that may"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Persdre"
        },
        "content": "not be so obvious!"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "## Quick start \u003ca name\u003d\"quick-start\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "1. Download the latest `tCheck.jar` from [here](https://github.com/AY2021S1-CS2103T-T12-2/tp/releases)."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "1. Copy the file to the folder you want to use as the _home folder_ for your tCheck."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "   Some example commands you can try:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`list`** : Lists all contacts."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "   * **`add`**`n/John Doe p/98765432 e/81234567 t/part time` : Adds an employee\u0027s contact"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    named `John Doe` to tCheck."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`delete`**`3` : Deletes the 3rd contact shown in the current list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`clear`** : Deletes all contacts."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`exit`** : Exits the app."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "1. Refer to the [Features](#features) below for details of each command."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "## Features \u003ca name\u003d\"features\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "  e.g. in `ingredient NAME`, `NAME` is a parameter which can be used as `ingredient milk`."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* Items with `…`​ after them can be used once or multiple times.\u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "  e.g. `sales A/NUM B/NUM C/NUM …` can be used as `sales BSBM/100` or `sales BSBM/100 BSBBT/120`."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "### 1. Commands - Sales Tracking \u003ca name\u003d\"commands-sales-tracking\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "**:information_source: Notes about available drinks:**\u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Currently, there are 6 types of drinks that can be tracked by tCheck\u0027s sales tracker. The drinks and their respective"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " abbreviations are shown as below:\u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* `BSBM`  : Brown Sugar Boba Milk\u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* `BSBBT` : Brown Sugar Boba Black Tea\u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* `BSBGT` : Brown Sugar Boba Green Tea\u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* `BSPM`  : Brown Sugar Pearl Milk\u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* `BSPBT` : Brown Sugar Pearl Black Tea\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* `BSPGT` : Brown Sugar Pearl Green Tea\u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "#### 1.1 Updating the number of drinks sold for the day : `s-update`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "Updates the number of drinks sold for each drink type as given in the user input."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Format: `s-update A/NUM B/NUM C/NUM ...`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* `A`, `B`, `C` are abbreviations for the drink types."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* `NUM` refers to the number of drinks sold. It should be a non-negative integer."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* `s-update BSBM/100 BSBBT/120` Updates the sales of Brown Sugar Boba Milk `BSBM` to 100 and"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " Brown Sugar Boba Black Tea `BSBBT` to 120."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " "
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ":information_source: Note about the update: \u003cbr\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "The record in tCheck will be overwritten by the input that you provide. \u003cbr\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " \u003c/div\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "#### 1.2 Listing the number of drinks sold for the day : `s-list`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Shows a list of all types of drinks sold for the current day."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Format: `s-list`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "#### 1.3 Finds the number of drinks by keywords : `s-find`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Persdre"
        },
        "content": "Finds all drinks where their abbreviated names match the KEYWORD(s)."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Persdre"
        },
        "content": "Format: `s-find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Persdre"
        },
        "content": "* The search is case-insensitive. e.g `bsbbt` will match `BSBBT`."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Persdre"
        },
        "content": "* Only the drink\u0027s abbreviated name is searched."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Persdre"
        },
        "content": "* Only full words will be matched e.g. `BSB` will not match `BSBBT`."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Persdre"
        },
        "content": "* Drinks matching at least one keyword will be returned."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Persdre"
        },
        "content": "  e.g. `BSBBT BSBM` will return `BSBBT`, `BSBM`."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Persdre"
        },
        "content": "* `s-find BSBBT` returns `BSBBT`\u0027s sales data."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Persdre"
        },
        "content": "* `s-find BSBBT BSBM` returns `BSBBT`\u0027s sales data and `BSBM`\u0027s sales data.\u003cbr\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " "
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " "
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "### 2. Commands - Ingredients Tracking \u003ca name\u003d\"commands-ingredients-tracking\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    "
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "**:information_source: Notes about ingredients:**\u003cbr\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* Unit of measurement for ingredients:\u003cbr\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    * - Unit for solid items / jelly (Pearl, Boba and Brown Sugar) : **KG**\u003cbr\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    * - Unit for liquids (Milk, Black Tea and Green Tea) : **L**\u003cbr\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* All ingredients\u0027 levels are set to 0.\u003cbr\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* All ingredients which are available and thus can be set are predefined in the ingredient book.\u003cbr\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "  "
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* Please note that the ingredient names are case-sensitive.\u003cbr\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* Here is a comprehensive list of all available ingredients :\u003cbr\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    * - Milk\u003cbr\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    * - Pearl\u003cbr\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    * - Boba\u003cbr\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    * - Black Tea\u003cbr\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    * - Green Tea\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    * - Brown Sugar\u003cbr\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "#### 2.1 Setting one ingredient\u0027s level : `i-set`"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Sets the level of one single ingredient predefined in the ingredient book to the specified amount."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Format: `i-set i/INGREDIENT_NAME m/AMOUNT`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* Sets the `INGREDIENT_NAME` to the specified `AMOUNT`."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* `i-set i/Milk m/15`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "#### 2.2 Setting all ingredients\u0027 levels to different specified amounts : `i-set-all`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Sets all ingredients\u0027 levels to different specified amounts according to user inputs."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "Format: `i-set-all M/AMOUNT_FOR_MILK P/AMOUNT_FOR_PEARL B/AMOUNT_FOR_BOBA L/AMOUNT_FOR_BLACK_TEA G/AMOUNT_FOR_GREEN_TEA S/AMOUNT_FOR_BROWN_SUGAR`"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "* Sets all ingredients\u0027 levels as such : Milk : `AMOUNT_FOR_MILK` L, Pearl : `AMOUNT_FOR_PEARL` KG, Boba : `AMOUNT_FOR_BOBA` KG, Black Tea : `AMOUNT_FOR_BLACK_TEA` L, Green Tea: `AMOUNT_FOR_GREEN_TEA`, Brown Sugar : `AMOUNT_FOR_BROWN_SUGAR` KG."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "* `i-set-all M/20 P/20 B/20 L/50 G/80 S/50`"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "#### 2.3 Setting all ingredients to different levels : `i-set-default`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Sets all ingredients\u0027 levels to their pre-determined default levels for a stall."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Format: `i-set-default`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "* Sets all ingredients\u0027 levels to their default levels : Milk : 50 L, Pearl : 20 KG, Boba : 20 KG, Black Tea : 50 L, Green Tea : 50 L, Brown Sugar : 20 KG."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* `i-set-default`"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "#### 2.4 Listing all ingredients\u0027 levels : `i-list`"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "WM71811"
        },
        "content": "Lists the ingredient\u0027s levels of all ingredient types."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "WM71811"
        },
        "content": "Format: `i-list`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "#### 2.5 Viewing a single ingredient\u0027s level : `i-view-single`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "WM71811"
        },
        "content": "Shows the ingredient\u0027s level of a particular type of ingredient that is specified by the user’s command."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Format: `i-view-single i/INGREDIENT_NAME`"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "WM71811"
        },
        "content": "* `i-view-single i/Green Tea`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "WM71811"
        },
        "content": "Shows the amount of green tea recorded by tCheck."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "#### 2.6 Resetting all ingredients\u0027 levels to zero : `i-reset-all`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "WM71811"
        },
        "content": "Resets all types of ingredients\u0027 levels to zero in tCheck."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Format: `i-reset-all`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "#### 2.7 Listing all ingredients that user should restock : `i-restock`"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "WM71811"
        },
        "content": "Lists the ingredient\u0027s levels of all ingredient types that fall below their minimum stock levels and require the user to "
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "WM71811"
        },
        "content": "restock. "
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "WM71811"
        },
        "content": "The table below shows the minimum stock levels of different types of ingredients:"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "WM71811"
        },
        "content": "Ingredient Type | Minimum Stock Level"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "WM71811"
        },
        "content": "-------|------------------------------"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "WM71811"
        },
        "content": "**Milk** | 5 L"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "WM71811"
        },
        "content": "**Pearl** | 5 KG"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "WM71811"
        },
        "content": "**Boba** | 5 KG"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "WM71811"
        },
        "content": "**Black Tea** | 5 L"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "WM71811"
        },
        "content": "**Green Tea** | 5 L"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "WM71811"
        },
        "content": "**Brown Sugar** | 5 KG"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "WM71811"
        },
        "content": "Format: `i-restock`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "### 3. Commands - Contact details \u003ca name\u003d\"commands-contact-details\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "#### 3.1 Adding an employee : `c-add`"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Persdre"
        },
        "content": "Adds an employee to the contact list."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Persdre"
        },
        "content": "Format: `c-add n/NAME p/PHONE_NUMBER e/EMERGENCY_CONTACT [t/TAG]…​`"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: "
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "**Tip:**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Persdre"
        },
        "content": "An employee can have any number of tags (including 0)"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Persdre"
        },
        "content": "* `c-add n/John Doe p/98765432 e/81234567`."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Persdre"
        },
        "content": "* `c-add n/Betsy Crowe e/81234567 p/1234567 t/morning shift t/part-time`."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "#### 3.2 Listing all employees : `c-list`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Persdre"
        },
        "content": "Shows a list of all employees in the contact list."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Persdre"
        },
        "content": "Format: `c-list`"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "#### 3.3 Listing all employees who are working today: `c-today`"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Shows a list of all employees whose tags contain today\u0027s day (i.e. `Wednesday`, `Tuesday`, etc)."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Format: `c-today`"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* The search is case-insensitive. e.g `Friday` will match `friday`."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* Assume today is `Wednesday`, after command `c-today`, all employees whose tags contain `Wednesday` will be"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "  listed out. "
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "#### 3.4 Listing all employees who are working tomorrow: `c-tomorrow`"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Shows a list of all employees whose tags contain tomorrow\u0027s day (i.e. `Wednesday`, `Tuesday`, etc)."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Format: `c-tomorrow`"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* The search is case-insensitive. e.g `Friday` will match `friday`."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* Assume today were `Wednesday`, tomorrow would be `Thursday`, after command `c-tomorrow`, all employees whose"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "tags contain `Thursday` will be listed out. "
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "  "
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "#### 3.5 Editing a person : `c-edit`"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Edits the corresponding contact information in the contact list."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Persdre"
        },
        "content": "Format: `c-edit INDEX n/NAME p/PHONE e/EMERGENCY_CONTACT [t/TAG] …​​`"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Persdre"
        },
        "content": "* Edits the employee at the specified `INDEX`. The index refers to the index number shown in the displayed contact list. The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Persdre"
        },
        "content": "* When editing tags, the existing tags of the employee will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Persdre"
        },
        "content": "* You can remove all the employees’s tags by typing `t/` without"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    specifying any tags after it."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Persdre"
        },
        "content": "*  `c-edit 1 p/91234567 e/81234567` Edits the phone number and emergency contact of the 1st employee to be `91234567` and"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " `81234567` respectively."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Persdre"
        },
        "content": "*  `c-edit 2 n/Betsy Crower t/` Edits the name of the 2nd employee to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "#### 3.6 Locating persons by keywords: `c-find`"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Finds all contacts that contain the KEYWORD(s) in their names."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Persdre"
        },
        "content": "Format: `c-find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* The search is case-insensitive. e.g `hans` will match `Hans`."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Persdre"
        },
        "content": "* Employees matching at least one keyword will be returned (i.e. `OR` search)."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "  e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Persdre"
        },
        "content": "* `c-find John` returns `john` and `John Doe`."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Persdre"
        },
        "content": "* `c-find alex david` returns `Alex Yeoh`, `David Li`.\u003cbr\u003e"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "#### 3.7 Locating persons based on matching tags: `c-tag-find`"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Finds all contacts that contain the KEYWORD(s) in their tags."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Format: `c-tag-find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* The search is case-insensitive. e.g `Friday` will match `friday`."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* The order of the keywords does not matter. e.g. `friday monday` will match `monday friday`."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* Only the tag names are searched."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* Only full words will be matched e.g. `PartTime` will not match `PartTimes`."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* Employees whose tag(s) matching at least one keyword will be listed in the `Employee Contact DeatailL` pane"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " (i.e. `OR` search).  e.g. `Friday Monday` will return employees whose tags contain `Friday` or `Monday`."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* `c-tag-find friday` returns all employees whose tags contain `friday`."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* `c-tag-find friday parttime` returns all employees whose tags contain `friday`, `parttime`.\u003cbr\u003e"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "#### 3.8 Deleting a person : `c-delete`"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Persdre"
        },
        "content": "Deletes the specified employee from the contact list."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Persdre"
        },
        "content": "Format: `c-delete INDEX`"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "* Deletes the person at the specified `INDEX`."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Persdre"
        },
        "content": "* `c-list` followed by `c-delete 2` deletes the 2nd employee in the contact list."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Persdre"
        },
        "content": "* `c-find Betsy` followed by `c-delete 1` deletes the 1st employee in the results of the `c-find` command."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "#### 3.9 Clearing all entries : `c-clear`"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Clears all entries from the contact list."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Persdre"
        },
        "content": "Format: `c-clear`"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "#### 3.10 Archiving an employee : `c-archive`"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Archives the specified employee\u0027s contact detail from the tCheck."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Format: `c-archive INDEX`"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* Archives the employee at the specified `INDEX`."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* The index refers to the index number shown in the displayed `employees\u0027 contact details` panel."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: "
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "**Tip:**"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Command `c-list` can be used first to show a list of all active employees\u0027 contact details. "
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Then, `c-archive INDEX` can be used to archive a specific employee."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* `c-list` followed by `c-archive 2` archives the 2nd person in the employees\u0027 contact details."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* `c-find Betsy` followed by `c-archive 1` archives the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "#### 3.11 Archiving all employees : `c-archive-all`"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Archives all employees\u0027 contact details from the tCheck."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Format: `c-archive-all`"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "#### 3.12 Listing all archived employees : `c-archive-list`"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Shows a list of all archived employees\u0027 contact details in tCheck."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Format: `c-archive-list`"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "#### 3.13 Unarchiving an employee : `c-unarchive`"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Unarchives the specified employee\u0027s contact detail from the tCheck\u0027s archived employee list."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Format: `c-unarchive INDEX`"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* Unarchives the employee at the specified `INDEX`."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* The index refers to the index number shown in the displayed `employees\u0027 contact details` panel."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: "
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "**Tip:**"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Command `c-archive-list` can be used first to show a list of all archived employees\u0027 contact details. "
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Then, `c-unarchive INDEX` can be used to unarchive a specific employee."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* `c-archive-list` followed by `c-unarchive 2` unarchives the 2nd person in the archived employees\u0027 contact details."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "### 4. Commands - General \u003ca name\u003d\"commands-general\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "#### 4.1 Viewing help : `help`"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "Displays a brief explanation of the list of commands, and a link to the help page, which is the user guide."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "#### 4.2 Exiting the program : `exit`"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "#### 4.3 Saving the data :"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "All tCheck data (i.e. contact details, ingredient data, sales data) are saved in the hard disk automatically after any"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": " command that changes the data. There is no need to save manually by entering any command."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": " "
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": " "
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "## Command summary \u003ca name\u003d\"command-summary\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "### Sales Tracking"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "-------|------------------------------"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "**Update**| `s-update A/NUM B/NUM C/NUM ...` \u003cbr\u003e e.g., `s-update BSBM/100 BSBBT/120`"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "**List**| `s-list`"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Persdre"
        },
        "content": "**Find**| `s-find KEYWORD [MORE_KEYWORDS] ...` \u003cbr\u003e e.g., `s-find BSBM BSBBT`"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "### Ingredients  Tracking"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "-------|------------------------------"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "**Set a single ingredient**  | `i-set i/INGREDIENT_NAME m/AMOUNT` \u003cbr\u003e e.g., `i-set i/Milk m/20`"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "**Set all ingredients**  | `i-set-all M/AMOUNT_FOR_MILK P/AMOUNT_FOR_PEARL B/AMOUNT_FOR_BOBA O/AMOUNT_FOR_OOLONG_TEA S/AMOUNT_FOR_SUGAR` \u003cbr\u003e e.g., `i-set-all M/20 P/20 B/20 O/50 S/100`"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "**Set all ingredients to default**  | `i-set-default` \u003cbr\u003e e.g., `i-set-default`"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "WM71811"
        },
        "content": "**View a single ingredient**| `i-view-single INGREDIENT_NAME`  \u003cbr\u003e e.g., `i-view-single i/Milk`"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "WM71811"
        },
        "content": "**Reset**| `i-reset-all`"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "WM71811"
        },
        "content": "**List**| `i-list`"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "### Employees\u0027 Contact Details"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "-------|------------------------------"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "**Add** | `c-add n/NAME p/PHONE_NUMBER e/EMERGENCY_CONTACT [t/TAG]…` \u003cbr\u003e e.g., `c-add n/James Ho p/22224444 e/81234567 t/morning shift`"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "**List** | `c-list`"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "**List avalible manpower** | 1. **For today:**  `c-today`\u003cbr\u003e2. **For the next day:**  `c-tomorrow` \u003cbr\u003e"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "**Edit** | `c-edit INDEX [n/NAME] [e/EMERGENCY_CONTACT] [t/TAG]…​`\u003cbr\u003e e.g.,`c-edit 2 n/James Lee e/81234567`"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "**Find by name** | `c-find KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `c-find James Jake`"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "**Find by tag(s)** | `c-tag-find KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `c-tag-find Friday Monday PartTime`"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "**Delete** | `c-delete INDEX`\u003cbr\u003e e.g., `c-delete 3`"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "**Clear** | `c-clear`"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "**Archive** |  1. **Archive \\(1 employee\\):**  `c-archive INDEX`\u003cbr\u003e e.g., `c-archive 1` \u003cbr\u003e2. **Archive \\(all employees\\):**  `c-archive-all` \u003cbr\u003e3. **List all archived data:**  `c-archive-list`\u003c/br\u003e"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "**Unarchive** | `c-unarchive INDEX`\u003cbr\u003e e.g., `c-unarchive 1` "
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "### General"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "-------|------------------------------"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "**Help** | `help`"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "**Exit** | `exit`"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " "
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 9,
      "Diwu-Yi": 55,
      "yanbingtao": 221,
      "WM71811": 22,
      "-": 128,
      "Persdre": 59
    }
  },
  {
    "path": "docs/diagrams/ArchiveActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ":User starts tCheck;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ":User executes"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "archive command"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "(with the person\u0027s INDEX);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "if () then ([is archived])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    :tCheck displays"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    error message;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    :Archive Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "endif"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "stop"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 19
    }
  },
  {
    "path": "docs/diagrams/ArchiveAllSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "participant \":ArchiveAllCommand\" as ArchiveAllCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "participant \":Person\" as Person MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "end box"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "[-\u003e LogicManager : execute(archive)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(archive)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "create ArchiveAllCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "AddressBookParser -\u003e ArchiveAllCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "activate ArchiveAllCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "ArchiveAllCommand --\u003e AddressBookParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "deactivate ArchiveAllCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "AddressBookParser --\u003e LogicManager :"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "LogicManager -\u003e ArchiveAllCommand : execute()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "activate ArchiveAllCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "loop until all persons are archived"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    ArchiveAllCommand -\u003e Person : archive()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    activate Person"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    Person --\u003e ArchiveAllCommand :archivedPerson"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    deactivate Person"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "end"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "ArchiveAllCommand --\u003e LogicManager :commandResult"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "deactivate ArchiveAllCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "ArchiveAllCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "destroy ArchiveAllCommand"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "[\u003c--LogicManager : commandResult"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 48
    }
  },
  {
    "path": "docs/diagrams/ArchiveClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Class AddressBook"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Class Person"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Class Address"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Class Phone"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Class ArchiveStatus"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Class UniquePersonList"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Class ObservableList"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "ModelManager ..|\u003e Model"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "ModelManager -\u003e \"1\" AddressBook"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "AddressBook -\u003e \"1\" UniquePersonList"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "UniquePersonList -\u003e \"2\" ObservableList"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "ObservableList -down-\u003e \"*\" Person"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Person *-down-\u003e \"1\" Name"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Person *-\u003e \"2\" Phone"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Person *-\u003e \"1\" Address"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Person *-down-\u003e \"1\" ArchiveStatus"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Person .down.\u003e ArchiveStatus"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Person *-down-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Name -[hidden]right-\u003e Phone"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Phone -[hidden]right-\u003e Address"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 42
    }
  },
  {
    "path": "docs/diagrams/ArchiveSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "participant \":ArchiveCommand\" as ArchiveCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "participant \":Person\" as Person MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "end box"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "[-\u003e LogicManager : execute(archive)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(archive)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "create ArchiveCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "AddressBookParser -\u003e ArchiveCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "activate ArchiveCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "ArchiveCommand --\u003e AddressBookParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "deactivate ArchiveCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "AddressBookParser --\u003e LogicManager :"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "LogicManager -\u003e ArchiveCommand : execute()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "activate ArchiveCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "ArchiveCommand -\u003e Person : archive()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "activate Person"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Person --\u003e ArchiveCommand :archivedPerson"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "deactivate Person"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "ArchiveCommand --\u003e LogicManager :commandResult"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "deactivate ArchiveCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "ArchiveCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "destroy ArchiveCommand"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "[\u003c--LogicManager : commandResult"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 46
    }
  },
  {
    "path": "docs/diagrams/IngredientBookState0.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "title Initial content"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "package System {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    object IngredientBook {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    {field} uniqueIngredientList : （Milk, Amount:0 Pearl, Amount:0 Boba, Amount:0 Oolong_Tea, Amount:0 Brown_Sugar, Amount:0）"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "class Pointer as \"Model\" #FFFFF"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "Pointer -up-\u003e IngredientBook"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "note right on link: Other books omitted."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 18
    }
  },
  {
    "path": "docs/diagrams/IngredientListSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"i-list\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"i-list\")"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : getFilteredIngredientList()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WM71811"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WM71811"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WM71811"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WM71811"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WM71811"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WM71811"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "WM71811": 26
    }
  },
  {
    "path": "docs/diagrams/IngredientResetAllActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": ":User executes command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": "if () then ([not all ingredients\u0027 levels are already at zero])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    :Find the ingredient(s) that has non-zero ingredient level in IngredientBook"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    and replace them with new ingredient objects that has the same ingredient name,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    and zero ingredient level(s);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    :Save the updated IngredientBook in storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    : Show a message stating that all ingredient levels are already at zero;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": "endif"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": "stop"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "WM71811": 17
    }
  },
  {
    "path": "docs/diagrams/IngredientStorageClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": "Interface IngredientBookStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": "Class JsonIngredientBookStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": "StorageManager .up.|\u003e AddressBookStorage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": "StorageManager o--\u003e IngredientBookStorage"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WM71811"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WM71811"
        },
        "content": "JsonIngredientBookStorage .left.|\u003e IngredientBookStorage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WM71811"
        },
        "content": "JsonIngredientBookStorage .down.\u003e JsonSerializableIngredientBookStorage"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WM71811"
        },
        "content": "JsonSerializableIngredientBookStorage .right.\u003e JsonSerializableIngredient"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WM71811"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "WM71811": 24
    }
  },
  {
    "path": "docs/diagrams/IngredientViewSingleActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": ":User executes command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": "if () then ([command is valid])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    :Find the matching ingredient in IngredientBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    :Show the ingredient name and level to the user;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    : Show an error message;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": "endif"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": "stop"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "WM71811": 15
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ReadOnlyAddressBook \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class AddressBook"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyAddressBook"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Package Person {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Class Person"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Class Address"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class Phone"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Persdre"
        },
        "content": "Class Emergency"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Class UniquePersonList"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook .up.|\u003e ReadOnlyAddressBook"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o--\u003e \"1\" AddressBook"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook *--\u003e \"1\" UniquePersonList"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "UniquePersonList o--\u003e \"*\" Person"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Persdre"
        },
        "content": "Person *--\u003e \"1\" Name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Persdre"
        },
        "content": "Person *--\u003e \"1\" Phone"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Persdre"
        },
        "content": "Person *--\u003e \"1\" Emergency"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Persdre"
        },
        "content": "Person *--\u003e \"1\" Address"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e \"*\" Tag"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "Name -[hidden]right-\u003e Phone"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Phone -[hidden]right-\u003e Address"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager --\u003e\"1\" Person : filtered list"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 50,
      "Persdre": 6
    }
  },
  {
    "path": "docs/diagrams/SalesFindActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Persdre"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Persdre"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Persdre"
        },
        "content": ":User executes command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Persdre"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Persdre"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Persdre"
        },
        "content": "if () then ([command is valid])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    :Find the matching drinks in SalesBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    :Show the drink\u0027s name and its sales data to the user;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Persdre"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    : Show an error message;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Persdre"
        },
        "content": "endif"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Persdre"
        },
        "content": "stop"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Persdre"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Persdre": 15
    }
  },
  {
    "path": "docs/diagrams/SalesUpdateActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ":User executes command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "if () then ([command is valid])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    :Parse the command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    :Display error message;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    stop"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "endif"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "if () then ([salesBook has been initialized])"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    :Overwrite the sales data"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    for the given drink types;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    :Set the sales data for"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    the given drink types and"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    set the rest to 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "endif"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ":Display success message;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "stop"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 27
    }
  },
  {
    "path": "docs/diagrams/SalesUpdateSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "participant \":SalesUpdateCommandParser\" as SalesUpdateCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "participant \"s:SalesUpdateCommand\" as SalesUpdateCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "[-\u003e LogicManager : execute(salesUpdate)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(salesUpdate)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "create SalesUpdateCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "AddressBookParser -\u003e SalesUpdateCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "activate SalesUpdateCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "SalesUpdateCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "deactivate SalesUpdateCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "AddressBookParser -\u003e SalesUpdateCommandParser : parse(arguments)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "activate SalesUpdateCommandParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "create SalesUpdateCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "SalesUpdateCommandParser -\u003e SalesUpdateCommand : SalesUpdateCommand(sales)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "activate SalesUpdateCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "SalesUpdateCommand -\u003e SalesUpdateCommandParser"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "deactivate SalesUpdateCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "SalesUpdateCommandParser -\u003e AddressBookParser : s"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "deactivate SalesUpdateCommandParser"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "AddressBookParser --\u003e LogicManager : s"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "LogicManager -\u003e SalesUpdateCommand : execute()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "activate SalesUpdateCommand"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "SalesUpdateCommand -\u003e Model : overwrite(sales)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "Model --\u003e SalesUpdateCommand :"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "SalesUpdateCommand -\u003e CommandResult : CommandResult(message)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "CommandResult -\u003e SalesUpdateCommand"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "SalesUpdateCommand -\u003e LogicManager : result"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "deactivate SalesUpdateCommand"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 67
    }
  },
  {
    "path": "docs/diagrams/SetActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ":User executes i-set/i-set-default/i-set-all command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "if () then ([command changed IngredientBook])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    :Change uniqueIngredientList"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    according to user inputs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    :Replace ingredientBook with a new one"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    with the updated uniqueIngredientList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    :Throw NoChangeIngredient Exception;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "endif"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "stop"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 18
    }
  },
  {
    "path": "docs/diagrams/SetSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "participant \"s:SetCommand\" as SetCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "participant \":IngredientBook\" as IngredientBook MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "participant \":UniqueIngredientList\" as UniqueIngredientList MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "[-\u003e LogicManager : execute(i-set i/Milk m/100)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(i-set i/Milk m/100)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "create SetCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "AddressBookParser -\u003e SetCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "activate SetCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "SetCommand --\u003e AddressBookParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "deactivate SetCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "AddressBookParser --\u003e LogicManager : s"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "LogicManager -\u003e SetCommand : execute()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "activate SetCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "SetCommand -\u003e Model : execute()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "Model -\u003e IngredientBook : setIngredient(target, newAmount)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "activate IngredientBook"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "IngredientBook -\u003e UniqueIngredientList :setIngredient(target, newAmount)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "activate UniqueIngredientList"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "UniqueIngredientList --\u003e IngredientBook :"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "deactivate UniqueIngredientList"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "IngredientBook --\u003e Model"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "deactivate IngredientBook"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "Model --\u003e SetCommand"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "SetCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "deactivate SetCommand"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "SetCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "destroy SetCommand"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 62
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface AddressBookStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonAddressBookStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": "Interface IngredientBookStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o--\u003e AddressBookStorage"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WM71811"
        },
        "content": "StorageManager .up.|\u003e IngredientBookStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "JsonAddressBookStorage .left.|\u003e AddressBookStorage"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "JsonAddressBookStorage .down.\u003e JsonSerializableAddressBookStorage"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "JsonSerializableAddressBookStorage .right.\u003e JsonSerializablePerson"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "JsonSerializablePerson .right.\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WM71811"
        },
        "content": "JsonIngredientBookStorage .left.|\u003e IngredientBookStorage"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WM71811"
        },
        "content": "JsonIngredientBookStorage .down.\u003e JsonSerializableIngredientBookStorage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WM71811"
        },
        "content": "JsonSerializableIngredientBookStorage .right.\u003e JsonSerializableIngredient"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "WM71811": 6,
      "-": 24
    }
  },
  {
    "path": "docs/diagrams/UnarchiveActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ":User starts tCheck;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ":User executes"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "unarchive command"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "(with the person\u0027s INDEX);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "if () then ([is archived])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    :Unarchive person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    :tCheck displays"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    error message;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "endif"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "stop"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 19
    }
  },
  {
    "path": "docs/diagrams/UnarchiveSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "participant \":UnarchiveCommand\" as UnarchiveCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "participant \":Person\" as Person MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "end box"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "[-\u003e LogicManager : execute(unarchive)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(unarchive)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "create UnarchiveCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "AddressBookParser -\u003e UnarchiveCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "activate UnarchiveCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "UnarchiveCommand --\u003e AddressBookParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "deactivate UnarchiveCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "AddressBookParser --\u003e LogicManager :"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "LogicManager -\u003e UnarchiveCommand : execute()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "activate UnarchiveCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "UnarchiveCommand -\u003e Person : unarchive()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "activate Person"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Person --\u003e UnarchiveCommand :unarchivedPerson"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "deactivate Person"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "UnarchiveCommand --\u003e LogicManager :commandResult"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "deactivate UnarchiveCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "UnarchiveCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "destroy UnarchiveCommand"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "[\u003c--LogicManager : commandResult"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 46
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "title: tCheck"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-T12-2/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-T12-2/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-T12-2/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-T12-2/tp)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "**tCheck is a desktop application that helps bubble tea store managers manage the staffs’ contact information, "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "store’s inventory and historical sales data. It is optimized for CLI(Command Line Interface) users to update and "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "retrieve the information more efficiently.**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "* If you are interested in using tCheck, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "* If you are interested about developing tCheck, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 8,
      "-": 13
    }
  },
  {
    "path": "docs/team/tanyinghui.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "title: Tan Ying Hui\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "## Project: tCheck"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "tCheck is a desktop application that helps bubble tea store managers manage the staffs’ contact information, "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "store’s inventory and historical sales data. It is optimized for CLI users to update and retrieve the information more "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "efficiently."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "  * Created Milestone v1.1 and added issues assigned to the milestone."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "  * AboutUs page:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    * Updated my information in the AboutUs page of the project website."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    * Added documentation for the features with regard to sales tracking."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    * Added documentation for value proposition of the product under Appendix: Requirements."
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 23
    }
  },
  {
    "path": "docs/team/wangmo.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": "title: Wang Mo\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": "## Project: tCheck"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": "tCheck is a desktop application that helps bubble tea store managers manage the staffs’ contact information,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": "store’s inventory and historical sales data. It is optimized for CLI users to update and retrieve the information more"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": "efficiently."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  * Added issues assigned to the milestone v1.2."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  * Created a label type.Story"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  * AboutUs page:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    * Updated my information in the AboutUs page of the project website."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    * Added documentation for the features `ingredient list`, `ingredient single` and `ingredient resetAll`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     with regard to ingredients tracking and the feature `help`."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    * Added documentation for the section on Target User Profile."
      }
    ],
    "authorContributionMap": {
      "WM71811": 24
    }
  },
  {
    "path": "docs/team/wangqian.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Persdre"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Persdre"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Persdre"
        },
        "content": "title: Wang Qian\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Persdre"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Persdre"
        },
        "content": "## Project: tcheck"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Persdre"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Persdre"
        },
        "content": "- Add information about myself"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Persdre"
        },
        "content": "\u003c!-- * **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Persdre"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Persdre"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Persdre"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Persdre"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Persdre"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Persdre"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Persdre"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Persdre"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Persdre"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Persdre"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Persdre"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Persdre"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Persdre"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Persdre"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Persdre"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Persdre"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Persdre"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Persdre"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Persdre"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Persdre"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Persdre"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Persdre"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Persdre"
        },
        "content": "* _{you can add/remove categories in the list above}_ --\u003e"
      }
    ],
    "authorContributionMap": {
      "Persdre": 47
    }
  },
  {
    "path": "docs/team/yanbingtao.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "title: Yan BingTao\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "## Project: tCheck"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "tCheck is a desktop application that helps bubble tea store managers manage the staffs’ contact information, store’s inventory and historical sales data. It is optimized for CLI users to update and retrieve the information more efficiently."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "  * AboutUs page:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    * Updated my information in the AboutUs page of the project website."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    * Added documentation for the features with regard to archive, saving user data and exiting application."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    * Added documentation for Non-functional requirements of the product under Appendix: Requirements."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 19
    }
  },
  {
    "path": "docs/team/zhangyi.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "title: Zhang Yi\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "## Project: tCheck"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "tCheck is a desktop application used by bubble tea store managers for keeping inventories and keep information of his/her employees. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "Currently, tCheck is at an early stage of development."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "* **Done so far**:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "Documentation updates."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "  * Update User Guide."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "  * Update Developer Guide."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "  * Update AboutUs Page."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "  "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "* **New Feature**:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "Coming soon"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "  * Added issues assigned to milestone v1.1."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "  * AboutUs page:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    * Updated my information in the AboutUs page of the project website."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    * Added documentation for the features `delete` `add` for contact number and `set` for ingredients tracking."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    * Added documentation for the section of use cases."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 35
    }
  },
  {
    "path": "docs/tutorials/AddRemark.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Adding a command\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s walk you through the implementation of a new command — `remark`."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Create a new `remark` command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Changes the remark of an existing person in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "### Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "### Run the application"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "![Output displayed](../images/add-remark/RemarkHello.png)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "## Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "## Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` to parse input from the user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "### Make the command accept parameters"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param remark of the person to be updated to"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "### Parse user input"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package. The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentTokenizer.java`:**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentMultimap.java`:**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "**`DeleteCommandParser.java`:**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommandParser.java`:**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508)."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## Add `Remark` to the model"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of person data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "### Add a new `Remark` class"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "Create a new `Remark` in `seedu.address.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "validation."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "### Make use of `Remark`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "## Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each person."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "Simply add the following to [`seedu.address.ui.PersonCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe)."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonListCard.fxml`:**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "That’s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "![$remark shows up in each entry](../images/add-remark/$Remark.png)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "## Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "### Modify `Person`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "### Update other usages of `Person`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "## Updating Storage"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "to see what the changes entail."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "## Finalizing the UI"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    remark.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "![The remark label is bound properly!](../images/add-remark/RemarkBound.png)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "## Putting everything together"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "### Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), "
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "                personToEdit.getAddress(), remark, personToEdit.getTags());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "![Congratulations!](../images/add-remark/RemarkComplete.png)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing tests"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "### Automatically generating tests"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is `methodName_testScenario_expectedResult`. An example would be"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "`execute_filteredList_success`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "![Creating a test for `execute`.](../images/add-remark/CreateTest.png)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9)."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      }
    ],
    "authorContributionMap": {
      "-": 393,
      "Persdre": 1
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Removing Fields\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Antoine de Saint-Exupery"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When working on AddressBook, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we’ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "## Safely deleting `Address`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify *most* usages. Let’s try to use it as much as we can."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "### Assisted refactoring"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "The `address` field in `Person` is actually an instance of the `seedu.address.model.person.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "![Usages detected](../images/remove/UnsafeDelete.png)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "![List of conflicts](../images/remove/SafeDeleteConflicts.png)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Safe delete the field `address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Yes` when prompted to remove getters and setters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `View Usages` again.\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "### Manual refactoring"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "![$address](../images/remove/$address.png)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.fxml`**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "## Tidying up"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**`invalidPersonAddressBook.json`:**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "```json"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "-": 101,
      "Persdre": 1
    }
  },
  {
    "path": "docs/tutorials/TracingCode.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Tracing code\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Before we start"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "![ArchitectureDiagram](../images/ArchitectureDiagram.png)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "![Architecture sequence diagram from the developer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "guide](../images/ArchitectureSequenceDiagram.png)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows *between* the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram succeeds in informing the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting a break point"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in `seedu.address.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the `Search for target by name` feature. `Navigate` \\\u003e `Symbol`.](../images/tracing/Execute.png)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we’re looking for. However, it is just an `Interface`. Let’s delve further and find the implementation of the interface by using the `Find Usages` feature in IntelliJ IDEA."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " ![LeftGutter](../images/tracing/LeftGutter.png)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "## Tracing the execution path"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Persdre"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to jot down what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "1. To start the debugging session, simply `Run` \\\u003e `Debug Main`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Persdre"
        },
        "content": "2. Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Persdre"
        },
        "content": "3. The Debugger tool window should show up and look something like this:\u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Persdre"
        },
        "content": "4. Use the `Show execution point` feature to jump to the line of code that we stopped at:\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Persdre"
        },
        "content": "5. `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Persdre"
        },
        "content": "6. We are interested in the `logic.execute(commandText)` portion of that line so let’s `Step in` into that method call:\u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    ![StepInto](../images/tracing/StepInto.png)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Persdre"
        },
        "content": "7. We end up in `LogicManager#execute()`. Let’s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "   **LogicManager\\#execute().**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(String commandText)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "           throws CommandException, ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        //Logging, safe to ignore"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        //Parse user input from String to a Command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        //Executes the Command and stores the result"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            // since it\u0027s being stored here."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Persdre"
        },
        "content": "8. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Persdre"
        },
        "content": "9. `Step over` the logging code since it is of no interest to us now. ![StepOver](../images/tracing/StepOver.png)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Persdre"
        },
        "content": "10. `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    **`AddressBookParser\\#parseCommand()`**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "   public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "       final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "       final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Persdre"
        },
        "content": "11. `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Variables](../images/tracing/Variables.png)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Persdre"
        },
        "content": "12. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Persdre"
        },
        "content": "13. Stepping into the `switch`, we obviously stop at **`AddressBookParser\\#parseCommand()`.**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Persdre"
        },
        "content": "14. Let’s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Persdre"
        },
        "content": "15. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:** Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them\\!"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Persdre"
        },
        "content": "16. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the `Variable` tool window.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "   ![EditCommand](../images/tracing/EditCommand.png)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Persdre"
        },
        "content": "17. Let’s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far matches with the diagram?\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Persdre"
        },
        "content": "18. Now let’s see what happens when we call `command#execute()`\\!"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "   **`EditCommand\\#execute()`:**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "       Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "       Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "       if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "           throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "       }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "       model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Persdre"
        },
        "content": "19. As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Persdre"
        },
        "content": "20. We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    `JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Persdre"
        },
        "content": "21. Again, it appears that the heavy lifting is delegated. Let’s take a look at `JsonSerializableAddressBook`\u0027s constructor."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    **`JsonSerializableAddressBook\\#JsonSerializableAddressBook()`:**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "   /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "   public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "       persons.addAll("
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "           source.getPersonList()"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                 .stream()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                 .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                 .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Persdre"
        },
        "content": "22. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Persdre"
        },
        "content": "23. We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Persdre"
        },
        "content": "24. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    **`ResultDisplay\\#setFeedbackToUser()`**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Persdre"
        },
        "content": "25. Finally, we step through until we reach the end of"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "the result being displayed to the user. From this tutorial, you learned"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "more about the inner workings of AddressBook and how the various"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "components mesh together to form one cohesive product."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "execution path tracing. In some cases, you can do further tracing for"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "the given commands to find exactly what happens."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    instead? What exceptions do you think will be thrown(if any), where"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    will the exceptions be thrown and where will they be handled?"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  `edit 1`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "2.  What components will you have to modify to perform the following"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    enhancements to the application?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  Make command words case-insensitive"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  Save the address book in the CSV format instead"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  Add a new command"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  Add a new field to `Person`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  Add a new entity to the address book"
      }
    ],
    "authorContributionMap": {
      "-": 225,
      "Persdre": 25
    }
  },
  {
    "path": "gradle/wrapper/gradle-wrapper.properties",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Persdre"
        },
        "content": "#Mon Oct 26 21:22:33 SGT 2020"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Persdre"
        },
        "content": "distributionUrl\u003dhttps\\://services.gradle.org/distributions/gradle-5.2.1-all.zip"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "distributionBase\u003dGRADLE_USER_HOME"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "distributionPath\u003dwrapper/dists"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "zipStorePath\u003dwrapper/dists"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Persdre"
        },
        "content": "zipStoreBase\u003dGRADLE_USER_HOME"
      }
    ],
    "authorContributionMap": {
      "-": 3,
      "Persdre": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.IngredientBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ReadOnlyIngredientBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.model.ReadOnlySalesBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import seedu.address.model.SalesBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.storage.IngredientBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.storage.JsonIngredientBookStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.storage.JsonSalesBookStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.storage.SalesBookStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        SalesBookStorage salesBookStorage \u003d new JsonSalesBookStorage("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                userPrefs.getSalesBookFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        IngredientBookStorage ingredientBookStorage \u003d new JsonIngredientBookStorage("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                userPrefs.getIngredientBookFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, salesBookStorage, userPrefsStorage, ingredientBookStorage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        Optional\u003cReadOnlyIngredientBook\u003e ingredientBookOptional;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        Optional\u003cReadOnlySalesBook\u003e salesBookOptional;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        ReadOnlyAddressBook initialAddressBookData;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        ReadOnlyIngredientBook initialIngredientBookData;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        ReadOnlySalesBook initialSalesBookData;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            ingredientBookOptional \u003d storage.readIngredientBook();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            salesBookOptional \u003d storage.readSalesBook();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            if (!ingredientBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample IngredientBook\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            if (!salesBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample SalesBook\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            initialIngredientBookData \u003d ingredientBookOptional.orElseGet(SampleDataUtil::getSampleIngredientBook);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            initialSalesBookData \u003d salesBookOptional.orElseGet(SampleDataUtil::getSampleSalesBook);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            initialAddressBookData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            initialAddressBookData \u003d new AddressBook();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            initialSalesBookData \u003d new SalesBook();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            initialIngredientBookData \u003d new IngredientBook();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            initialAddressBookData \u003d new AddressBook();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            initialSalesBookData \u003d new SalesBook();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            initialIngredientBookData \u003d new IngredientBook();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        IngredientBook sample \u003d new IngredientBook();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return new ModelManager(initialAddressBookData, initialSalesBookData, initialIngredientBookData, userPrefs);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 1,
      "Diwu-Yi": 3,
      "yanbingtao": 25,
      "WM71811": 15,
      "-": 177
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The employee index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d employees listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    public static final String MESSAGE_DRINKS_LISTED_OVERVIEW \u003d \"%1$d drinks listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 2,
      "-": 10,
      "Persdre": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Returns true if {@code s} represents an unsigned integer."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * e.g. 0, 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * e.g. empty string, \"-1\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public static boolean isUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            return value \u003e\u003d 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 18,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ReadOnlyIngredientBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.model.ReadOnlySalesBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import seedu.address.model.SalesRecordEntry;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Returns the SalesBook."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @see seedu.address.model.Model#getSalesBook()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    ReadOnlySalesBook getSalesBook();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Returns the IngredientBook."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @see seedu.address.model.Model#getIngredientBook()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    ReadOnlyIngredientBook getIngredientBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of ingredients */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    ObservableList\u003cIngredient\u003e getFilteredIngredientList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of sales record entries */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    ObservableList\u003cSalesRecordEntry\u003e getFilteredSalesRecordList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Returns the user prefs\u0027 sales book file path."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    Path getSalesBookFilePath();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Returns the user prefs\u0027 ingredient book file path."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    Path getIngredientBookFilePath();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 4,
      "Diwu-Yi": 4,
      "yanbingtao": 13,
      "WM71811": 13,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ReadOnlyIngredientBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.model.ReadOnlySalesBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import seedu.address.model.SalesRecordEntry;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            storage.saveSalesBook(model.getSalesBook());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            storage.saveIngredientBook(model.getIngredientBook());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public ReadOnlySalesBook getSalesBook() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return model.getSalesBook();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public ReadOnlyIngredientBook getIngredientBook() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return model.getIngredientBook();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public ObservableList\u003cIngredient\u003e getFilteredIngredientList() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return model.getFilteredIngredientList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public ObservableList\u003cSalesRecordEntry\u003e getFilteredSalesRecordList() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return model.getFilteredSalesRecordList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public Path getSalesBookFilePath() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return model.getSalesBookFilePath();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public Path getIngredientBookFilePath() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return model.getIngredientBookFilePath();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 6,
      "Diwu-Yi": 6,
      "yanbingtao": 12,
      "WM71811": 12,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Persdre"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMERGENCY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"c-add\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            + \"\\nParameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            + PREFIX_EMERGENCY + \"EMERGENCY_CONTACT \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            + PREFIX_EMERGENCY + \"87654321 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 2,
      "-": 62,
      "Persdre": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ArchiveAllCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "public class ArchiveAllCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"c-archive-all\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            + \": Archives all persons in the displayed person list.\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static final String MESSAGE_ARCHIVE_PERSON_SUCCESS \u003d \"Archived all persons in the displayed person list\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static final String MESSAGE_NOTHING_TO_ARCHIVE \u003d \"There is nothing in the current displayed list\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        int listSize \u003d lastShownList.size();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        if (listSize \u003d\u003d 0) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_NOTHING_TO_ARCHIVE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        for (int i \u003d 0; i \u003c listSize; i++) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            Person personToArchive \u003d lastShownList.get(0);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            Person archivedPerson \u003d personToArchive.archive();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            model.setPerson(personToArchive, archivedPerson);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        model.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_ACTIVE_PERSONS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return new CommandResult(MESSAGE_ARCHIVE_PERSON_SUCCESS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ArchiveCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.model.person.ArchiveStatus;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " * Archives a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "public class ArchiveCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"c-archive\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            + \": Archives the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static final String MESSAGE_ARCHIVE_PERSON_SUCCESS \u003d \"Archived Person: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static final String MESSAGE_PERSON_ALREADY_ARCHIVED \u003d \"This person has already been archived!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Constructs an ArchiveCommand."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param targetIndex the index number shown in the displayed person list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public ArchiveCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        Person personToArchive \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        ArchiveStatus currentStateOfPerson \u003d personToArchive.getArchiveStatus();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        if (currentStateOfPerson.archiveStatus) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_PERSON_ALREADY_ARCHIVED,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                    personToArchive));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        Person archivedPerson \u003d personToArchive.archive();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        model.setPerson(personToArchive, archivedPerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        model.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_ACTIVE_PERSONS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ARCHIVE_PERSON_SUCCESS, personToArchive.getName()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                || (other instanceof ArchiveCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ArchiveCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ArchiveListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ARCHIVED_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " * Shows all archived persons."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "public class ArchiveListCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"c-archive-list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all archived persons.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_ARCHIVED_PERSONS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"c-clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 1,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 1,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"c-delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 1,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Persdre"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMERGENCY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ACTIVE_PERSONS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.model.person.ArchiveStatus;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"c-edit\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            + \"[\" + PREFIX_EMERGENCY + \"EMERGENCY_CONTACT] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    // for edit phone\u0027s issues, add e/emergency_contact just behind p/phone_number"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_ACTIVE_PERSONS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        Phone updatedEmergency \u003d editPersonDescriptor.getEmergency().orElse(personToEdit.getEmergency());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        ArchiveStatus archiveStatus \u003d new ArchiveStatus(false);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmergency, updatedAddress, archiveStatus, updatedTags);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        private Phone emergency;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        private ArchiveStatus archiveStatus;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            setEmergency(toCopy.emergency);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            setArchiveStatus(toCopy.archiveStatus);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, address, archiveStatus, tags);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        public void setEmergency(Phone emergency) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            this.emergency \u003d emergency;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        public Optional\u003cPhone\u003e getEmergency() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            return Optional.ofNullable(emergency);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        public Optional\u003cArchiveStatus\u003e getArchiveStatus() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            return Optional.ofNullable(this.archiveStatus);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        public void setArchiveStatus(ArchiveStatus archiveStatus) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            this.archiveStatus \u003d archiveStatus;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                    \u0026\u0026 getEmergency().equals(e.getEmergency())"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                    \u0026\u0026 getArchiveStatus().equals(e.getArchiveStatus())"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 16,
      "-": 208,
      "Persdre": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindByTagCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.model.person.TagContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " * Finds and lists all persons in address book whose tag(s) contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "public class FindByTagCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"c-tag-find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose tag(s) contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" friday monday PartTime\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private final TagContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public FindByTagCommand(TagContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                || (other instanceof FindByTagCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindByTagCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindByTagTodayCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " * Finds and lists all persons in address book whose tag(s) contains today\u0027s day (i.e. Monday, Tuesday, etc)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " * For example, assume today is Tuesday, after command \"c-today\", all employees whose tag(s) contains"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " * \"tuesday\", case-insensitive, will be listed out."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "public class FindByTagTodayCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"c-today\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Today is %2$s.\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            + \"\\nThere are total %1$s employees working today.\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            + \"\\nThey are listed below.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static final String MESSAGE_NO_EMPLOYEE \u003d \"Today is %1$s.\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            + \"\\nBased on the contact list, no employee is working today.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        LocalDate todayDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        DayOfWeek dayOfWeek \u003d todayDate.getDayOfWeek();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        switch (dayOfWeek) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        case SUNDAY:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            model.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_SUNDAY_PERSONS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        case MONDAY:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            model.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_MONDAY_PERSONS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        case TUESDAY:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            model.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_TUESDAY_PERSONS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        case WEDNESDAY:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            model.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_WEDNESDAY_PERSONS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        case THURSDAY:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            model.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_THURSDAY_PERSONS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        case FRIDAY:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            model.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_FRIDAY_PERSONS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        case SATURDAY:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            model.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_SATURDAY_PERSONS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            model.updateFilteredPersonList(person -\u003e false);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        if (model.getFilteredPersonList().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_NO_EMPLOYEE, todayDate.getDayOfWeek()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, model.getFilteredPersonList().size(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                todayDate.getDayOfWeek()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindByTagTomorrowCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " * Finds and lists all persons in address book whose tag(s) contains the next-day\u0027s day (i.e. Monday, Tuesday, etc)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " * For example, assume today is Tuesday, after command \"c-tomorrow\", all employees whose tag(s) contains"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " * \"wednesday\", case-insensitive, will be listed out."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "public class FindByTagTomorrowCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"c-tomorrow\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Tomorrow is %2$s.\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            + \"\\nThere are total %1$s employees working tomorrow.\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            + \"\\nThey are listed below.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static final String MESSAGE_NO_EMPLOYEE \u003d \"Tomorrow is %1$s.\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            + \"\\nBased on the contact list, no employee is working tomorrow.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        LocalDate tmrDate \u003d LocalDate.now().plusDays(1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        DayOfWeek dayOfWeek \u003d tmrDate.getDayOfWeek();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        switch (dayOfWeek) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        case SUNDAY:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            model.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_SUNDAY_PERSONS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        case MONDAY:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            model.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_MONDAY_PERSONS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        case TUESDAY:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            model.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_TUESDAY_PERSONS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        case WEDNESDAY:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            model.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_WEDNESDAY_PERSONS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        case THURSDAY:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            model.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_THURSDAY_PERSONS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        case FRIDAY:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            model.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_FRIDAY_PERSONS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        case SATURDAY:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            model.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_SATURDAY_PERSONS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            model.updateFilteredPersonList(person -\u003e false);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        if (model.getFilteredPersonList().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_NO_EMPLOYEE, tmrDate.getDayOfWeek()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, model.getFilteredPersonList().size(),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                tmrDate.getDayOfWeek()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"c-find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 1,
      "-": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ACTIVE_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"c-list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_ACTIVE_PERSONS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 3,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SalesFindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Persdre"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Persdre"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Persdre"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Persdre"
        },
        "content": "import seedu.address.model.InputContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Persdre"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Persdre"
        },
        "content": "public class SalesFindCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"s-find\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds the sales of the drinks as entered. \\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            + \"Parameters: keywords, where keywords refer to the drink abbreviation. \\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + \"BSBBT\" + \", \" + COMMAND_WORD + \" \" + \"BSBM\" + \" \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            + \"BSBGT\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Here is the drink and its sales data: \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    public static final String MESSAGE_NO_RECORD_SUCCESS \u003d \"This drink is not in the sales list. Use \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            + SalesListCommand.COMMAND_WORD + \" to see the sales list.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    private final InputContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    public SalesFindCommand(InputContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assert model !\u003d null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        model.updateFilteredSalesList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                String.format(Messages.MESSAGE_DRINKS_LISTED_OVERVIEW, model.getFilteredSalesRecordList().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Persdre"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Persdre": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SalesListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Persdre"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_SALES_RECORD_ENTRY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " * Lists the sales of the drink items that has been recorded by the app."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "public class SalesListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"s-list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists the sales of the drinks as entered.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            + \"Parameters: There are no parameters.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed the sales that has been recorded.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public static final String MESSAGE_NO_RECORD_SUCCESS \u003d \"You have not recorded any sales yet. Use \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            + SalesUpdateCommand.COMMAND_WORD + \" to update the sales record.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // TODO: with UI need to update model with the salesBook ui"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        if (model.isEmptySalesBook()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            return new CommandResult(MESSAGE_NO_RECORD_SUCCESS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            model.updateFilteredSalesList(PREDICATE_SHOW_ALL_SALES_RECORD_ENTRY);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 41,
      "yanbingtao": 1,
      "Persdre": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SalesUpdateCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BSBM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BSPM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import seedu.address.model.Drink;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " * Updates the sales of the drink items provided by the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "public class SalesUpdateCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"s-update\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Updates the sales of the drinks as entered. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            + \"Existing sales record will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            + \"Parameters: A/NUM B/NUM ... where A, B refers to the drink abbreviation. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            + \"You must record the sales of at least one item, as a non-negative unsigned integer.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_BSBM + \"100\" + \" \" + PREFIX_BSPM + \"0\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Added sales to the record. You may use \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            + SalesListCommand.COMMAND_WORD + \" to check the current record.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    private final Map\u003cDrink, Integer\u003e sales;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public SalesUpdateCommand(Map\u003cDrink, Integer\u003e sales) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        this.sales \u003d sales;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        model.overwrite(sales);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        if (!(other instanceof SalesUpdateCommand)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        SalesUpdateCommand e \u003d (SalesUpdateCommand) other;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return sales.equals(e.sales);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UnarchiveCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.model.person.ArchiveStatus;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " * Unarchives a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "public class UnarchiveCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"c-unarchive\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            + \": Unarchives the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static final String MESSAGE_UNARCHIVE_PERSON_SUCCESS \u003d \"Unarchived Person: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static final String MESSAGE_PERSON_ALREADY_ACTIVE \u003d \"This person is already in the active list!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Constructs an UnarchiveCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param targetIndex the index number shown in the displayed person list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public UnarchiveCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        Person personToUnarchive \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        ArchiveStatus currentStateOfPerson \u003d personToUnarchive.getArchiveStatus();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        if (!currentStateOfPerson.archiveStatus) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_PERSON_ALREADY_ACTIVE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        Person unarchivedPerson \u003d personToUnarchive.unarchive();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        model.setPerson(personToUnarchive, unarchivedPerson);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        model.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_ACTIVE_PERSONS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_UNARCHIVE_PERSON_SUCCESS, personToUnarchive.getName()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                || (other instanceof UnarchiveCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((UnarchiveCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ingredientcommands/IngredientListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "package seedu.address.logic.commands.ingredientcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_INGREDIENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": " * Set the level of one specific ingredient to a specific level."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": "public class IngredientListCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public static final char LINE_SEPARATOR \u003d \u0027\\n\u0027;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"i-list\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists the ingredient levels in tCheck.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"Parameters: There are no parameters.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all ingredients.\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private String ingredientList \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Constructs an Ingredient List command."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public IngredientListCommand() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        model.updateFilteredIngredientList(PREDICATE_SHOW_ALL_INGREDIENTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        if (!(other instanceof IngredientListCommand)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WM71811"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WM71811": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ingredientcommands/IngredientResetAllCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "package seedu.address.logic.commands.ingredientcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ingredient.Amount;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": " * Set the level of one specific ingredient to a specific level."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": "public class IngredientResetAllCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"i-reset-all\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public static final String RESET_AMOUNT \u003d \"0\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Resets all the ingredient levels to zero in tCheck.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"Parameters: There are no parameters.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"All ingredient levels are reset to 0.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public static final String MESSAGE_NO_CHANGE \u003d \"All Ingredient levels are already at 0.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        List\u003cIngredient\u003e lastShownList \u003d model.getFilteredIngredientList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        boolean isNotAlreadyReset \u003d false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        Amount resetAmount \u003d new Amount(RESET_AMOUNT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        for (Ingredient i : lastShownList) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            if (!i.getAmount().equals(resetAmount)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                isNotAlreadyReset \u003d true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        if (!isNotAlreadyReset) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            throw new CommandException(MESSAGE_NO_CHANGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        for (Ingredient i : lastShownList) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            if (!i.getAmount().equals(resetAmount)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                Ingredient updatedIngredient \u003d createResetIngredient(i);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                model.setIngredient(i, updatedIngredient);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private static Ingredient createResetIngredient(Ingredient target) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        assert target !\u003d null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        Amount updatedAmount \u003d new Amount(RESET_AMOUNT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return new Ingredient(target.getIngredientName(), updatedAmount);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        if (!(other instanceof IngredientResetAllCommand)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WM71811"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WM71811": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ingredientcommands/IngredientRestockCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "package seedu.address.logic.commands.ingredientcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": " * Shows the ingredients that have low ingredient levels and need to be restocked."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": "public class IngredientRestockCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public static final char LINE_SEPARATOR \u003d \u0027\\n\u0027;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"i-restock\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists the ingredient\u0027s levels of all ingredient types\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \" that fall below their minimum stock levels and require the user to restock.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"Parameters: There are no parameters.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Here is the list of all ingredients that should be restocked: \\n\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public static final String MESSAGE_NO_NEED_TO_RESTOCK \u003d \"All Ingredients has not fallen below restock levels.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private String ingredientList \u003d \"\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Constructs an Ingredient List command."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public IngredientRestockCommand() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        ArrayList\u003cIngredient\u003e ingredientInShortage \u003d model.findIngredientInShortage();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        int sizeOfList \u003d ingredientInShortage.size();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        if (sizeOfList \u003d\u003d 0) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            throw new CommandException(MESSAGE_NO_NEED_TO_RESTOCK);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        for (Ingredient i : ingredientInShortage) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            ingredientList +\u003d i.toString() + LINE_SEPARATOR;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + ingredientList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        if (!(other instanceof IngredientRestockCommand)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WM71811"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "WM71811": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ingredientcommands/IngredientViewSingleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "package seedu.address.logic.commands.ingredientcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": " * View the level of a single specific ingredient."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": "public class IngredientViewSingleCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"i-view-single\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" : Views a single ingredient level in tCheck.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"Parameters: i/INGREDIENT_NAME\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + PREFIX_INGREDIENT + \"Milk \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Here is the ingredient and its level: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private final IngredientName target;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private final ViewIngredientDescriptor viewIngredientDescriptor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Constructs an IngredientViewSingle command with the given ingredient name."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public IngredientViewSingleCommand(IngredientName target, ViewIngredientDescriptor viewIngredientDescriptor) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        requireNonNull(target);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        requireNonNull(viewIngredientDescriptor);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        this.target \u003d target;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        this.viewIngredientDescriptor \u003d viewIngredientDescriptor;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        Ingredient ingredientToView;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        ingredientToView \u003d model.findIngredientByName(target);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, ingredientToView));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        if (!(other instanceof IngredientViewSingleCommand)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        IngredientViewSingleCommand e \u003d (IngredientViewSingleCommand) other;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return target.equals(e.target)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                \u0026\u0026 viewIngredientDescriptor.equals(e.viewIngredientDescriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public static class ViewIngredientDescriptor {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        private IngredientName ingredientName;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        public ViewIngredientDescriptor(){}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WM71811"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WM71811"
        },
        "content": "         */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        public ViewIngredientDescriptor(ViewIngredientDescriptor toCopy) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        public Optional\u003cIngredientName\u003e getIngredientName() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            return Optional.ofNullable(ingredientName);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            if (!(other instanceof SetCommand.SetIngredientDescriptor)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            IngredientViewSingleCommand.ViewIngredientDescriptor e \u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                    (IngredientViewSingleCommand.ViewIngredientDescriptor) other;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            return getIngredientName().equals(e.getIngredientName());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WM71811"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "WM71811": 109
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ingredientcommands/SetAllCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "package seedu.address.logic.commands.ingredientcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BLACK_TEA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BOBA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BROWN_SUGAR;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GREEN_TEA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MILK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PEARL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.IngredientBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ReadOnlyIngredientBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.Amount;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": " * Set all ingredients in the ingredient book to different specified amounts."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "public class SetAllCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"i-set-all\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public static final String LINE_SEPARATOR \u003d \"\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sets all ingredients to specified amounts \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            + \"in the ingredient book. \" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            + \"Parameters: \" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            + PREFIX_MILK + \"AMOUNT_FOR_MILK \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            + PREFIX_PEARL + \"AMOUNT_FOR_PEARL \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            + PREFIX_BOBA + \"AMOUNT_FOR_BOBA \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            + PREFIX_BLACK_TEA + \"AMOUNT_FOR_BLACK_TEA \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            + PREFIX_GREEN_TEA + \"AMOUNT_FOR_GREEN_TEA \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            + PREFIX_BROWN_SUGAR + \"AMOUNT_FOR_BROWN_SUGAR \" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            + PREFIX_MILK + \"90 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            + PREFIX_PEARL + \"90 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            + PREFIX_BOBA + \"30 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            + PREFIX_BLACK_TEA + \"40 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            + PREFIX_GREEN_TEA + \"30 \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            + PREFIX_BROWN_SUGAR + \"10\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public static final String MESSAGE_NO_CHANGE \u003d \"All ingredients have already been set to the specified amounts.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Ingredient book has been set : %1$s\\n\" + LINE_SEPARATOR;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private final Amount milkAmount;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private final Amount pearlAmount;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private final Amount bobaAmount;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private final Amount blackTeaAmount;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private final Amount greenTeaAmount;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private final Amount brownSugarAmount;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * Constructs a set all command with the given amounts for all different ingredients."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public SetAllCommand(Amount milkAmount, Amount pearlAmount, Amount bobaAmount,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                         Amount blackTeaAmount, Amount greenTeaAmount, Amount brownSugarAmount) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        requireAllNonNull(milkAmount, pearlAmount, bobaAmount, blackTeaAmount, greenTeaAmount, brownSugarAmount);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        this.milkAmount \u003d milkAmount;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        this.pearlAmount \u003d pearlAmount;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        this.bobaAmount \u003d bobaAmount;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        this.blackTeaAmount \u003d blackTeaAmount;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        this.greenTeaAmount \u003d greenTeaAmount;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        this.brownSugarAmount \u003d brownSugarAmount;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        List\u003cIngredient\u003e lastShownList \u003d model.getFilteredIngredientList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        IngredientBook toSet \u003d new IngredientBook();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        IngredientBook filledBook \u003d executeHelper(toSet);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        boolean isNoChange \u003d false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        int checker \u003d 0;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        for (int i \u003d 0; i \u003c lastShownList.size(); i++) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            IngredientName currentName \u003d lastShownList.get(i).getIngredientName();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            if (currentName.equals(new IngredientName(\"Milk\"))"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                    \u0026\u0026 lastShownList.get(i).getAmount().equals(milkAmount)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                checker++;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            } else if (currentName.equals(new IngredientName(\"Pearl\"))"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                    \u0026\u0026 lastShownList.get(i).getAmount().equals(pearlAmount)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                checker++;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            } else if (currentName.equals(new IngredientName(\"Boba\"))"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                    \u0026\u0026 lastShownList.get(i).getAmount().equals(bobaAmount)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                checker++;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            } else if (currentName.equals(new IngredientName(\"Black Tea\"))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                    \u0026\u0026 lastShownList.get(i).getAmount().equals(blackTeaAmount)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                checker++;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            } else if (currentName.equals(new IngredientName(\"Green Tea\"))"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                \u0026\u0026 lastShownList.get(i).getAmount().equals(greenTeaAmount)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                checker++;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            } else if (currentName.equals(new IngredientName(\"Brown Sugar\"))"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                    \u0026\u0026 lastShownList.get(i).getAmount().equals(brownSugarAmount)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                checker++;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            if (checker \u003d\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                isNoChange \u003d true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        if (isNoChange) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            throw new CommandException(MESSAGE_NO_CHANGE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        List\u003cIngredient\u003e replacementIngredients \u003d new ArrayList\u003c\u003e(lastShownList.size());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        replacementIngredients.add(new Ingredient(new IngredientName(\"Milk\"), milkAmount));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        replacementIngredients.add(new Ingredient(new IngredientName(\"Pearl\"), pearlAmount));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        replacementIngredients.add(new Ingredient(new IngredientName(\"Boba\"), bobaAmount));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        replacementIngredients.add(new Ingredient(new IngredientName(\"Black Tea\"), blackTeaAmount));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        replacementIngredients.add(new Ingredient(new IngredientName(\"Green Tea\"), greenTeaAmount));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        replacementIngredients.add(new Ingredient(new IngredientName(\"Brown Sugar\"), brownSugarAmount));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        filledBook.setIngredients(replacementIngredients);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        ReadOnlyIngredientBook readOnlyFilledBook \u003d filledBook;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        model.setIngredientBook(readOnlyFilledBook);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        model.updateFilteredIngredientList(Model.PREDICATE_SHOW_ALL_INGREDIENTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, filledBook));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private static IngredientBook executeHelper(IngredientBook tempBook) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        tempBook.addIngredient(new Ingredient(new IngredientName(\"Milk\")));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        tempBook.addIngredient(new Ingredient(new IngredientName(\"Pearl\")));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        tempBook.addIngredient(new Ingredient(new IngredientName(\"Boba\")));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        tempBook.addIngredient(new Ingredient(new IngredientName(\"Black Tea\")));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        tempBook.addIngredient(new Ingredient(new IngredientName(\"Green Tea\")));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        tempBook.addIngredient(new Ingredient(new IngredientName(\"Brown Sugar\")));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return tempBook;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        if (!(other instanceof SetAllCommand)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        SetAllCommand e \u003d (SetAllCommand) other;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return milkAmount.equals(e.milkAmount)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                \u0026\u0026 pearlAmount.equals(e.pearlAmount)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                \u0026\u0026 bobaAmount.equals(e.bobaAmount)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                \u0026\u0026 blackTeaAmount.equals(e.blackTeaAmount)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                \u0026\u0026 greenTeaAmount.equals(e.greenTeaAmount)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                \u0026\u0026 brownSugarAmount.equals(e.brownSugarAmount);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 167
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ingredientcommands/SetCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "package seedu.address.logic.commands.ingredientcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_INGREDIENTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.Amount;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": " * Set the level of one specific ingredient to a specific level."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "public class SetCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"i-set\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" :set the ingredient in tCheck.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            + PREFIX_INGREDIENT + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            + PREFIX_AMOUNT + \"\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            + PREFIX_INGREDIENT + \"Milk \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            + PREFIX_AMOUNT + \"90 \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Ingredient set: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public static final String MESSAGE_NO_CHANGE \u003d \"Ingredient level already set.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public static final String MESSAGE_NOT_FOUND \u003d \"Ingredient not found in ingredient book.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private final IngredientName targetName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private final SetIngredientDescriptor setIngredientDescriptor;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * Constructs a set command with the given ingredient name and amount."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public SetCommand(IngredientName targetName, SetIngredientDescriptor setIngredientDescriptor) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        requireNonNull(targetName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        requireNonNull(setIngredientDescriptor);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        this.targetName \u003d targetName;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        this.setIngredientDescriptor \u003d setIngredientDescriptor;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        List\u003cIngredient\u003e lastShownList \u003d model.getFilteredIngredientList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        Ingredient ingredientToEdit \u003d null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        boolean isNoChange \u003d false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        for (Ingredient ingredient : lastShownList) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            if (ingredient.getIngredientName().equals(targetName)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                ingredientToEdit \u003d ingredient;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        if (ingredientToEdit \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_FOUND);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        if (ingredientToEdit.getAmount().equals(setIngredientDescriptor.getAmount().get())) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            isNoChange \u003d true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        Ingredient updatedIngredient \u003d createSetIngredient(ingredientToEdit, setIngredientDescriptor);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        if (isNoChange) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            throw new CommandException(MESSAGE_NO_CHANGE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        model.setIngredient(ingredientToEdit, updatedIngredient);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        model.updateFilteredIngredientList(PREDICATE_SHOW_ALL_INGREDIENTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, updatedIngredient));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private static Ingredient createSetIngredient(Ingredient target,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                                                  SetIngredientDescriptor setIngredientDescriptor) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assert target !\u003d null;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        Amount updatedAmount \u003d setIngredientDescriptor.getAmount().orElse(target.getAmount());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return new Ingredient(target.getIngredientName(), updatedAmount);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        if (!(other instanceof SetCommand)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        SetCommand e \u003d (SetCommand) other;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return targetName.equals(e.targetName)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                \u0026\u0026 setIngredientDescriptor.equals(e.setIngredientDescriptor);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public static class SetIngredientDescriptor {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        private IngredientName ingredientName;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        private Amount amount;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        public SetIngredientDescriptor(){}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "         */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        public SetIngredientDescriptor(SetIngredientDescriptor toCopy) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            setAmount(toCopy.amount);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "         */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            return CollectionUtil.isAnyNonNull(amount);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        public void setAmount(Amount amount) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            this.amount \u003d amount;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        public Optional\u003cIngredientName\u003e getIngredientName() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            return Optional.ofNullable(ingredientName);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        public Optional\u003cAmount\u003e getAmount() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            return Optional.ofNullable(amount);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            if (!(other instanceof SetCommand.SetIngredientDescriptor)) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            SetCommand.SetIngredientDescriptor e \u003d (SetCommand.SetIngredientDescriptor) other;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            return getIngredientName().equals(e.getIngredientName())"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                    \u0026\u0026 getAmount().equals(e.getAmount());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 163
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ingredientcommands/SetDefaultCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "package seedu.address.logic.commands.ingredientcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.IngredientBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ReadOnlyIngredientBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.Amount;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": " * Set the ingredient to the default levels."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "public class SetDefaultCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public static final String LINE_SEPARATOR \u003d \"\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"i-set-default\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"All ingredients have been set to the default level:\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            + LINE_SEPARATOR"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            + \"Milk : 50 L\\n\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            + \"Pearl : 20 KG\\n\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            + \"Boba : 20 KG\\n\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            + \"Black Tea : 50 L\\n\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            + \"Green Tea : 50 L\\n\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            + \"Brown Sugar : 20 KG\\n\" + LINE_SEPARATOR;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        IngredientBook defaultIngredientBook \u003d new IngredientBook();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        IngredientBook filledBook \u003d executeHelper(defaultIngredientBook);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        filledBook.setIngredient(new Ingredient(new IngredientName(\"Milk\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new Ingredient(new IngredientName(\"Milk\"), new Amount(\"50\")));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        filledBook.setIngredient(new Ingredient(new IngredientName(\"Pearl\")),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new Ingredient(new IngredientName(\"Pearl\"), new Amount(\"20\")));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        filledBook.setIngredient(new Ingredient(new IngredientName(\"Boba\")),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new Ingredient(new IngredientName(\"Boba\"), new Amount(\"20\")));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        filledBook.setIngredient(new Ingredient(new IngredientName(\"Black Tea\")),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new Ingredient(new IngredientName(\"Black Tea\"), new Amount(\"50\")));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        filledBook.setIngredient(new Ingredient(new IngredientName(\"Green Tea\")),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new Ingredient(new IngredientName(\"Green Tea\"), new Amount(\"50\")));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        filledBook.setIngredient(new Ingredient(new IngredientName(\"Brown Sugar\")),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new Ingredient(new IngredientName(\"Brown Sugar\"), new Amount(\"20\")));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        ReadOnlyIngredientBook defaultReadOnlyFilledBook \u003d filledBook;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        model.setIngredientBook(defaultReadOnlyFilledBook);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        model.updateFilteredIngredientList(Model.PREDICATE_SHOW_ALL_INGREDIENTS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private static IngredientBook executeHelper(IngredientBook tempBook) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        tempBook.addIngredient(new Ingredient(new IngredientName(\"Milk\")));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        tempBook.addIngredient(new Ingredient(new IngredientName(\"Pearl\")));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        tempBook.addIngredient(new Ingredient(new IngredientName(\"Boba\")));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        tempBook.addIngredient(new Ingredient(new IngredientName(\"Black Tea\")));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        tempBook.addIngredient(new Ingredient(new IngredientName(\"Green Tea\")));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        tempBook.addIngredient(new Ingredient(new IngredientName(\"Brown Sugar\")));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return tempBook;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Persdre"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMERGENCY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.model.person.ArchiveStatus;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMERGENCY,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                        PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMERGENCY)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        Phone emergency \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_EMERGENCY).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        ArchiveStatus archiveStatus \u003d new ArchiveStatus(false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        Person person \u003d new Person(name, phone, emergency, address, archiveStatus, tagList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 2,
      "-": 53,
      "Persdre": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.logic.commands.ArchiveAllCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.logic.commands.ArchiveCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.logic.commands.ArchiveListCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.logic.commands.FindByTagCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.logic.commands.FindByTagTodayCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.logic.commands.FindByTagTomorrowCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Persdre"
        },
        "content": "import seedu.address.logic.commands.SalesFindCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import seedu.address.logic.commands.SalesListCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import seedu.address.logic.commands.SalesUpdateCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.logic.commands.UnarchiveCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.logic.commands.ingredientcommands.IngredientListCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.logic.commands.ingredientcommands.IngredientResetAllCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.logic.commands.ingredientcommands.IngredientRestockCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.logic.commands.ingredientcommands.IngredientViewSingleCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.logic.commands.ingredientcommands.SetAllCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.logic.commands.ingredientcommands.SetCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.logic.commands.ingredientcommands.SetDefaultCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        case ArchiveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            return new ArchiveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        case UnarchiveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            return new UnarchiveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        case ArchiveListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            return new ArchiveListCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        case ArchiveAllCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            return new ArchiveAllCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        case FindByTagTodayCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            return new FindByTagTodayCommand();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        case FindByTagTomorrowCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            return new FindByTagTomorrowCommand();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        case FindByTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            return new TagFindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        case SetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            return new SetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        case IngredientViewSingleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            return new IngredientViewSingleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        case IngredientListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            return new IngredientListCommand();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        case SetAllCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            return new SetAllCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        case SetDefaultCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            return new SetDefaultCommand();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        case IngredientResetAllCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            return new IngredientResetAllCommand();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        case IngredientRestockCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            return new IngredientRestockCommand();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        case SalesUpdateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            return new SalesUpdateCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        case SalesListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            return new SalesListCommand();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        case SalesFindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            return new SalesFindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 7,
      "Diwu-Yi": 12,
      "yanbingtao": 29,
      "WM71811": 18,
      "-": 76,
      "Persdre": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArchiveCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.logic.commands.ArchiveCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " * Parses input arguments and creates a new ArchiveCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "public class ArchiveCommandParser implements Parser\u003cArchiveCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ArchiveCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * and returns a ArchiveCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public ArchiveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            return new ArchiveCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ArchiveCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    /* Prefix definitions for contacts */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    public static final Prefix PREFIX_EMERGENCY \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    /* Prefix definitions for ingredients */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public static final Prefix PREFIX_INGREDIENT \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public static final Prefix PREFIX_AMOUNT \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public static final Prefix PREFIX_MILK \u003d new Prefix(\"M/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public static final Prefix PREFIX_PEARL \u003d new Prefix(\"P/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public static final Prefix PREFIX_BOBA \u003d new Prefix(\"B/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public static final Prefix PREFIX_BLACK_TEA \u003d new Prefix(\"L/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public static final Prefix PREFIX_GREEN_TEA \u003d new Prefix(\"G/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public static final Prefix PREFIX_BROWN_SUGAR \u003d new Prefix(\"S/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    /* Prefix definitions for drinks */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public static final Prefix PREFIX_BSBM \u003d new Prefix(\"BSBM/\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public static final Prefix PREFIX_BSBBT \u003d new Prefix(\"BSBBT/\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public static final Prefix PREFIX_BSBGT \u003d new Prefix(\"BSBGT/\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public static final Prefix PREFIX_BSPM \u003d new Prefix(\"BSPM/\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public static final Prefix PREFIX_BSPBT \u003d new Prefix(\"BSPBT/\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public static final Prefix PREFIX_BSPGT \u003d new Prefix(\"BSPGT/\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 7,
      "Diwu-Yi": 11,
      "-": 14,
      "Persdre": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Persdre"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMERGENCY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                        PREFIX_EMERGENCY, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMERGENCY).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            editPersonDescriptor.setEmergency(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_EMERGENCY).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 78,
      "Persdre": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/IngredientViewSingleCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.logic.commands.ingredientcommands.IngredientViewSingleCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": " * Parses input arguments and creates a new {@code IngredientViewSingleCommand} object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": "public class IngredientViewSingleCommandParser implements Parser\u003cIngredientViewSingleCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code IngredientViewSingleCommand}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * and returns a {@code IngredientViewSingleCommand} object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public IngredientViewSingleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_INGREDIENT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_INGREDIENT)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                    IngredientViewSingleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        Ingredient ingredientToView \u003d ParserUtil.parseIngredient(argMultimap.getValue(PREFIX_INGREDIENT).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        IngredientViewSingleCommand.ViewIngredientDescriptor descriptor \u003d new"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                IngredientViewSingleCommand.ViewIngredientDescriptor();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        IngredientName ingredientName \u003d ingredientToView.getIngredientName();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return new IngredientViewSingleCommand(ingredientName, descriptor);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WM71811"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "WM71811": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.Amount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public static final String MESSAGE_INVALID_AMOUNT \u003d \"Amount has to be a non-negative integer.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public static final String MESSAGE_INVALID_INGREDIENT_NAME \u003d \"The ingredient is not found, it \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            + \"has to be chosen from : \" + Arrays.toString(IngredientName.INGREDIENTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public static final String MESSAGE_INVALID_NUMBER_SOLD \u003d \"The entered number of drinks sold should be a \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            + \"non-negative integer.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * Parse a string representing amount into an amount."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public static Amount parseAmount(String amount) throws ParseException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        String trimmedAmount \u003d amount.trim();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedAmount)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_AMOUNT);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return new Amount(trimmedAmount);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * Parse a string representing ingredient into an ingredient name."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public static IngredientName parseIngredientName(String ingredient) throws ParseException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        requireNonNull(ingredient);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        String trimmedIngredient \u003d ingredient.trim();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        if (!IngredientName.isValidIngredientName(trimmedIngredient)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INGREDIENT_NAME);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return new IngredientName(trimmedIngredient);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * Parse a string representing ingredient into an ingredient."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public static Ingredient parseIngredient(String ingredient) throws ParseException {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        requireNonNull(ingredient);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        String trimmedIngredient \u003d ingredient.trim();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        if (!IngredientName.isValidIngredientName(trimmedIngredient)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INGREDIENT_NAME);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return new Ingredient(new IngredientName(trimmedIngredient));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Parses a {@code String numberSold} into an {@code Integer}."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @throws ParseException if the given {@code numberSold} is invalid."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public static Integer parseNumberSold(String numberSold) throws ParseException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        requireNonNull(numberSold);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        String trimmedNumberSold \u003d numberSold.trim();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        if (!StringUtil.isUnsignedInteger(trimmedNumberSold)) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_NUMBER_SOLD);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return Integer.parseInt(trimmedNumberSold);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 17,
      "Diwu-Yi": 43,
      "-": 109
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SalesFindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Persdre"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Persdre"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Persdre"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Persdre"
        },
        "content": "import seedu.address.logic.commands.SalesFindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Persdre"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Persdre"
        },
        "content": "import seedu.address.model.InputContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Persdre"
        },
        "content": "public class SalesFindCommandParser implements Parser\u003cSalesFindCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Persdre"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SalesFindCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Persdre"
        },
        "content": "     * and returns a SalesFindCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Persdre"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Persdre"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    public SalesFindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SalesFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        return new SalesFindCommand(new InputContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Persdre"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Persdre": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SalesUpdateCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BSBBT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BSBGT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BSBM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BSPBT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BSPGT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BSPM;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import seedu.address.logic.commands.SalesUpdateCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import seedu.address.model.Drink;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " * Parses input arguments and creates a new SalesUpdateCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "public class SalesUpdateCommandParser implements Parser\u003cSalesUpdateCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SalesUpdateCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * and returns a SalesUpdateCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * The default value is 0 for drink items which the user did not provide the input."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param args user input to parse"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @return a SalesUpdateCommand object for execution"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public SalesUpdateCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        Prefix[] drinkPrefixes \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                new Prefix[] {PREFIX_BSBM, PREFIX_BSBBT, PREFIX_BSBGT, PREFIX_BSPM, PREFIX_BSPBT, PREFIX_BSPGT};"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, drinkPrefixes);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, drinkPrefixes) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SalesUpdateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        HashMap\u003cDrink, Integer\u003e sales \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // populate the map with argmultimap\u0027s values"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        for (int i \u003d 0; i \u003c drinkPrefixes.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            Drink drink \u003d Drink.valueOf(drinkPrefixes[i].toString().replace(\"/\", \"\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            if (argMultimap.getValue(drinkPrefixes[i]).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                int val \u003d ParserUtil.parseNumberSold(argMultimap.getValue(drinkPrefixes[i]).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                sales.put(drink, val);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assert !sales.isEmpty();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return new SalesUpdateCommand(sales);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Returns true if some of the prefixes contains non-empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SetAllCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BLACK_TEA;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BOBA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BROWN_SUGAR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GREEN_TEA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MILK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PEARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.logic.commands.ingredientcommands.SetAllCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.Amount;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "public class SetAllCommandParser implements Parser\u003cSetAllCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SetAllCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * and returns an SetAllCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public SetAllCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MILK, PREFIX_PEARL,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                        PREFIX_BOBA, PREFIX_BLACK_TEA, PREFIX_GREEN_TEA, PREFIX_BROWN_SUGAR);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MILK, PREFIX_PEARL, PREFIX_BOBA,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                PREFIX_BLACK_TEA, PREFIX_GREEN_TEA, PREFIX_BROWN_SUGAR)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetAllCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        Amount milkAmount \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_MILK).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        Amount pearlAmount \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_PEARL).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        Amount bobaAmount \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_BOBA).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        Amount blackTeaAmount \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_BLACK_TEA).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        Amount greenTeaAmount \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_GREEN_TEA).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        Amount brownSugarAmount \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_BROWN_SUGAR).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return new SetAllCommand(milkAmount, pearlAmount, bobaAmount, blackTeaAmount, greenTeaAmount, brownSugarAmount);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SetCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.logic.commands.ingredientcommands.SetCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.logic.commands.ingredientcommands.SetCommand.SetIngredientDescriptor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": " * Parses input arguments and creates a new {@code RemarkCommand} object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "public class SetCommandParser implements Parser\u003cSetCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code RemarkCommand}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * and returns a {@code RemarkCommand} object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public SetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_INGREDIENT, PREFIX_AMOUNT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_INGREDIENT, PREFIX_AMOUNT)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        IngredientName ingredientToSet \u003d ParserUtil.parseIngredientName(argMultimap.getValue(PREFIX_INGREDIENT).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        SetCommand.SetIngredientDescriptor descriptor \u003d new SetIngredientDescriptor();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AMOUNT).isPresent()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            descriptor.setAmount(ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        if (!descriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            throw new ParseException(SetCommand.MESSAGE_NO_CHANGE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return new SetCommand(ingredientToSet, descriptor);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/TagFindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.logic.commands.FindByTagCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.model.person.TagContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "public class TagFindCommandParser implements Parser\u003cFindByTagCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public FindByTagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindByTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        String[] tagKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return new FindByTagCommand(new TagContainsKeywordsPredicate(Arrays.asList(tagKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/UnarchiveCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.logic.commands.UnarchiveCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " * Parses input arguments and creates a new UnarchiveCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "public class UnarchiveCommandParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UnarchiveCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * and returns a UnarchiveCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public UnarchiveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            return new UnarchiveCommand(index);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnarchiveCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public AddressBook() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 4,
      "yanbingtao": 2,
      "-": 120
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Drink.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " * Represents the types of drink items available."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "public enum Drink {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    BSBM (\"Brown Sugar Boba Milk\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    BSBBT (\"Brown Sugar Boba Black Tea\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    BSBGT (\"Brown Sugar Boba Green Tea\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    BSPM (\"Brown Sugar Pearl Milk\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    BSPBT (\"Brown Sugar Pearl Black Tea\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    BSPGT (\"Brown Sugar Pearl Green Tea\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            \"Drink Names should only be chosen from the given list,\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                    + \" and it should not be blank\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    // TODO: drink ingredients?"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    Drink(String name) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public String getShortFormName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        String shortFromName \u003d \"\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        for (int i \u003d 0; i \u003c name.length(); i++) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            if (Character.isUpperCase(name.charAt(i))) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                shortFromName +\u003d name.charAt(i);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return shortFromName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Returns true if the given drink is a valid drink name."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param drinkToTest a given string of drink name"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static boolean isValidDrinkName(String drinkToTest) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        requireNonNull(drinkToTest);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        for (Drink drink : Drink.values()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            if (drink.name().equals(drinkToTest)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Checks if the numberSoldToTest is a number in String format,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * and return true if the number is not less then 0."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param numberSoldToTest numberSoldToTest in String format."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @return true if numberSoldToTest\u0027s value is larger or equals to 0."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static boolean isValidNumberSold(String numberSoldToTest) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        assert numberSoldToTest !\u003d \"\" : \"numberSoldToTest should not be empty\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return Integer.valueOf(numberSoldToTest) \u003e\u003d 0;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 21,
      "yanbingtao": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/model/IngredientBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.UniqueIngredientList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "public class IngredientBook implements ReadOnlyIngredientBook {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private final UniqueIngredientList ingredients;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    *   among constructors."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        ingredients \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public IngredientBook() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Creates an AddressBook using the Ingredients in the {@code toBeCopied}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public IngredientBook(ReadOnlyIngredientBook toBeCopied) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        setData(toBeCopied);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void setIngredients(List\u003cIngredient\u003e ingredients) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        this.ingredients.setIngredients(ingredients);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void setData(ReadOnlyIngredientBook newAmount) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        requireNonNull(newAmount);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        setIngredients(newAmount.getIngredientList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    //// ingredient-level operations"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public boolean hasIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        requireNonNull(ingredient);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return ingredients.contains(ingredient);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void setIngredient(Ingredient target, Ingredient newAmount) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        requireAllNonNull(target, newAmount);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        ingredients.setIngredient(target, newAmount);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Adds an ingredient to the ingredient book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * The ingredient must not already exist in the ingredient book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public void addIngredient(Ingredient p) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        ingredients.add(p);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Returns the ingredient with the input ingredient name, if"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * not found, return null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param ingredientName ingredient name"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @return ingredient with the input ingredient name"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public Ingredient findIngredientByName(IngredientName ingredientName) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        requireNonNull(ingredientName);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return ingredients.findIngredientByName(ingredientName);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Returns an arraylist of ingredients that are in shortage. If"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * no ingredient is in shortage, return an empty arraylist."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @return an arraylist of ingredients that are in shortage"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public ArrayList\u003cIngredient\u003e findIngredientInShortage() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return ingredients.findIngredientInShortage();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        for (int i \u003d 0; i \u003c ingredients.size(); i++) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            builder.append(ingredients.get(i).toString()).append(\"\\n\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return ingredients.asUnmodifiableObservableList().size()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                + \" ingredients \\n\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                + \"\\n\" // line separator"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                + builder;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public ObservableList\u003cIngredient\u003e getIngredientList() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return ingredients.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                || (other instanceof IngredientBook // instanceof handles nulls"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                \u0026\u0026 ingredients.equals(((IngredientBook) other).ingredients));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return ingredients.hashCode();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 102,
      "WM71811": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/model/InputContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Persdre"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Persdre"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Persdre"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Persdre"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Persdre"
        },
        "content": "public class InputContainsKeywordsPredicate implements Predicate\u003cSalesRecordEntry\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    public InputContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    public boolean test(SalesRecordEntry salesRecordEntry) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(salesRecordEntry.getDrink().getShortFormName(),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                        keyword));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                || (other instanceof InputContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                \u0026\u0026 keywords.equals(((InputContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Persdre"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Persdre": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /** {@code Predicate} that evaluates to true if person\u0027s archive status is false. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_ACTIVE_PERSONS \u003d person -\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            !(person.getArchiveStatus().archiveStatus);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /** {@code Predicate} that evaluates to true if person\u0027s archive status is true. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_ARCHIVED_PERSONS \u003d person -\u003e ("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            person.getArchiveStatus().archiveStatus);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_MONDAY_PERSONS \u003d person -\u003e ("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            person.getTags().toString().toLowerCase().contains(\"monday\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_TUESDAY_PERSONS \u003d person -\u003e ("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            person.getTags().toString().toLowerCase().contains(\"tuesday\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_WEDNESDAY_PERSONS \u003d person -\u003e ("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            person.getTags().toString().toLowerCase().contains(\"wednesday\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_THURSDAY_PERSONS \u003d person -\u003e ("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            person.getTags().toString().toLowerCase().contains(\"thursday\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_FRIDAY_PERSONS \u003d person -\u003e ("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            person.getTags().toString().toLowerCase().contains(\"friday\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_SATURDAY_PERSONS \u003d person -\u003e ("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            person.getTags().toString().toLowerCase().contains(\"saturday\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_SUNDAY_PERSONS \u003d person -\u003e ("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            person.getTags().toString().toLowerCase().contains(\"sunday\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    Predicate\u003cIngredient\u003e PREDICATE_SHOW_ALL_INGREDIENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    Predicate\u003cSalesRecordEntry\u003e PREDICATE_SHOW_ALL_SALES_RECORD_ENTRY \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Returns the user prefs\u0027 sales book file path."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    Path getSalesBookFilePath();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Returns the user prefs\u0027 ingredient book file path."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    Path getIngredientBookFilePath();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Sets the user prefs\u0027 sales book file path."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    void setSalesBookFilePath(Path salesBookFilePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Sets the user prefs\u0027 ingredient book file path."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    void setIngredientBookFilePath(Path ingredientBookFilePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * Replaces ingredient book data with the data in {@code ingredientBook}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    void setIngredientBook(ReadOnlyIngredientBook ingredientBook);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * Returns the AddressBook"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * Returns the IngredientBook"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    ReadOnlyIngredientBook getIngredientBook();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    boolean hasIngredient(Ingredient ingredient);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Adds an SalesRecordEntry to the Salesbook."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    void addSalesRecordEntry(SalesRecordEntry salesRecordEntry);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Adds an ingredient to the ingredient book."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * The ingredient must not already exist in the ingredient book."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public void addIngredient(Ingredient ingredient);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    void setIngredient(Ingredient target, Ingredient newAmount);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    Ingredient findIngredientByName(IngredientName ingredientName);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Persdre"
        },
        "content": "     * Returns an ArrayList of ingredients that are in shortage. If"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Persdre"
        },
        "content": "     * no ingredient is in shortage, return an empty ArrayList."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Persdre"
        },
        "content": "     *"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Persdre"
        },
        "content": "     * @return an ArrayList of ingredients that are in shortage"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Persdre"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    ArrayList\u003cIngredient\u003e findIngredientInShortage();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    void setSalesBook(ReadOnlySalesBook salesBook);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    SalesBook getSalesBook();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    boolean isEmptySalesBook();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    void overwrite(Map\u003cDrink, Integer\u003e salesInput);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * Returns an unmodifiable view of the filtered ingredient list"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    ObservableList\u003cIngredient\u003e getFilteredIngredientList();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Returns an unmodifiable view of the sales record list"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    ObservableList\u003cSalesRecordEntry\u003e getFilteredSalesRecordList();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Updates the filter of the filtered sales list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    void updateFilteredSalesList(Predicate\u003cSalesRecordEntry\u003e predicate);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Updates the filter of the filtered ingredient list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    void updateFilteredIngredientList(Predicate\u003cIngredient\u003e predicate);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 18,
      "Diwu-Yi": 26,
      "yanbingtao": 44,
      "WM71811": 27,
      "-": 84,
      "Persdre": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    private final SalesBook salesBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private final IngredientBook ingredientBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private final FilteredList\u003cIngredient\u003e filteredIngredients;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    private final FilteredList\u003cSalesRecordEntry\u003e filteredSalesRecordList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlySalesBook salesBook,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                        ReadOnlyIngredientBook ingredientBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        requireAllNonNull(addressBook, salesBook, userPrefs);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \" sales book: \" + salesBook"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                + \" Ingredients book: \" + ingredientBook"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                + \" and user prefs\" + \" \" + userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        this.salesBook \u003d new SalesBook(salesBook);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        this.ingredientBook \u003d new IngredientBook(ingredientBook);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                Model.PREDICATE_SHOW_ALL_ACTIVE_PERSONS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        filteredIngredients \u003d new FilteredList\u003c\u003e(this.ingredientBook.getIngredientList(),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                Model.PREDICATE_SHOW_ALL_INGREDIENTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        filteredSalesRecordList \u003d new FilteredList\u003c\u003e(this.salesBook.getSalesRecord(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                Model.PREDICATE_SHOW_ALL_SALES_RECORD_ENTRY);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        this(new AddressBook(), new SalesBook(),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new IngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public Path getSalesBookFilePath() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return userPrefs.getSalesBookFilePath();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public Path getIngredientBookFilePath() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return userPrefs.getIngredientBookFilePath();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public void setSalesBookFilePath(Path salesBookFilePath) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        requireNonNull(salesBookFilePath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        userPrefs.setSalesBookFilePath(salesBookFilePath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public void setIngredientBookFilePath(Path ingredientBookFilePath) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        requireNonNull(ingredientBookFilePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        userPrefs.setIngredientBookFilePath(ingredientBookFilePath);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void setIngredientBook(ReadOnlyIngredientBook ingredientBook) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        this.ingredientBook.setData(ingredientBook);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public ReadOnlyIngredientBook getIngredientBook() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return ingredientBook;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.hasPerson(person);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    //Added here"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public boolean hasIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        requireNonNull(ingredient);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return ingredientBook.hasIngredient(ingredient);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_ACTIVE_PERSONS);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d SalesBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void setSalesBook(ReadOnlySalesBook salesBook) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        this.salesBook.resetData(salesBook);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public SalesBook getSalesBook() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return salesBook;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public boolean isEmptySalesBook() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return salesBook.isEmptySalesRecord();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void overwrite(Map\u003cDrink, Integer\u003e salesInput) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        salesBook.overwriteSales(salesInput);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public void addSalesRecordEntry(SalesRecordEntry salesRecordEntry) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        salesBook.addSalesRecordEntry(salesRecordEntry);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        updateFilteredSalesList(PREDICATE_SHOW_ALL_SALES_RECORD_ENTRY);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d IngredientBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void setIngredient(Ingredient target, Ingredient newAmount) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        requireAllNonNull(target, newAmount);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        ingredientBook.setIngredient(target, newAmount);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public Ingredient findIngredientByName(IngredientName ingredientName) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        requireNonNull(ingredientName);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return ingredientBook.findIngredientByName(ingredientName);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public void addIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        ingredientBook.addIngredient(ingredient);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        updateFilteredIngredientList(PREDICATE_SHOW_ALL_INGREDIENTS);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Returns an ArrayList of ingredients that are in shortage. If"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * no ingredient is in shortage, return an empty ArrayList."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @return an ArrayList of ingredients that are in shortage"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public ArrayList\u003cIngredient\u003e findIngredientInShortage() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return ingredientBook.findIngredientInShortage();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Ingredient} backed by the internal list of"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public ObservableList\u003cIngredient\u003e getFilteredIngredientList() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return filteredIngredients;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public ObservableList\u003cSalesRecordEntry\u003e getFilteredSalesRecordList() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return filteredSalesRecordList;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public void updateFilteredSalesList(Predicate\u003cSalesRecordEntry\u003e predicate) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        filteredSalesRecordList.setPredicate(predicate);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public void updateFilteredIngredientList(Predicate\u003cIngredient\u003e predicate) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        filteredIngredients.setPredicate(predicate);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                \u0026\u0026 salesBook.equals(other.salesBook)"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                \u0026\u0026 ingredientBook.equals(other.ingredientBook)"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 39,
      "Diwu-Yi": 46,
      "yanbingtao": 27,
      "WM71811": 46,
      "-": 145
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyIngredientBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": " * Unmodifiable view of an ingredient book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "public interface ReadOnlyIngredientBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Returns an unmodifiable view of the ingredients list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * This list will not contain any duplicate ingredients."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    ObservableList\u003cIngredient\u003e getIngredientList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 8,
      "WM71811": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlySalesBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " * Unmodifiable view of a sales book"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "public interface ReadOnlySalesBook {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Returns an unmodifiable view of the list of sales records."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * This map will not contain any duplicate drink items."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    ObservableList\u003cSalesRecordEntry\u003e getSalesRecord();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    Path getSalesBookFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    Path getIngredientBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 2,
      "WM71811": 2,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/SalesBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " * Wraps all data related to drink sales at the sales-book level"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " * Fixed Drink types."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "public class SalesBook implements ReadOnlySalesBook {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    private UniqueSalesRecordList record;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(SalesBook.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public SalesBook() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        record \u003d new UniqueSalesRecordList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Creates a SalesBook using the record in {@code toBeCopied}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param toBeCopied the SalesBook to be copied from"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public SalesBook(ReadOnlySalesBook toBeCopied) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Resets the existing data of this {@code SalesBook} with {@code newData}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void resetData(ReadOnlySalesBook newData) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        setRecord(newData.getSalesRecord());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Replaces the contents of the sales record list with {@code sales}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * {@code sales} must not contain duplicate sales record entries."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void setRecord(List\u003cSalesRecordEntry\u003e sales) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        requireNonNull(sales);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        record.setSalesRecord(sales);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Adds a salesRecordEntry to the salesBook."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public void addSalesRecordEntry(SalesRecordEntry p) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        record.add(p);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Returns true if a salesRecordEntry with the same identity as {@code salesRecordEntry} exists in the record."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public boolean hasSalesRecordEntry(SalesRecordEntry salesRecordEntry) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        requireNonNull(salesRecordEntry);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return record.contains(salesRecordEntry);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public UniqueSalesRecordList getRecord() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return record;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Overwrites existing sales record based on the sales information which is provided as a Map."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * If there was no existing sales record, then it will initialise the number sold of the"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * drink items, that the user did not provide, to 0."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param sales sales information that has been parsed."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void overwriteSales(Map\u003cDrink, Integer\u003e sales) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        requireNonNull(sales);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assert !sales.isEmpty();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        logger.fine(\"SalesBook is being overwritten with the new user input.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        HashMap\u003cDrink, Integer\u003e newRecord \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        for (Drink key : Drink.values()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            Optional\u003cInteger\u003e userInput \u003d Optional.ofNullable(sales.get(key));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            Integer toReplace \u003d 0;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            if (!isEmptySalesRecord()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                toReplace \u003d record.getSalesEntry(key).getNumberSold();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            Integer changedValue \u003d userInput.orElse(toReplace);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            newRecord.put(key, changedValue);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        record.setSalesRecord(newRecord);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assert !record.isEmpty();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Checks whether the sales record is empty."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @return true if the sales record is empty, false otherwise."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public boolean isEmptySalesRecord() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return record.isEmpty();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Returns an unmodifiable view of the list of sales records."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * This map will not contain any duplicate drink items."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public ObservableList\u003cSalesRecordEntry\u003e getSalesRecord() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return record.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        StringBuilder display \u003d new StringBuilder();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        record.forEach(x -\u003e display.append(x + \"\\n\"));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return display.toString();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                || (other instanceof SalesBook // instanceof handles nulls"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                \u0026\u0026 record.equals(((SalesBook) other).record));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return record.hashCode();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 127,
      "yanbingtao": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/SalesRecordEntry.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " * Represents a SalesRecordEntry in the sales book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "public class SalesRecordEntry {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    private final Drink drink;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    private final int numberSold;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Creates a SalesRecordEntry which records the number of {@Code drink} sold."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param drink the type of Drink"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param numberSold the number of drink sold"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public SalesRecordEntry(Drink drink, int numberSold) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        this.drink \u003d drink;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        this.numberSold \u003d numberSold;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public Drink getDrink() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return drink;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public int getNumberSold() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return numberSold;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * A record entry is the same as another record entry if they record the same Drink item."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param otherEntry the other record entry to compare to"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @return true if they record the same Drink item, and false otherwise"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public boolean isSameRecord(SalesRecordEntry otherEntry) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        if (otherEntry \u003d\u003d this) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return this.drink.equals(otherEntry.drink);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return drink.getName() + \" (\" + drink + \") : \" + numberSold;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        if (!(other instanceof SalesRecordEntry)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        SalesRecordEntry otherEntry \u003d (SalesRecordEntry) other;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return otherEntry.drink.equals(drink)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                \u0026\u0026 otherEntry.numberSold \u003d\u003d numberSold;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return Objects.hash(drink, numberSold);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UniqueSalesRecordList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import seedu.address.model.sales.exception.DuplicateSalesRecordException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import seedu.address.model.sales.exception.SalesRecordNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " * A list of sales records that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " * A sales record is considered unique by comparing using {@code SalesRecordEntry#isSameRecord(SalesEntryRecord)}. As"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " * such, adding and updating of a sales record entry uses {@code SalesRecordEntry#isSameRecord(SalesEntryRecord)} for"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " * equality so as to ensure that the sales record entry being added or updated is unique in terms of identity in the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " * UniqueSalesRecordList. However, the removal of a sales record entry uses SalesRecordEntry#equals(Object) so"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " * as to ensure that the sales record entry with exactly the same fields will be removed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "public class UniqueSalesRecordList implements Iterable\u003cSalesRecordEntry\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    private final ObservableList\u003cSalesRecordEntry\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    private final ObservableList\u003cSalesRecordEntry\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Returns true if the list contains an equivalent record entry of {@Code SalesRecordEntry toCheck}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param toCheck the sales record entry to check for"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @return true if the list contains an equivalent record entry"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public boolean contains(SalesRecordEntry toCheck) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameRecord);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Adds the given {@SalesRecordEntry toAdd} to the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * If there exists a record of the same drink in the list, that record will be replaced."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param toAdd the SalesRecordEntry to be added"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void add(SalesRecordEntry toAdd) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            // if it exists, then replace it with the new entry"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            setSalesEntry(toAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Sets and replaces the entry that is recording the same Drink item as {@Code newEntry}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param newEntry the sales record entry to be updated."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void setSalesEntry(SalesRecordEntry newEntry) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        requireNonNull(newEntry);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // find the sales entry with the drink"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        int index \u003d indexOf(newEntry.getDrink());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            throw new SalesRecordNotFoundException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assert index \u003e -1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        internalList.set(index, newEntry); // replace with the new entry"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public SalesRecordEntry getSalesEntry(Drink drink) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        int index \u003d indexOf(drink);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            throw new SalesRecordNotFoundException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assert index \u003e -1;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return internalList.get(index);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Returns the index of the sales record which stores the {@Code Drink drink}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Otherwise, returns -1 if the {@Code drink} cannot be found."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param drink the drink item to search for in the record"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @return the index of the record entry that stores the drink"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    private int indexOf(Drink drink) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        requireNonNull(drink);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        for (int i \u003d 0; i \u003c internalList.size(); i++) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            if (internalList.get(i).getDrink().equals(drink)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                return i;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Removes the equivalent sales record entry from the list."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * The entry must already exist in the list."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param toRemove the sales record entry to be removed"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void remove(SalesRecordEntry toRemove) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            throw new SalesRecordNotFoundException();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return internalList.isEmpty();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Replaces the content of the list with a {@Code UniqueSalesRecordList replacement}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param replacement the list to be replaced with"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void setSalesRecord(UniqueSalesRecordList replacement) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Replaces the content of the list with the {@Code sales} as a List."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param sales a List containing sales record entries"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void setSalesRecord(List\u003cSalesRecordEntry\u003e sales) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        requireAllNonNull(sales);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        if (!salesRecordEntriesAreUnique(sales)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            throw new DuplicateSalesRecordException();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        internalList.setAll(sales);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Replaces the content of the list with the {@Code sales} as a Map."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param sales a Map containing sales information of drinks sold"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void setSalesRecord(Map\u003cDrink, Integer\u003e sales) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        requireNonNull(sales);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        ArrayList\u003cSalesRecordEntry\u003e newRecord \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.forEach((k, v) -\u003e newRecord.add(new SalesRecordEntry(k, v)));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        internalList.setAll(newRecord);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Returns true if {@code sales} contains only unique sales record entries."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    private boolean salesRecordEntriesAreUnique(List\u003cSalesRecordEntry\u003e sales) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        for (int i \u003d 0; i \u003c sales.size() - 1; i++) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            for (int j \u003d i + 1; j \u003c sales.size(); j++) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                if (sales.get(i).isSameRecord(sales.get(j))) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public ObservableList\u003cSalesRecordEntry\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Returns an iterator over elements of type {@code SalesRecordEntry}."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @return an Iterator."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public Iterator\u003cSalesRecordEntry\u003e iterator() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                || (other instanceof UniqueSalesRecordList // instanceof handles nulls"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueSalesRecordList) other).internalList));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 206
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    private Path salesBookFilePath \u003d Paths.get(\"data\" , \"salesbook.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    private Path ingredientBookFilePath \u003d Paths.get(\"data\" , \"ingredientbook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    public Path getSalesBookFilePath() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        return salesBookFilePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    public Path getIngredientBookFilePath() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        return ingredientBookFilePath;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    public void setSalesBookFilePath(Path salesBookFilePath) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        requireNonNull(salesBookFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        this.salesBookFilePath \u003d salesBookFilePath;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    public void setIngredientBookFilePath(Path ingredientBookFilePath) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        requireNonNull(ingredientBookFilePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        this.ingredientBookFilePath \u003d ingredientBookFilePath;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                \u0026\u0026 salesBookFilePath.equals(o.salesBookFilePath)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                \u0026\u0026 ingredientBookFilePath.equals(o.ingredientBookFilePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath, salesBookFilePath, ingredientBookFilePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + ingredientBookFilePath);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + salesBookFilePath);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + ingredientBookFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 1,
      "WM71811": 1,
      "-": 82,
      "Persdre": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ingredient/Amount.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "package seedu.address.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": " * Represent the amount of a particular ingredient in tCheck."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "public class Amount {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            \"Amount should only contain numbers, and it should be equals to or greater than 0\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{1,}\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private static final int RESTOCK_LEVEL \u003d 5;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public final String amount;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * Constructs an amount from the given string representing the amount."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * @param amount a string representing amount"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public Amount(String amount) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        checkArgument(isValidAmount(amount), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * Returns true if a given string is a valid amount."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * @param test the given string representing the amount of an ingredient"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public static boolean isValidAmount(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Returns the amount of ingredients in string format."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @return the amount of ingredients in string format."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public boolean isBelowRestockLevel() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return Integer.parseInt(amount) \u003c RESTOCK_LEVEL;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return this.amount;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                || (other instanceof Amount // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                \u0026\u0026 amount.equals(((Amount) other).amount)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return amount.hashCode();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 52,
      "WM71811": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ingredient/Ingredient.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "package seedu.address.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": " * Represents ALL ingredient that is tracked by tCheck."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": " * OOP development plan : Each ingredient can be extracted out to make the design more OOP."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "public class Ingredient {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    // Identity field"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private final IngredientName ingredientName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    // Data field"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private final Amount amount;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * Constructs an ingredient with the given amount and ingredient name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * Note that the ingredient name can only be one of the static"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * String constant declared in this class."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * @param amount         an integer representing the level of the ingredient"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * @param ingredientName name of the ingredient"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public Ingredient(IngredientName ingredientName, Amount amount) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        requireAllNonNull(ingredientName, amount);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        this.ingredientName \u003d ingredientName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * Constructs an ingredient with the given name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * Amount is set to 0 by default."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * @param ingredientName name of the ingredient"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public Ingredient(IngredientName ingredientName) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        this.amount \u003d new Amount(\"0\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        this.ingredientName \u003d ingredientName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public Amount getAmount() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return this.amount;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public IngredientName getIngredientName() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return this.ingredientName;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public boolean isSameIngredient(Ingredient otherIngredient) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        if (otherIngredient \u003d\u003d this) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return otherIngredient !\u003d null"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                \u0026\u0026 otherIngredient.getIngredientName().equals(getIngredientName())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                \u0026\u0026 otherIngredient.getAmount().equals(getAmount());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * Returns true if both ingredients have the same identity and data fields."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * This defines a stronger notion of equality between two ingredients."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        if (!(other instanceof Ingredient)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        Ingredient otherIngredient \u003d (Ingredient) other;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return otherIngredient.getIngredientName().equals(getIngredientName())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                \u0026\u0026 otherIngredient.getAmount().equals(getAmount());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return Objects.hash(ingredientName, amount);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        builder.append(\" Ingredient: \")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                .append(getIngredientName())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                .append(\", \")"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                .append(\" Amount: \")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                .append(getAmount())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                .append(\"\\n\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 102
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ingredient/IngredientName.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "package seedu.address.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": " * Represents an ingredient\u0027s name in tCheck."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "public class IngredientName {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            \"Ingredient Names should only be chosen from the given list,\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                    + \" and it should not be blank\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public static final String[] INGREDIENTS \u003d new String[]{\"Milk\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        \"Pearl\", \"Boba\", \"Black Tea\", \"Green Tea\", \"Brown Sugar\"};"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public final String ingredientName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public IngredientName(String ingredientName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        requireNonNull(ingredientName);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        checkArgument(isValidIngredientName(ingredientName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        this.ingredientName \u003d ingredientName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * Returns true if the given ingredientName is a valid ingredient name."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * @param ingredientName a given string of ingredient name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public static boolean isValidIngredientName(String ingredientName) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        requireNonNull(ingredientName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return Arrays.asList(INGREDIENTS).contains(ingredientName);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return ingredientName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                || (other instanceof IngredientName // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                \u0026\u0026 ingredientName.equals(((IngredientName) other).ingredientName));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return ingredientName.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ingredient/UniqueIngredientList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "package seedu.address.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ingredient.exceptions.DuplicateIngredientException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.exceptions.IngredientNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.exceptions.NoChangeIngredientException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "public class UniqueIngredientList implements Iterable\u003cIngredient\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private final ObservableList\u003cIngredient\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private final ObservableList\u003cIngredient\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * Returns true if an ingredient with the same identity as {@code ingredient} exists in the ingredient book."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public boolean contains(Ingredient toCheck) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameIngredient);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void setIngredient(Ingredient target, Ingredient newAmount) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        requireAllNonNull(target, newAmount);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            throw new IngredientNotFoundException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        if (internalList.contains(newAmount)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            throw new NoChangeIngredientException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        internalList.set(index, newAmount);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void setIngredients(UniqueIngredientList replacement) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void setIngredients(List\u003cIngredient\u003e ingredients) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        requireAllNonNull(ingredients);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        if (!ingredientsAreUnique(ingredients)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            throw new NoChangeIngredientException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        internalList.setAll(ingredients);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Returns the ingredient with the input ingredient name, if"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * not found, return null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param ingredientName ingredient name"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @return ingredient with the input ingredient name"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public Ingredient findIngredientByName(IngredientName ingredientName) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        requireNonNull(ingredientName);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        for (int i \u003d 0; i \u003c internalList.size(); i++) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            if (internalList.get(i).getIngredientName().equals(ingredientName)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                return internalList.get(i);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Returns an arraylist of ingredients that are in shortage. If"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * no ingredient is in shortage, return an empty arraylist."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @return an arraylist of ingredients that are in shortage"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public ArrayList\u003cIngredient\u003e findIngredientInShortage() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        Amount amountOfIngredient;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        ArrayList\u003cIngredient\u003e ingredientsInShortage \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        for (Ingredient ingredient : internalList) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            amountOfIngredient \u003d ingredient.getAmount();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            if (amountOfIngredient.isBelowRestockLevel()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                ingredientsInShortage.add(ingredient);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return ingredientsInShortage;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public ObservableList\u003cIngredient\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public Ingredient get(int index) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return internalList.get(index);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public Iterator\u003cIngredient\u003e iterator() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                || (other instanceof UniqueIngredientList // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueIngredientList) other).internalList));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private boolean ingredientsAreUnique(List\u003cIngredient\u003e ingredients) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        for (int i \u003d 0; i \u003c ingredients.size() - 1; i++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            for (int j \u003d i + 1; j \u003c ingredients.size(); j++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                if (ingredients.get(i).isSameIngredient(ingredients.get(j))) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Adds an ingredient to the list."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * The ingredient must not already exist in the list."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public void add(Ingredient toAdd) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            throw new DuplicateIngredientException();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 99,
      "WM71811": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ingredient/exceptions/DuplicateIngredientException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "package seedu.address.model.ingredient.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": " * Signals that the operation will result in duplicate Ingredients (Ingredients are considered duplicates if"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": " * they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": "public class DuplicateIngredientException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public DuplicateIngredientException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        super(\"Operation would result in duplicate ingredients\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "WM71811": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ingredient/exceptions/IngredientNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "package seedu.address.model.ingredient.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": " * Signals that the operation is unable to find the specified ingredient."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "public class IngredientNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public IngredientNotFoundException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        super(\"Ingredient entered cannot be found from the ingredient book\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ingredient/exceptions/NoChangeIngredientException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "package seedu.address.model.ingredient.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": " * Signals that the operation will not change any amounts (Ingredients are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": " * name and amount)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "public class NoChangeIngredientException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public NoChangeIngredientException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        super(\"The operation does not change any of the existing amounts\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/ArchiveStatus.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " * Represents a Person\u0027s archive status in the address book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "public class ArchiveStatus {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Archive status should only be true or false\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^(true|false)$\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public final boolean archiveStatus;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Constructs a false {@code archiveStatus} of archival if no parameter passed in."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public ArchiveStatus() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        this.archiveStatus \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Constructs a {@code archiveStatus} based on the archiveStatus passed in."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param archiveStatus A valid archiveStatus of archival."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public ArchiveStatus(boolean archiveStatus) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        requireNonNull(archiveStatus);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        this.archiveStatus \u003d archiveStatus;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Returns true if a given string is a valid archiveStatus."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static boolean isValidArchiveStatus(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        if (test \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return String.valueOf(archiveStatus);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                || (other instanceof ArchiveStatus"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                \u0026\u0026 archiveStatus \u003d\u003d ((ArchiveStatus) other).archiveStatus);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return String.valueOf(archiveStatus).hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    private final Phone emergency;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private final ArchiveStatus archiveStatus;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    public Person(Name name, Phone phone, Phone emergency, Address address, ArchiveStatus archiveStatus,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                  Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        requireAllNonNull(name, phone, emergency, address, tags, archiveStatus);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        this.emergency \u003d emergency;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        this.archiveStatus \u003d archiveStatus;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    public Phone getEmergency() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        return emergency;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public ArchiveStatus getArchiveStatus() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return archiveStatus;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Sets the person\u0027s archive status to true. It\u0027s equivalent to having archived the person."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @return A Person whose archive status is true."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public Person archive() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        return new Person(this.name, this.phone, this.emergency, this.address, new ArchiveStatus(true),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                this.tags);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Sets the person\u0027s archive status to false. It\u0027s equivalent to unarchive the person."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @return A Person whose archive status is false."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public Person unarchive() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        return new Person(this.name, this.phone, this.emergency, this.address, new ArchiveStatus(false),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                this.tags);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        if (other \u003d\u003d null || Boolean.valueOf(archiveStatus.toString())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                || Boolean.valueOf(otherPerson.archiveStatus.toString())) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                \u0026\u0026 otherPerson.getEmergency().equals((getEmergency()))"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags())"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                \u0026\u0026 otherPerson.getArchiveStatus().equals(getArchiveStatus());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        return Objects.hash(name, phone, emergency, address, archiveStatus, tags);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                .append(\" Emergency Contact: \")"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                .append(getEmergency())"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 30,
      "-": 110,
      "Persdre": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/TagContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "public class TagContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public TagContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                .anyMatch(keyword"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                    -\u003e StringUtil"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                        .containsWordIgnoreCase(person.getTags().toString()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                                        .replaceAll(\"\\\\[\", \"\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                                        .replaceAll(\"]\", \"\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                                        .replaceAll(\",\", \"\"), keyword));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                || (other instanceof TagContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                \u0026\u0026 keywords.equals(((TagContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/model/sales/exception/DuplicateSalesRecordException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "package seedu.address.model.sales.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " * Signals that the operation will result in duplicate SalesRecordEntry (SalesRecordEntries are considered duplicates"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " * if they refer to the same Drink)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "public class DuplicateSalesRecordException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public DuplicateSalesRecordException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        super(\"Operation would result in duplicate sales entry.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/sales/exception/SalesBookNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Persdre"
        },
        "content": "package seedu.address.model.sales.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Persdre"
        },
        "content": "public class SalesBookNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Persdre"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Persdre": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/sales/exception/SalesRecordNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "package seedu.address.model.sales.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " * Signals that the operation is unable to find the specified sales record."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "public class SalesRecordNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.model.Drink;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.IngredientBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ReadOnlyIngredientBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.model.ReadOnlySalesBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.model.SalesBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.model.SalesRecordEntry;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ingredient.Amount;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.model.person.ArchiveStatus;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                new Phone(\"70993478\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                new ArchiveStatus(false),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                getTagSet(\"Friday\", \"Thursday\", \"PartTime\")),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                new Phone(\"85727299\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                new ArchiveStatus(false),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                getTagSet(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"FullTime\")),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                new Phone(\"38201239\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                new ArchiveStatus(false),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                getTagSet(\"Saturday\", \"Sunday\", \"Friday\", \"PartTime\")),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                new Phone(\"28213019\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                new ArchiveStatus(false),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                getTagSet(\"Friday\", \"Thursday\", \"Monday\", \"Saturday\", \"Sunday\", \"FullTime\")),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                new Phone(\"12029429\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                new ArchiveStatus(true),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                getTagSet(\"Wednesday\", \"Monday\", \"Friday\", \"Sunday\", \"PartTime\")),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                new Phone(\"71442629\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                new ArchiveStatus(true),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                getTagSet(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Saturday\", \"FullTime\"))"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static SalesRecordEntry[] getSampleSales() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return new SalesRecordEntry[]{"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            new SalesRecordEntry(Drink.BSBM, 0),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            new SalesRecordEntry(Drink.BSBBT, 0),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            new SalesRecordEntry(Drink.BSBGT, 0),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            new SalesRecordEntry(Drink.BSPM, 0),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            new SalesRecordEntry(Drink.BSPBT, 0),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            new SalesRecordEntry(Drink.BSPGT, 0)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static ReadOnlySalesBook getSampleSalesBook() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        SalesBook sampleSb \u003d new SalesBook();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        for (SalesRecordEntry sampleSalesRecordEntry : getSampleSales()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            sampleSb.addSalesRecordEntry(sampleSalesRecordEntry);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return sampleSb;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public static Ingredient[] getSampleIngredients() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return new Ingredient[]{"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            new Ingredient(new IngredientName(\"Milk\"), new Amount(\"0\")),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            new Ingredient(new IngredientName(\"Pearl\"), new Amount(\"0\")),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            new Ingredient(new IngredientName(\"Boba\"), new Amount(\"0\")),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            new Ingredient(new IngredientName(\"Black Tea\"), new Amount(\"0\")),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            new Ingredient(new IngredientName(\"Green Tea\"), new Amount(\"0\")),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            new Ingredient(new IngredientName(\"Brown Sugar\"), new Amount(\"0\"))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        };"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public static ReadOnlyIngredientBook getSampleIngredientBook() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        IngredientBook sampleIb \u003d new IngredientBook();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        for (Ingredient sampleIngredient : getSampleIngredients()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            sampleIb.addIngredient(sampleIngredient);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return sampleIb;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 34,
      "WM71811": 23,
      "-": 50,
      "Persdre": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/IngredientBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ReadOnlyIngredientBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": " * Represents a storage for {@link seedu.address.model.IngredientBook}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": "public interface IngredientBookStorage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    Path getIngredientBookFilePath();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyIngredientBook}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    Optional\u003cReadOnlyIngredientBook\u003e readIngredientBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @see #getIngredientBookFilePath()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    Optional\u003cReadOnlyIngredientBook\u003e readIngredientBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Saves the given {@link ReadOnlyIngredientBook} to the storage."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    void saveIngredientBook(ReadOnlyIngredientBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @see #saveIngredientBook(ReadOnlyIngredientBook)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    void saveIngredientBook(ReadOnlyIngredientBook addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WM71811"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "WM71811": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedIngredient.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ingredient.Amount;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": " * Jackson-friendly version of {@link Ingredient}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": "class JsonAdaptedIngredient {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Ingredient\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private final String ingredientName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private final String amount;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Constructs a {@code JsonAdaptedIngredient} with the given ingredient details."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public JsonAdaptedIngredient(@JsonProperty(\"ingredientName\") String ingredientName,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                             @JsonProperty(\"amount\") String amount) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        this.ingredientName \u003d ingredientName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Converts a given {@code Ingredient} into this class for Jackson use."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public JsonAdaptedIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        ingredientName \u003d ingredient.getIngredientName().ingredientName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        amount \u003d ingredient.getAmount().amount;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Converts this Jackson-friendly adapted ingredient object into the model\u0027s {@code Ingredient} object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted ingredient."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public Ingredient toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        if (ingredientName \u003d\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                    IngredientName.class.getSimpleName()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        if (!IngredientName.isValidIngredientName(ingredientName)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            throw new IllegalValueException(IngredientName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        final IngredientName modelName \u003d new IngredientName(ingredientName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        if (amount \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Amount.class.getSimpleName()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        if (!Amount.isValidAmount(amount)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            throw new IllegalValueException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        final Amount modelAmount \u003d new Amount(amount);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return new Ingredient(modelName, modelAmount);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WM71811"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "WM71811": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.model.person.ArchiveStatus;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    private final String emergency;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private final String archiveStatus;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                             @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                             @JsonProperty(\"emergency\") String emergency,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                             @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                             @JsonProperty(\"archiveStatus\") String archiveStatus,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        this.emergency \u003d emergency;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        this.archiveStatus \u003d archiveStatus;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        emergency \u003d source.getEmergency().value;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        archiveStatus \u003d source.getArchiveStatus().toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        if (emergency \u003d\u003d null) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        if ((!Phone.isValidPhone(emergency))) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        final Phone modelEmergency \u003d new Phone(emergency);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        if (!ArchiveStatus.isValidArchiveStatus(archiveStatus)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            throw new IllegalValueException(ArchiveStatus.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        final ArchiveStatus modelArchiveStatus \u003d new ArchiveStatus(Boolean.parseBoolean(archiveStatus));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmergency, modelAddress, modelArchiveStatus, modelTags);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 13,
      "-": 95,
      "Persdre": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedSalesRecordEntry.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.model.Drink;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.model.SalesRecordEntry;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " * Jackson-friendly version of {@link SalesRecordEntry}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "class JsonAdaptedSalesRecordEntry {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"SalesRecordEntry\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private final String drink;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private final String numberSold;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Constructs a {@code JsonAdaptedSalesRecordEntry} with the given salesRecordEntry details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public JsonAdaptedSalesRecordEntry(@JsonProperty(\"drink\") String drink,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                                       @JsonProperty(\"numberSold\") String numberSold) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        this.drink \u003d drink;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        this.numberSold \u003d numberSold;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Converts a given {@code SalesRecordEntry} into this class for Jackson use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public JsonAdaptedSalesRecordEntry(SalesRecordEntry source) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        drink \u003d source.getDrink().getShortFormName();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        numberSold \u003d String.valueOf(source.getNumberSold());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Converts this Jackson-friendly adapted salesRecordEntry object into the model\u0027s {@code SalesRecordEntry} object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted salesRecordEntry."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public SalesRecordEntry toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        if (drink \u003d\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        if (!Drink.isValidDrinkName(drink)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            throw new IllegalValueException(Drink.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        final Drink modelDrinkName \u003d Drink.valueOf(drink);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        if (numberSold \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        if (!Drink.isValidNumberSold(numberSold)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        final Integer modelNumberSold \u003d Integer.valueOf(numberSold);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return new SalesRecordEntry(modelDrinkName, modelNumberSold);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonIngredientBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ReadOnlyIngredientBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": " * A class to access IngredientBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WM71811"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WM71811"
        },
        "content": "public class JsonIngredientBookStorage implements IngredientBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonIngredientBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public JsonIngredientBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public Path getIngredientBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public Optional\u003cReadOnlyIngredientBook\u003e readIngredientBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return readIngredientBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Similar to {@link #readIngredientBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public Optional\u003cReadOnlyIngredientBook\u003e readIngredientBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        Optional\u003cJsonSerializableIngredientBook\u003e jsonIngredientBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                filePath, JsonSerializableIngredientBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        if (!jsonIngredientBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            return Optional.of(jsonIngredientBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public void saveIngredientBook(ReadOnlyIngredientBook ingredientBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        saveIngredientBook(ingredientBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Similar to {@link #saveIngredientBook(ReadOnlyIngredientBook)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public void saveIngredientBook(ReadOnlyIngredientBook ingredientBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        requireNonNull(ingredientBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableIngredientBook(ingredientBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WM71811"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WM71811": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSalesBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.model.ReadOnlySalesBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " * A class to access SalesBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "public class JsonSalesBookStorage implements SalesBookStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonSalesBookStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public JsonSalesBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public Path getSalesBookFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public Optional\u003cReadOnlySalesBook\u003e readSalesBook() throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return readSalesBook(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Similar to {@link #readSalesBook()}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public Optional\u003cReadOnlySalesBook\u003e readSalesBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        Optional\u003cJsonSerializableSalesBook\u003e jsonSalesBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                filePath, JsonSerializableSalesBook.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        if (!jsonSalesBook.isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            return Optional.of(jsonSalesBook.get().toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public void saveSalesBook(ReadOnlySalesBook salesBook) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        saveSalesBook(salesBook, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Similar to {@link #saveSalesBook(ReadOnlySalesBook)}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public void saveSalesBook(ReadOnlySalesBook salesBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        requireNonNull(salesBook);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableSalesBook(salesBook), filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableIngredientBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.IngredientBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ReadOnlyIngredientBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": " * An Immutable IngredientBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WM71811"
        },
        "content": "@JsonRootName(value \u003d \"ingredientbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WM71811"
        },
        "content": "class JsonSerializableIngredientBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_INGREDIENT \u003d \"Ingredient list contains duplicate ingredient(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private final List\u003cJsonAdaptedIngredient\u003e ingredients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Constructs a {@code JsonSerializableIngredientBook} with the given ingredients."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public JsonSerializableIngredientBook(@JsonProperty(\"ingredients\") List\u003cJsonAdaptedIngredient\u003e ingredients) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        this.ingredients.addAll(ingredients);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Converts a given {@code ReadOnlyIngredientBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableIngredientBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public JsonSerializableIngredientBook(ReadOnlyIngredientBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        ingredients.addAll(source.getIngredientList().stream().map(JsonAdaptedIngredient::new)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Converts this address book into the model\u0027s {@code IngredientBook} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public IngredientBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        IngredientBook ingredientBook \u003d new IngredientBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        for (JsonAdaptedIngredient jsonAdaptedIngredient : ingredients) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            Ingredient ingredient \u003d jsonAdaptedIngredient.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            if (ingredientBook.hasIngredient(ingredient)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_INGREDIENT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            ingredientBook.addIngredient(ingredient);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return ingredientBook;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WM71811"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "WM71811": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableSalesBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.model.ReadOnlySalesBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.model.SalesBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.model.SalesRecordEntry;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " * An Immutable SalesBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "@JsonRootName(value \u003d \"salesbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "class JsonSerializableSalesBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SALESRECORDENTRY \u003d \"Persons list contains duplicate \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            + \"salesRecordEntry(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private final List\u003cJsonAdaptedSalesRecordEntry\u003e salesRecordEntries \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Constructs a {@code JsonSerializableSalesBook} with the given salesRecordEntries."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public JsonSerializableSalesBook("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            @JsonProperty(\"salesRecordEntries\") List\u003cJsonAdaptedSalesRecordEntry\u003e salesRecordEntries) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        this.salesRecordEntries.addAll(salesRecordEntries);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Converts a given {@code ReadOnlySalesBook} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableSalesBook}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public JsonSerializableSalesBook(ReadOnlySalesBook source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        salesRecordEntries.addAll(source.getSalesRecord().stream().map(JsonAdaptedSalesRecordEntry::new)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Converts this sales book into the model\u0027s {@code SalesBook} object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public SalesBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        SalesBook salesBook \u003d new SalesBook();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        for (JsonAdaptedSalesRecordEntry jsonAdaptedSalesRecordEntry : salesRecordEntries) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            SalesRecordEntry salesRecordEntry \u003d jsonAdaptedSalesRecordEntry.toModelType();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            if (salesBook.hasSalesRecordEntry(salesRecordEntry)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_SALESRECORDENTRY);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            salesBook.addSalesRecordEntry(salesRecordEntry);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return salesBook;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/SalesBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.model.ReadOnlySalesBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " * Represents a storage for {@link seedu.address.model.SalesBook}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "public interface SalesBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    Path getSalesBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Returns SalesBook data as a {@link ReadOnlySalesBook}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    Optional\u003cReadOnlySalesBook\u003e readSalesBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @see #getSalesBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    Optional\u003cReadOnlySalesBook\u003e readSalesBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Saves the given {@link ReadOnlySalesBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param salesBook cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    void saveSalesBook(ReadOnlySalesBook salesBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @see #saveSalesBook(ReadOnlySalesBook)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    void saveSalesBook(ReadOnlySalesBook salesBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ReadOnlyIngredientBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.model.ReadOnlySalesBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "public interface Storage extends AddressBookStorage, IngredientBookStorage, SalesBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    Path getSalesBookFilePath();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    Optional\u003cReadOnlySalesBook\u003e readSalesBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    void saveSalesBook(ReadOnlySalesBook salesBook) throws IOException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    Path getIngredientBookFilePath();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    Optional\u003cReadOnlyIngredientBook\u003e readIngredientBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    void saveIngredientBook(ReadOnlyIngredientBook ingredientBook) throws IOException;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 12,
      "WM71811": 10,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ReadOnlyIngredientBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.model.ReadOnlySalesBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private SalesBookStorage salesBookStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private IngredientBookStorage ingredientBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code AddressBookStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, SalesBookStorage salesBookStorage,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                          UserPrefsStorage userPrefsStorage, IngredientBookStorage ingredientBookStorage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        this.salesBookStorage \u003d salesBookStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        this.ingredientBookStorage \u003d ingredientBookStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        assert filePath.toString().length() \u003e 0 : \"filePath should not be empty.\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        assert filePath.toString().length() \u003e 0 : \"filePath should not be empty.\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d SalesBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public Path getSalesBookFilePath() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return salesBookStorage.getSalesBookFilePath();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public Optional\u003cReadOnlySalesBook\u003e readSalesBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return readSalesBook(salesBookStorage.getSalesBookFilePath());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public Optional\u003cReadOnlySalesBook\u003e readSalesBook(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        assert filePath.toString().length() \u003e 0 : \"filePath should not be empty.\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return salesBookStorage.readSalesBook(filePath);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public void saveSalesBook(ReadOnlySalesBook salesBook) throws IOException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        saveSalesBook(salesBook, salesBookStorage.getSalesBookFilePath());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public void saveSalesBook(ReadOnlySalesBook salesBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        assert filePath.toString().length() \u003e 0 : \"filePath should not be empty.\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        salesBookStorage.saveSalesBook(salesBook, filePath);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d IngredientBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public Path getIngredientBookFilePath() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return ingredientBookStorage.getIngredientBookFilePath();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public Optional\u003cReadOnlyIngredientBook\u003e readIngredientBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return readIngredientBook(ingredientBookStorage.getIngredientBookFilePath());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public Optional\u003cReadOnlyIngredientBook\u003e readIngredientBook(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            IOException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return ingredientBookStorage.readIngredientBook(filePath);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public void saveIngredientBook(ReadOnlyIngredientBook ingredientBook) throws IOException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        saveIngredientBook(ingredientBook, ingredientBookStorage.getIngredientBookFilePath());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public void saveIngredientBook(ReadOnlyIngredientBook ingredientBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        ingredientBookStorage.saveIngredientBook(ingredientBook, filePath);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 39,
      "WM71811": 33,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CalendarView.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import javafx.geometry.HPos;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import javafx.geometry.VPos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import javafx.scene.effect.BlendMode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import javafx.scene.layout.Border;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import javafx.scene.layout.BorderStroke;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import javafx.scene.layout.BorderStrokeStyle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import javafx.scene.layout.BorderWidths;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import javafx.scene.layout.CornerRadii;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " * Calendar View UI."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "public class CalendarView extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private static final String FXML \u003d \"CalendarView.fxml\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private static final String[] MONTHS \u003d {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"};"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private static final int TOTAL_NUM_OF_DATEGRID \u003d 42;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private static final int NUM_OF_DAYS_PER_WEEK \u003d 7;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private int[] simulateGridPane \u003d new int[42];"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private int day;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private int month;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private int year;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private int previousMonthBalance;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private int nextMonthBalance;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private int currentMonthBalance;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private YearMonth yearMonth;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private LocalDate todayDate;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private LocalDate fixedDatePointer;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private LocalDate datePointer;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private LocalDate firstDayOfTheMonth;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private Image leftArrow \u003d new Image(getClass().getResourceAsStream(\"/images/leftButton.png\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            30, 30, false, false);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private Image rightArrow \u003d new Image(getClass().getResourceAsStream(\"/images/rightButton.png\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            30, 30, false, false);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private Label mmyyyyLabel;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private Button leftBtn;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private Button rightBtn;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private GridPane mmyyyyGridPane;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private GridPane dateGridPane;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private GridPane everydayGridPane;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Constructs the CalendarView."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public CalendarView() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        todayDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        datePointer \u003d todayDate;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        fixedDatePointer \u003d todayDate;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        day \u003d todayDate.getDayOfMonth();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        month \u003d todayDate.getMonthValue();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        year \u003d todayDate.getYear();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        yearMonth \u003d YearMonth.of(year, month);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        firstDayOfTheMonth \u003d yearMonth.atDay(1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        setUpLeftRightBtns();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        setMonthYearLabel();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        createCalenderView();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private void updateDayMonthYear(LocalDate date) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        year \u003d date.getYear();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        month \u003d date.getMonthValue();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        day \u003d date.getDayOfMonth();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        yearMonth \u003d YearMonth.of(year, month);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        firstDayOfTheMonth \u003d yearMonth.atDay(1);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private boolean isSameMonth(LocalDate d1, LocalDate d2) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        LocalDate pivot \u003d d1.withDayOfMonth(1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        LocalDate toCheck \u003d d2.withDayOfMonth(1);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return pivot.equals(toCheck);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private void setUpLeftRightBtns() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        leftBtn.setMinSize(30, 30);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        leftBtn.setMaxSize(30, 30);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        rightBtn.setMinSize(30, 30);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        rightBtn.setMaxSize(30, 30);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        ImageView leftBtnView \u003d new ImageView(leftArrow);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        ImageView rightBtnView \u003d new ImageView(rightArrow);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        leftBtn.setGraphic(leftBtnView);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        rightBtn.setGraphic(rightBtnView);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Returns the total number of days in a month based on the year and month."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @return return the total number of days."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public int getNumberOfDaysInTheMonth() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        YearMonth yearMonthObject \u003d YearMonth.of(year, month);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return yearMonthObject.lengthOfMonth();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Returns the total number of days in a month based on the year and month."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @return return the total number of days."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public int getNumberOfDaysOfAMonth(int month, int year) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        YearMonth yearMonthObject \u003d YearMonth.of(year, month);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return yearMonthObject.lengthOfMonth();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Returns the total number of days in the previous month based on the year and month."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @return return the total number of days."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public int getNumberOfDaysInPreviousMonth() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        if (month \u003e 1) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            return getNumberOfDaysOfAMonth(month - 1, year);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return getNumberOfDaysOfAMonth(11, year);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private void setMonthYearLabel() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        mmyyyyGridPane.setBackground(new Background("
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                new BackgroundFill("
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                        Color.valueOf(\"383838\"),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                        CornerRadii.EMPTY,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                        Insets.EMPTY)));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        String result \u003d MONTHS[month - 1] + \" - \" + fixedDatePointer.getYear();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        mmyyyyLabel.setText(result);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private Label createLabelDay(int dayNumber) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        Label label \u003d new Label();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        label.setText(String.valueOf(dayNumber));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        label.setStyle(\"-fx-text-fill: white\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return label;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private VBox placeHolderForLabel() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        VBox holder \u003d new VBox();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        holder.setFillWidth(false);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        holder.setPrefHeight(20);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        holder.setPrefWidth(20);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        holder.setMinSize(20, 20);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        holder.setMaxSize(30, 30);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        holder.setAlignment(Pos.CENTER);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return holder;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private void fill() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        currentMonthBalance \u003d getNumberOfDaysInTheMonth();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        int firstDayOfMonth \u003d firstDayOfTheMonth.getDayOfWeek().getValue();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        previousMonthBalance \u003d firstDayOfMonth % NUM_OF_DAYS_PER_WEEK;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        int firstDay \u003d getNumberOfDaysInPreviousMonth() - previousMonthBalance + 1;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        for (int i \u003d 0; i \u003c previousMonthBalance; i++) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            simulateGridPane[i] \u003d firstDay;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            firstDay++;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        for (int i \u003d 0; i \u003c currentMonthBalance; i++) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            simulateGridPane[previousMonthBalance + i] \u003d i + 1;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        nextMonthBalance \u003d TOTAL_NUM_OF_DATEGRID - currentMonthBalance - previousMonthBalance;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        int pointerInNextMonth \u003d currentMonthBalance + previousMonthBalance;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        for (int i \u003d 0; i \u003c nextMonthBalance; i++) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            simulateGridPane[pointerInNextMonth + i] \u003d i + 1;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Creates Vbox-es for each grid. Every Vbox contains a Label with a text indicating the date."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public void createCalenderView() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        fill();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        int currentDateGrid \u003d 0;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        everydayGridPane.setBackground(new Background("
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                new BackgroundFill(Color.valueOf(\"383838\"), CornerRadii.EMPTY, Insets.EMPTY)));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        dateGridPane.setBackground(new Background("
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                new BackgroundFill(Color.valueOf(\"383838\"), CornerRadii.EMPTY, Insets.EMPTY)));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        for (int row \u003d 0; row \u003c\u003d 5; row++) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            for (int col \u003d 0; col \u003c\u003d 6; col++) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                VBox holder \u003d placeHolderForLabel();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                if ((currentDateGrid \u003c previousMonthBalance)"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                        || (currentDateGrid \u003e TOTAL_NUM_OF_DATEGRID - 1 - nextMonthBalance)) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                    holder.setBlendMode(BlendMode.SOFT_LIGHT);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                if ((currentDateGrid \u003d\u003d previousMonthBalance + day - 1)"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                        \u0026\u0026 (isSameMonth(datePointer, fixedDatePointer))) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                    holder.setBackground(new Background("
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                            new BackgroundFill(Color.DARKORANGE.darker(), CornerRadii.EMPTY, Insets.EMPTY)));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                    holder.setBorder(new Border(new BorderStroke(Color.valueOf(\"#FFFFFF\"),"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                            BorderStrokeStyle.SOLID, CornerRadii.EMPTY, new BorderWidths(1))));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                Label labelDay \u003d createLabelDay(simulateGridPane[currentDateGrid]);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                holder.getChildren().add(labelDay);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                dateGridPane.add(holder, col, row);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                GridPane.setHalignment(holder, HPos.CENTER);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                GridPane.setValignment(holder, VPos.CENTER);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                currentDateGrid++;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private void refresh() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        dateGridPane.getChildren().clear();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        updateDayMonthYear(fixedDatePointer);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        setUpLeftRightBtns();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        setMonthYearLabel();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        createCalenderView();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Shows previous month calendar when the left button is clicked."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public void handleLeftBtn() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        fixedDatePointer \u003d fixedDatePointer.minusMonths(1);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        updateDayMonthYear(fixedDatePointer);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        refresh();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Shows next month calendar when the right button is clicked."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public void handRightBtn() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        fixedDatePointer \u003d fixedDatePointer.plusMonths(1);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        updateDayMonthYear(fixedDatePointer);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        refresh();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 270
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay2021s1-cs2103t-t12-2.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public static final String BRIEF_COMMAND_EXPLANATION \u003d \"The list of commands that tCheck can recognize are\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \" as follows:\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"c-add n/NAME p/PHONE_NUMBER e/EMERGENCY_CONTACT [t/TAG]…: Adds a person to the contact list. \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"c-list: Shows a list of all persons in the address book.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"c-today: Shows a list of all employees whose tags contain today\u0027s day (i.e. Wednesday, Tuesday, etc).\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"c-tomorrow: Shows a list of all employees whose tags contain tomorrow\u0027s day (i.e. Wednesday, Tuesday, \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"etc).\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"c-edit INDEX [n/NAME] [e/EMERGENCY_CONTACT] [a/ADDRESS] [t/TAG]…: Edits the corresponding contact \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"information in the contact list.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            + \"c-find KEYWORD [MORE_KEYWORDS]: Finds all contacts that contain the KEYWORD(s).\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"c-tag-find KEYWORD [MORE_KEYWORDS]: Finds all contacts that contain the KEYWORD(s) in their tags.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"c-delete INDEX: Deletes the specified person from the address book.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"c-clear: Clears all entries from the contact list.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"c-archive INDEX: Archives the specified employee’s contact detail from tCheck.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"c-archive-all: Archives all employees’ contact detail from tCheck.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"c-archive-list: Shows a list of all archived employees’ contact details in tCheck.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"c-unarchive INDEX: Unarchives the specified employees’ contact detail.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"i-set i/INGREDIENT_NAME m/AMOUNT: Sets the level for one type of ingredient individually.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"i-set-all M/AMOUNT_FOR_MILK P/AMOUNT_FOR_PEARL B/AMOUNT_FOR_BOBA L/AMOUNT_FOR_BLACK_TEA \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"G/AMOUNT_FOR_GREEN_TEA S/AMOUNT_FOR_BROWN_SUGAR: Sets all ingredients\u0027 levels to different specified \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"amounts according to user inputs.\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"i-set-default: Sets all ingredients\u0027 levels to a standard default amount.\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"i-view-single i/INGREDIENT_NAME: Shows the ingredient\u0027s level of a particular type of ingredient.\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"i-reset-all: Resets all types of ingredients\u0027 levels to zero in tCheck.\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"i-list: Lists the ingredient\u0027s levels of all ingredient types.\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"i-restock: Lists the ingredient\u0027s levels of all ingredient types that fall below their minimum stock \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"levels and require the user to restock.\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"s-list: Shows a list of all types of drinks sold for the current day.\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"s-update A/NUM B/NUM C/NUM ...: Asks the user to enter the number of each type of drink sold for the \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"current day.\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"s-find KEYWORD [MORE_KEYWORDS]: Finds all drinks where their abbreviated names match the KEYWORD(s).\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"help: Displays a brief explanation of the list of commands, and a link to the help page, \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"which is the user guide.\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"exit: Exits the program.\\n\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public static final String HELP_MESSAGE \u003d BRIEF_COMMAND_EXPLANATION + \"To explore more details, \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"please refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private Label commandList;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        //commandList.setText(BRIEF_COMMAND_EXPLANATION);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WM71811": 42,
      "-": 100,
      "Persdre": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/IngredientCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "public class IngredientCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private static final String FXML \u003d \"IngredientListCard.fxml\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public final Ingredient ingredient;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private Label display;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * Creates a {@code IngredientCard} with the given {@code Ingredient} to display."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public IngredientCard(Ingredient ingredient) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        this.ingredient \u003d ingredient;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        display.setText(ingredient.toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        if (!(other instanceof IngredientCard)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        IngredientCard card \u003d (IngredientCard) other;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return ingredient.equals(((IngredientCard) other).ingredient);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/IngredientListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "public class IngredientListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private static final String FXML \u003d \"IngredientListPanel.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(IngredientListPanel.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private Label header;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private ListView\u003cIngredient\u003e ingredientListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * Creates an {@code IngredientListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public IngredientListPanel(ObservableList\u003cIngredient\u003e ingredientList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        header.setText(\"Ingredient Tracker\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        ingredientListView.setItems(ingredientList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        ingredientListView.setCellFactory(listView -\u003e new IngredientListViewCell());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    class IngredientListViewCell extends ListCell\u003cIngredient\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        protected void updateItem(Ingredient ingredient, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            super.updateItem(ingredient, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            if (empty || ingredient \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                setGraphic(new IngredientCard(ingredient).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/IngredientResultDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "public class IngredientResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public IngredientResultDisplay() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    private SalesRecordListPanel salesRecordListPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private IngredientListPanel ingredientListPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    //private IngredientResultDisplay ingredientResultDisplay;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private CalendarView calendarView;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    private StackPane salesRecordListPanelPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private StackPane ingredientListPanelPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private StackPane calendar;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        salesRecordListPanel \u003d new SalesRecordListPanel(logic.getFilteredSalesRecordList());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        salesRecordListPanelPlaceholder.getChildren().add(salesRecordListPanel.getRoot());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        ingredientListPanel \u003d new IngredientListPanel(logic.getFilteredIngredientList());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        ingredientListPanelPlaceholder.getChildren().add(ingredientListPanel.getRoot());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        calendarView \u003d new CalendarView();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        calendar.getChildren().add(calendarView.getRoot());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 4,
      "Diwu-Yi": 6,
      "yanbingtao": 13,
      "-": 190
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private Label isArchived;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    private Label emergency;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonCode} with the given {@code Person} and index to display."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        if (person.getArchiveStatus().archiveStatus) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            isArchived.setText(\"[Archived]\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            isArchived.setText(\"\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        emergency.setText(person.getEmergency().value);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 7,
      "-": 75,
      "Persdre": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private Label headerPersonList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListView\u003cPerson\u003e personListView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        headerPersonList.setText(\"Employees\u0027 contact details\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setItems(personList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 4,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/SalesRecordEntryCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import seedu.address.model.SalesRecordEntry;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " * An UI component that displays information of a {@code SalesRecordEntry}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "public class SalesRecordEntryCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public static final String FXML \u003d \"SalesRecordListCard.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public final SalesRecordEntry entry;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    private Label record;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Creates a {@code SalesRecordEntryCard} with the given {@code SalesRecordEntry}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public SalesRecordEntryCard(SalesRecordEntry entry) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        this.entry \u003d entry;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        record.setText(entry.toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        if (!(other instanceof SalesRecordEntryCard)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        SalesRecordEntryCard card \u003d (SalesRecordEntryCard) other;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return record.getText().equals(card.record.getText())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                \u0026\u0026 entry.equals(card.entry);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/SalesRecordListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import seedu.address.model.SalesRecordEntry;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " * A ui for the SalesBook that is displayed in the body of the application."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "public class SalesRecordListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    private static final String FXML \u003d \"SalesRecordListPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(SalesRecordListPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    private Label header;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    private ListView\u003cSalesRecordEntry\u003e salesRecordEntryListView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Creates a {@code SalesRecordListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public SalesRecordListPanel(ObservableList\u003cSalesRecordEntry\u003e salesRecordEntries) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        header.setText(\"Sales Tracker\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        salesRecordEntryListView.setItems(salesRecordEntries);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        salesRecordEntryListView.setCellFactory(listView -\u003e new SalesRecordListViewCell());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        logger.fine(\"SalesRecordListPanel was successfully set up.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Custom {@code ListCell} that displays the details of a {@code SalesRecordEntry} using a"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * {@code SalesRecordEntryCard}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    class SalesRecordListViewCell extends ListCell\u003cSalesRecordEntry\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        protected void updateItem(SalesRecordEntry entry, boolean empty) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            super.updateItem(entry, empty);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            if (empty || entry \u003d\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                setGraphic(new SalesRecordEntryCard(entry).getRoot());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 56
    }
  },
  {
    "path": "src/main/resources/view/CalendarView.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "\u003cAnchorPane fx:id\u003d\"calenderPane\" xmlns\u003d\"http://javafx.com/javafx/11.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    \u003cGridPane fx:id\u003d\"mmyyyyGridPane\" prefHeight\u003d\"30.0\" prefWidth\u003d\"600.0\" AnchorPane.leftAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "              AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"10.0\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "      \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "      \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        \u003cLabel fx:id\u003d\"mmyyyyLabel\" alignment\u003d\"CENTER\" styleClass\u003d\"calendar-label-mmyyyy\" text\u003d\"MM YYYY\" textAlignment\u003d\"CENTER\" GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        \u003cButton fx:id\u003d\"leftBtn\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleLeftBtn\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                GridPane.halignment\u003d\"LEFT\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "          \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            \u003cInsets left\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "          \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        \u003c/Button\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        \u003cButton fx:id\u003d\"rightBtn\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handRightBtn\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                GridPane.halignment\u003d\"RIGHT\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "          \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            \u003cInsets right\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "          \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        \u003c/Button\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    \u003cGridPane fx:id\u003d\"everydayGridPane\" prefHeight\u003d\"15.0\" prefWidth\u003d\"500.0\" AnchorPane.leftAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "              AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"60.0\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "      \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "      \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        \u003cRowConstraints minHeight\u003d\"15.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        \u003cLabel styleClass\u003d\"dayLabel\" text\u003d\"Sun\" GridPane.columnIndex\u003d\"0\" GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "          \u003c/Label\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        \u003cLabel styleClass\u003d\"dayLabel\" text\u003d\"Mon\" GridPane.columnIndex\u003d\"1\" GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "          \u003c/Label\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        \u003cLabel styleClass\u003d\"dayLabel\" text\u003d\"Tue\" GridPane.columnIndex\u003d\"2\" GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "          \u003c/Label\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        \u003cLabel styleClass\u003d\"dayLabel\" text\u003d\"Wed\" GridPane.columnIndex\u003d\"3\" GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "          \u003c/Label\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        \u003cLabel styleClass\u003d\"dayLabel\" text\u003d\"Thu\" GridPane.columnIndex\u003d\"4\" GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "          \u003c/Label\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        \u003cLabel styleClass\u003d\"dayLabel\" text\u003d\"Fri\" GridPane.columnIndex\u003d\"5\" GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "         \u003c/Label\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        \u003cLabel styleClass\u003d\"dayLabel\" text\u003d\"Sat\" GridPane.columnIndex\u003d\"6\" GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "          \u003c/Label\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    \u003cGridPane fx:id\u003d\"dateGridPane\" AnchorPane.bottomAnchor\u003d\"10.0\" AnchorPane.leftAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "              AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "      \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "      \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        \u003cRowConstraints minHeight\u003d\"15.0\" prefHeight\u003d\"20.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        \u003cRowConstraints minHeight\u003d\"15.0\" prefHeight\u003d\"20.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        \u003cRowConstraints minHeight\u003d\"15.0\" prefHeight\u003d\"20.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        \u003cRowConstraints minHeight\u003d\"15.0\" prefHeight\u003d\"20.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        \u003cRowConstraints minHeight\u003d\"15.0\" prefHeight\u003d\"20.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        \u003cRowConstraints minHeight\u003d\"15.0\" prefHeight\u003d\"20.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 96
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": ".help-window-anchorpane {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    -fx-background-color: #393939;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    -fx-border-color: transparent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    -fx-border-style: solid;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    -fx-effect: dropshadow(gaussian, #1d1d1d, 20, 0.2, 0, 10);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    -fx-grid-lines-visible: false;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": ".help-window.label {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    -fx-font-size: 14;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    -fx-text-fill: #cacaca;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ".cell_big_label-archived {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    -fx-text-fill: red;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ".cell_small_label_italic {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ".calendar-label-mmyyyy {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    -fx-text-fill: derive(#d2691e, 10%);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ".dayLabel {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    -fx-text-fill: lightskyblue;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "#leftBtn, #rightBtn{"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    -fx-background-color: #383838;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border{"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ".pane-with-border-orange{"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    -fx-border-top-width: 9px;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    -fx-border-color: derive(#d2691e, 20%);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ".list-panel-header {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    -fx-text-fill: derive(#d2691e, 20%);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    -fx-font-size: 17;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    -fx-text-opacity: 1;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " *.header-panel {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "*.header-panel *.label {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "#salesCardPane {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     -fx-background-color: transparent;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     -fx-border-width: 0;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 6,
      "Diwu-Yi": 3,
      "yanbingtao": 42,
      "WM71811": 14,
      "-": 344
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Persdre"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        \u003cScene stylesheets\u003d\"@DarkTheme.css\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            \u003cStackPane minWidth\u003d\"850.0\" prefWidth\u003d\"900.0\"  styleClass\u003d\"help-window-anchorpane\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                    \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\" styleClass\u003d\"help-window\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                            \u003cInsets bottom\u003d\"20.0\" left\u003d\"20.0\" right\u003d\"20.0\" top\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                    \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                            StackPane.alignment\u003d\"BOTTOM_RIGHT\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                    \u003c/Button\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                    \u003cInsets bottom\u003d\"30.0\" left\u003d\"30.0\" right\u003d\"30.0\" top\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 22,
      "Persdre": 12
    }
  },
  {
    "path": "src/main/resources/view/IngredientListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "\u003cHBox fx:id\u003d\"ingredientCardPane\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"35\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            \u003cLabel fx:id\u003d\"display\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$display\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 22
    }
  },
  {
    "path": "src/main/resources/view/IngredientListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    \u003cLabel fx:id\u003d\"header\" text\u003d\"\\$Label\" styleClass\u003d\"list-panel-header\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    \u003cListView fx:id\u003d\"ingredientListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 10
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "\u003cfx:root minHeight\u003d\"700\" minWidth\u003d\"1000\" onCloseRequest\u003d\"#handleExit\" title\u003d\"tCheck\" type\u003d\"javafx.stage.Stage\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help Message\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"300\" minHeight\u003d\"100\" prefHeight\u003d\"300.0\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        \u003cGridPane\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "          \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"ALWAYS\" minWidth\u003d\"100.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "              \u003cColumnConstraints hgrow\u003d\"ALWAYS\" minWidth\u003d\"100.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "          \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "          \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "              \u003cRowConstraints maxHeight\u003d\"400.0\" minHeight\u003d\"200.0\" prefHeight\u003d\"300.0\" vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "              \u003cRowConstraints maxHeight\u003d\"400.0\" minHeight\u003d\"200.0\" prefHeight\u003d\"300.0\" vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "          \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "           \u003cchildren\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "             \u003cVBox fx:id\u003d\"salesList\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                   prefHeight\u003d\"80.0\" prefWidth\u003d\"150.0\" styleClass\u003d\"pane-with-border-orange\"\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                 \u003cpadding\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                    \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                 \u003c/padding\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                 \u003cchildren\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"salesRecordListPanelPlaceholder\" prefHeight\u003d\"78.0\" prefWidth\u003d\"150.0\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                               VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                 \u003c/children\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "              \u003c/VBox\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "              \u003cVBox fx:id\u003d\"ingredientList\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                    prefHeight\u003d\"80.0\" prefWidth\u003d\"150.0\" styleClass\u003d\"pane-with-border-orange\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                 \u003cpadding\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                    \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                 \u003c/padding\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                 \u003cchildren\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                     \u003cStackPane fx:id\u003d\"ingredientListPanelPlaceholder\" prefHeight\u003d\"78.0\" prefWidth\u003d\"150.0\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                                VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                 \u003c/children\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/VBox\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "               \u003cVBox fx:id\u003d\"personList\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"80.0\" prefWidth\u003d\"150.0\" styleClass\u003d\"pane-with-border-orange\" GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                   \u003cpadding\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                       \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                   \u003c/padding\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                   \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" prefHeight\u003d\"78.0\" prefWidth\u003d\"150.0\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "               \u003c/VBox\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "               \u003cStackPane fx:id\u003d\"calendar\" prefHeight\u003d\"100.0\" prefWidth\u003d\"50.0\" styleClass\u003d\"pane-with-border-orange\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                          GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                   \u003cpadding\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                       \u003cInsets bottom\u003d\"0\" left\u003d\"100\" right\u003d\"100\" top\u003d\"0\" /\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                   \u003c/padding\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "               \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "           \u003c/children\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 5,
      "Diwu-Yi": 1,
      "yanbingtao": 49,
      "WM71811": 1,
      "-": 49
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"20\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "          \u003cLabel fx:id\u003d\"isArchived\" styleClass\u003d\"cell_big_label-archived\" text\u003d\"\\$isArchived\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "          \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "               \u003cLabel fx:id\u003d\"contactNumber\" styleClass\u003d\"cell_small_label_italic\" text\u003d\"Contact Number: \" \u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                  \u003cminWidth\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                     \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                  \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "               \u003cLabel fx:id\u003d\"emergencyContactHeader\" styleClass\u003d\"cell_small_label_italic\" text\u003d\"Emergency Contact: \"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                  \u003cminWidth\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                     \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                  \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            \u003cLabel fx:id\u003d\"emergency\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$emergency\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "               \u003cLabel fx:id\u003d\"addressHeader\" styleClass\u003d\"cell_small_label_italic\" text\u003d\"Address: \"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                  \u003cminWidth\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                     \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                  \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 4,
      "Diwu-Yi": 2,
      "yanbingtao": 32,
      "-": 29,
      "Persdre": 1
    }
  },
  {
    "path": "src/main/resources/view/PersonListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "  \u003cLabel fx:id\u003d\"headerPersonList\" text\u003d\"\\$Label\" styleClass\u003d\"list-panel-header\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cListView fx:id\u003d\"personListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 1,
      "yanbingtao": 2,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/SalesRecordListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "\u003cHBox fx:id\u003d\"salesCardPane\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"35\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            \u003cLabel fx:id\u003d\"record\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$record\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 22
    }
  },
  {
    "path": "src/main/resources/view/SalesRecordListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    \u003cLabel fx:id\u003d\"header\" text\u003d\"\\$Label\" styleClass\u003d\"list-panel-header\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    \u003cListView fx:id\u003d\"salesRecordEntryListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 9,
      "yanbingtao": 1
    }
  },
  {
    "path": "src/test/data/JsonAddressBookStorageTest/invalidAndValidPersonAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Valid Person\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    \"phone\": \"9482424\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person With Invalid Phone Field\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    \"phone\": \"948asdf2424\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "Persdre": 2
    }
  },
  {
    "path": "src/test/data/JsonAddressBookStorageTest/invalidPersonAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    \"phone\": \"9482424\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "Persdre": 1
    }
  },
  {
    "path": "src/test/data/JsonIngredientBookStorageTest/InvalidAndValidIngredientIngredientBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  \"ingredients\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    \"ingredientName\" : \"Milk\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    \"amount\" : \"0\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    \"ingredientName\" : \"Ingredient with invalid amount field\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    \"amount\" : \"948asdf2\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  }]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WM71811": 9
    }
  },
  {
    "path": "src/test/data/JsonIngredientBookStorageTest/InvalidIngredientIngredientBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  \"ingredients\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    \"ingredientName\" : \"Ingredient with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    \"amount\" : \"0\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "WM71811": 7
    }
  },
  {
    "path": "src/test/data/JsonIngredientBookStorageTest/notJsonFormatIngredientBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "not json format!"
      }
    ],
    "authorContributionMap": {
      "WM71811": 1
    }
  },
  {
    "path": "src/test/data/JsonSerializableIngredientBookTest/duplicateIngredientIngredientBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  \"ingredients\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    \"ingredientName\" : \"Milk\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    \"amount\" : \"0\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    \"ingredientName\" : \"Milk\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    \"amount\" : \"0\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  }]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WM71811": 9
    }
  },
  {
    "path": "src/test/data/JsonSerializableIngredientBookTest/invalidIngredientIngredientBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  \"ingredients\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    \"ingredientName\" : \"Ingredient with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    \"amount\" : \"0\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WM71811": 6
    }
  },
  {
    "path": "src/test/data/JsonSerializableIngredientBookTest/typicalIngredientsIngredientBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  \"ingredients\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    \"ingredientName\" : \"Milk\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    \"amount\" : \"0\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    \"ingredientName\" : \"Pearl\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    \"amount\" : \"0\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    \"ingredientName\" : \"Boba\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    \"amount\" : \"0\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    \"ingredientName\" : \"Black Tea\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    \"amount\" : \"0\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    \"ingredientName\" : \"Green Tea\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    \"amount\" : \"0\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    \"ingredientName\" : \"Brown Sugar\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    \"amount\" : \"0\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WM71811"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WM71811": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    //---------------- Tests for isUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void isUnsignedInteger() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertFalse(StringUtil.isUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertFalse(StringUtil.isUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertFalse(StringUtil.isUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertFalse(StringUtil.isUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertTrue(StringUtil.isUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertTrue(StringUtil.isUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertFalse(StringUtil.isUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertFalse(StringUtil.isUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertFalse(StringUtil.isUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertFalse(StringUtil.isUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertFalse(StringUtil.isUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertTrue(StringUtil.isUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertTrue(StringUtil.isUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 35,
      "-": 143
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.storage.JsonIngredientBookStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.storage.JsonSalesBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        JsonSalesBookStorage salesBookStorage \u003d new JsonSalesBookStorage("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                temporaryFolder.resolve(\"salesBook.json\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        JsonIngredientBookStorage ingredientBookStorage \u003d new JsonIngredientBookStorage("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                temporaryFolder.resolve(\"ingredientBook.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                salesBookStorage, userPrefsStorage, ingredientBookStorage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        String deleteCommand \u003d \"c-delete 9\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void getFilteredSalesRecordList_modifyList_throwsUnsupportedOperationsException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredSalesRecordList().remove(0));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getSalesBook(),"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                model.getIngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 5,
      "Diwu-Yi": 2,
      "yanbingtao": 10,
      "WM71811": 3,
      "-": 132
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.IngredientBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.SalesBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new SalesBook(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new IngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getSalesBook(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                model.getIngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPerson), model,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 6,
      "-": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.Drink;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ReadOnlyIngredientBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import seedu.address.model.ReadOnlySalesBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.SalesBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import seedu.address.model.SalesRecordEntry;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        public Path getIngredientBookFilePath() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        public void setIngredientBookFilePath(Path ingredientBookFilePath) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        public Path getSalesBookFilePath() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        public void setSalesBookFilePath(Path ingredientBookFilePath) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        public void addSalesRecordEntry(SalesRecordEntry salesRecordEntry) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        public void addIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        public void setIngredientBook(ReadOnlyIngredientBook newDara) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        public ReadOnlyIngredientBook getIngredientBook() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        public boolean hasIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        public void setIngredient(Ingredient target, Ingredient newAmount) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        public void setSalesBook(ReadOnlySalesBook salesBook) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        public SalesBook getSalesBook() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        public boolean isEmptySalesBook() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        public void overwrite(Map\u003cDrink, Integer\u003e salesInput) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        public ObservableList\u003cIngredient\u003e getFilteredIngredientList() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        public ObservableList\u003cSalesRecordEntry\u003e getFilteredSalesRecordList() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        public void updateFilteredSalesList(Predicate\u003cSalesRecordEntry\u003e predicate) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        public void updateFilteredIngredientList(Predicate\u003cIngredient\u003e predicate) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        public Ingredient findIngredientByName(IngredientName ingredientName) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        public ArrayList\u003cIngredient\u003e findIngredientInShortage() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 25,
      "Diwu-Yi": 32,
      "yanbingtao": 19,
      "WM71811": 32,
      "-": 194
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ArchiveCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.IngredientBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.model.SalesBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "public class ArchiveCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private Model model \u003d new ModelManager(TypicalPersons.getTypicalAddressBook(), new SalesBook(),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            new IngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        ArchiveCommand archiveCommand \u003d new ArchiveCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        assertCommandFailure(archiveCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        showPersonAtIndex(model, TypicalIndexes.INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        Index outOfBoundIndex \u003d TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of CouponStash list"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        ArchiveCommand archiveCommand \u003d new ArchiveCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        assertCommandFailure(archiveCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        ArchiveCommand archiveFirstCommand \u003d new ArchiveCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        ArchiveCommand archiveSecondCommand \u003d new ArchiveCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        assertTrue(archiveFirstCommand.equals(archiveFirstCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        ArchiveCommand archiveFirstCommandCopy \u003d new ArchiveCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        assertTrue(archiveFirstCommand.equals(archiveFirstCommandCopy));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        assertFalse(archiveFirstCommand.equals(1));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        assertFalse(archiveFirstCommand.equals(null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        assertFalse(archiveFirstCommand.equals(archiveSecondCommand));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 1,
      "yanbingtao": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.IngredientBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.SalesBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new SalesBook(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new IngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new SalesBook(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new IngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 6,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, false).hashCode());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 5,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Persdre"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMERGENCY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    public static final String VALID_EMERGENCY_AMY \u003d \"33333333\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    public static final String VALID_EMERGENCY_BOB \u003d \"44444444\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    public static final String EMERGENCY_DESC_AMY \u003d \" \" + PREFIX_EMERGENCY + VALID_EMERGENCY_AMY;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    public static final String EMERGENCY_DESC_BOB \u003d \" \" + PREFIX_EMERGENCY + VALID_EMERGENCY_BOB;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    public static final String INVALID_EMERGENCY_DESC \u003d \" \" + PREFIX_EMERGENCY"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            + \"911b\"; // \u0027b\u0027 not allowed in emergency_contact"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmergency(VALID_EMERGENCY_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmergency(VALID_EMERGENCY_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 120,
      "Persdre": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.IngredientBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.SalesBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new SalesBook(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            new IngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getSalesBook(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new IngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getSalesBook(),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new IngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 9,
      "-": 106
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Persdre"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMERGENCY_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.IngredientBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.SalesBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new SalesBook(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            new IngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new ModelManager(new AddressBook(model.getAddressBook()), model.getSalesBook(),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                        model.getIngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                .withEmergency(VALID_EMERGENCY_BOB)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                .withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                .withEmergency(VALID_EMERGENCY_BOB)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new ModelManager(new AddressBook(model.getAddressBook()), model.getSalesBook(),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                        model.getIngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new ModelManager(new AddressBook(model.getAddressBook()), model.getSalesBook(),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                        model.getIngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new ModelManager(new AddressBook(model.getAddressBook()), model.getSalesBook(),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                        model.getIngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 4,
      "Diwu-Yi": 12,
      "-": 167,
      "Persdre": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.IngredientBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.SalesBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new SalesBook(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            new IngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new SalesBook(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            new IngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 6,
      "-": 81
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.IngredientBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.SalesBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new SalesBook(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new IngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), model.getSalesBook(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                model.getIngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 6,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SalesFindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Persdre"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Persdre"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Persdre"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Persdre"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Persdre"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DRINKS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Persdre"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Persdre"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Persdre"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Persdre"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Persdre"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Persdre"
        },
        "content": "import seedu.address.model.IngredientBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Persdre"
        },
        "content": "import seedu.address.model.InputContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Persdre"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Persdre"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Persdre"
        },
        "content": "import seedu.address.model.SalesBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Persdre"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Persdre"
        },
        "content": "public class SalesFindCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new SalesBook(),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            new IngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new SalesBook(),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            new IngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        InputContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                new InputContainsKeywordsPredicate(Collections.singletonList(\"BSBM\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        InputContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                new InputContainsKeywordsPredicate(Collections.singletonList(\"BSBBT\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        SalesFindCommand findFirstCommand \u003d new SalesFindCommand(firstPredicate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        SalesFindCommand findSecondCommand \u003d new SalesFindCommand(secondPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        // different drink keywords -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    public void execute_zeroKeywords_noDrinkFound() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_DRINKS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        InputContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        SalesFindCommand command \u003d new SalesFindCommand(predicate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        expectedModel.updateFilteredSalesList(predicate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredSalesRecordList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Persdre"
        },
        "content": "     * Parses {@code userInput} into a {@code InputContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Persdre"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    private InputContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        return new InputContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Persdre"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Persdre": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SalesListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import seedu.address.model.Drink;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import seedu.address.model.IngredientBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import seedu.address.model.SalesBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import seedu.address.model.SalesRecordEntry;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "public class SalesListCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new SalesBook(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                new IngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), model.getSalesBook(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                model.getIngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void execute_emptySalesBook_displaysNoItemPresentMessage() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertCommandSuccess(new SalesListCommand(), model, SalesListCommand.MESSAGE_NO_RECORD_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void execute_nonEmptySalesBook_successMessage() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        SalesRecordEntry entry \u003d new SalesRecordEntry(Drink.BSBGT, 30);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        List\u003cSalesRecordEntry\u003e newList \u003d Collections.singletonList(entry);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        model.getSalesBook().setRecord(newList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), model.getSalesBook(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                model.getIngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        String expectedMessage \u003d String.format(SalesListCommand.MESSAGE_SUCCESS, model.getSalesBook());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertCommandSuccess(new SalesListCommand(), model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SalesUpdateCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.Drink;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.IngredientBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.SalesBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "public class SalesUpdateCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new SalesBook(),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            new IngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void execute_updateOneDrinkItem_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        final int numBsbmSold \u003d 80;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        HashMap\u003cDrink, Integer\u003e sales \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSBM, numBsbmSold);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSBBT, 0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSBGT, 0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSPM, 0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSPBT, 0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSPGT, 0);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        SalesUpdateCommand command \u003d new SalesUpdateCommand(sales);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        String expectedMessage \u003d String.format(SalesUpdateCommand.MESSAGE_SUCCESS, sales.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new ModelManager(new AddressBook(model.getAddressBook()), model.getSalesBook(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                        new IngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        expectedModel.overwrite(sales);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        final HashMap\u003cDrink, Integer\u003e standardSales \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        standardSales.put(Drink.BSBBT, 100);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        final SalesUpdateCommand standardCommand \u003d new SalesUpdateCommand(standardSales);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        SalesUpdateCommand commandWithSameValues \u003d new SalesUpdateCommand(standardSales);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // different sales -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        final HashMap\u003cDrink, Integer\u003e differentSales \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        differentSales.put(Drink.BSBBT, 10);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertFalse(standardCommand.equals(new SalesUpdateCommand(differentSales)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 59,
      "Diwu-Yi": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ingredientcommands/IngredientListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "package seedu.address.logic.commands.ingredientcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.IngredientBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ReadOnlyIngredientBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ingredient.Amount;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WM71811"
        },
        "content": "public class IngredientListCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public void execute_viewIngredient_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        Model expectedModel \u003d model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        Amount amount \u003d new Amount (\"10\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        IngredientBook defaultBook \u003d new IngredientBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        defaultBook.addIngredient(new Ingredient(new IngredientName(\"Milk\"), amount));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        defaultBook.addIngredient(new Ingredient(new IngredientName(\"Pearl\"), amount));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        defaultBook.addIngredient(new Ingredient(new IngredientName(\"Boba\"), amount));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        defaultBook.addIngredient(new Ingredient(new IngredientName(\"Black Tea\"), amount));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        defaultBook.addIngredient(new Ingredient(new IngredientName(\"Green Tea\"), amount));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        defaultBook.addIngredient(new Ingredient(new IngredientName(\"Brown Sugar\"), amount));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        ReadOnlyIngredientBook readOnlyIngredientBook \u003d defaultBook;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        model.setIngredientBook(readOnlyIngredientBook);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        IngredientBook original \u003d new IngredientBook();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        original.addIngredient(new Ingredient(new IngredientName(\"Milk\"), amount));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        original.addIngredient(new Ingredient(new IngredientName(\"Pearl\"), amount));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        original.addIngredient(new Ingredient(new IngredientName(\"Boba\"), amount));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        original.addIngredient(new Ingredient(new IngredientName(\"Black Tea\"), amount));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        original.addIngredient(new Ingredient(new IngredientName(\"Green Tea\"), amount));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        original.addIngredient(new Ingredient(new IngredientName(\"Brown Sugar\"), amount));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        ReadOnlyIngredientBook defaultReadOnlyIngredientBook \u003d original;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        expectedModel.setIngredientBook(defaultReadOnlyIngredientBook);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        final IngredientListCommand standardCommand \u003d new"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                IngredientListCommand();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        assertCommandSuccess(standardCommand, model,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                IngredientListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        final IngredientListCommand standardCommand \u003d new IngredientListCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        IngredientListCommand commandWithSameValues \u003d new IngredientListCommand();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WM71811"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 1,
      "WM71811": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ingredientcommands/IngredientResetAllCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "package seedu.address.logic.commands.ingredientcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.IngredientBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ReadOnlyIngredientBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ingredient.Amount;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": "public class IngredientResetAllCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public void execute_resetAllIngredients_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        Model expectedModel \u003d model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        Amount amount \u003d new Amount (\"10\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        IngredientBook defaultBook \u003d new IngredientBook();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        defaultBook.addIngredient(new Ingredient(new IngredientName(\"Milk\"), amount));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        defaultBook.addIngredient(new Ingredient(new IngredientName(\"Pearl\"), amount));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        defaultBook.addIngredient(new Ingredient(new IngredientName(\"Boba\"), amount));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        defaultBook.addIngredient(new Ingredient(new IngredientName(\"Black Tea\"), amount));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        defaultBook.addIngredient(new Ingredient(new IngredientName(\"Green Tea\"), amount));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        defaultBook.addIngredient(new Ingredient(new IngredientName(\"Brown Sugar\"), amount));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        ReadOnlyIngredientBook readOnlyIngredientBook \u003d defaultBook;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        model.setIngredientBook(readOnlyIngredientBook);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        IngredientBook original \u003d new IngredientBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        original.addIngredient(new Ingredient(new IngredientName(\"Milk\"), amount));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        original.addIngredient(new Ingredient(new IngredientName(\"Pearl\"), amount));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        original.addIngredient(new Ingredient(new IngredientName(\"Boba\"), amount));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        original.addIngredient(new Ingredient(new IngredientName(\"Black Tea\"), amount));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        original.addIngredient(new Ingredient(new IngredientName(\"Green Tea\"), amount));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        original.addIngredient(new Ingredient(new IngredientName(\"Brown Sugar\"), amount));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        ReadOnlyIngredientBook defaultReadOnlyIngredientBook \u003d original;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        expectedModel.setIngredientBook(defaultReadOnlyIngredientBook);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        assertCommandSuccess(new IngredientResetAllCommand(), model,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                IngredientResetAllCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        final IngredientResetAllCommand standardCommand \u003d new IngredientResetAllCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        IngredientResetAllCommand commandWithSameValues \u003d new IngredientResetAllCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WM71811"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WM71811": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ingredientcommands/IngredientRestockCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "package seedu.address.logic.commands.ingredientcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.IngredientBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ReadOnlyIngredientBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ingredient.Amount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": "public class IngredientRestockCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public void execute_viewIngredientsInShortage_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        Model expectedModel \u003d model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        Amount amount \u003d new Amount (\"4\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        IngredientBook defaultBook \u003d new IngredientBook();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        defaultBook.addIngredient(new Ingredient(new IngredientName(\"Milk\"), amount));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        defaultBook.addIngredient(new Ingredient(new IngredientName(\"Pearl\"), amount));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        defaultBook.addIngredient(new Ingredient(new IngredientName(\"Boba\"), amount));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        defaultBook.addIngredient(new Ingredient(new IngredientName(\"Black Tea\"), amount));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        defaultBook.addIngredient(new Ingredient(new IngredientName(\"Green Tea\"), amount));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        defaultBook.addIngredient(new Ingredient(new IngredientName(\"Brown Sugar\"), amount));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        ReadOnlyIngredientBook readOnlyIngredientBook \u003d defaultBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        model.setIngredientBook(readOnlyIngredientBook);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        IngredientBook original \u003d new IngredientBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        original.addIngredient(new Ingredient(new IngredientName(\"Milk\"), amount));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        original.addIngredient(new Ingredient(new IngredientName(\"Pearl\"), amount));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        original.addIngredient(new Ingredient(new IngredientName(\"Boba\"), amount));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        original.addIngredient(new Ingredient(new IngredientName(\"Black Tea\"), amount));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        original.addIngredient(new Ingredient(new IngredientName(\"Green Tea\"), amount));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        original.addIngredient(new Ingredient(new IngredientName(\"Brown Sugar\"), amount));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        ReadOnlyIngredientBook defaultReadOnlyIngredientBook \u003d original;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        expectedModel.setIngredientBook(defaultReadOnlyIngredientBook);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        final IngredientRestockCommand standardCommand \u003d new"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                IngredientRestockCommand();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        String ingredientList \u003d \"\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        final char lineSeparator \u003d \u0027\\n\u0027;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        List\u003cIngredient\u003e lastShownList \u003d expectedModel.getFilteredIngredientList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        for (Ingredient i : lastShownList) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            ingredientList +\u003d i.toString() + lineSeparator;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        assertCommandSuccess(standardCommand, model,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                IngredientRestockCommand.MESSAGE_SUCCESS + ingredientList, expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WM71811"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WM71811": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ingredientcommands/IngredientViewSingleCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "package seedu.address.logic.commands.ingredientcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.IngredientBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ReadOnlyIngredientBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ingredient.Amount;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": "public class IngredientViewSingleCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public void execute_viewIngredient_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        Model expectedModel \u003d model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        Amount amount \u003d new Amount (\"10\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        IngredientBook defaultBook \u003d new IngredientBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        defaultBook.addIngredient(new Ingredient(new IngredientName(\"Milk\"), amount));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        defaultBook.addIngredient(new Ingredient(new IngredientName(\"Pearl\"), amount));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        defaultBook.addIngredient(new Ingredient(new IngredientName(\"Boba\"), amount));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        defaultBook.addIngredient(new Ingredient(new IngredientName(\"Black Tea\"), amount));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        defaultBook.addIngredient(new Ingredient(new IngredientName(\"Green Tea\"), amount));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        defaultBook.addIngredient(new Ingredient(new IngredientName(\"Brown Sugar\"), amount));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        ReadOnlyIngredientBook readOnlyIngredientBook \u003d defaultBook;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        model.setIngredientBook(readOnlyIngredientBook);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        IngredientBook original \u003d new IngredientBook();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        original.addIngredient(new Ingredient(new IngredientName(\"Milk\"), amount));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        original.addIngredient(new Ingredient(new IngredientName(\"Pearl\"), amount));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        original.addIngredient(new Ingredient(new IngredientName(\"Boba\"), amount));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        original.addIngredient(new Ingredient(new IngredientName(\"Black Tea\"), amount));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        original.addIngredient(new Ingredient(new IngredientName(\"Green Tea\"), amount));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        original.addIngredient(new Ingredient(new IngredientName(\"Brown Sugar\"), amount));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        ReadOnlyIngredientBook defaultReadOnlyIngredientBook \u003d original;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        expectedModel.setIngredientBook(defaultReadOnlyIngredientBook);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        IngredientViewSingleCommand.ViewIngredientDescriptor descriptor \u003d new"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                IngredientViewSingleCommand.ViewIngredientDescriptor();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        final IngredientViewSingleCommand standardCommand \u003d new"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                IngredientViewSingleCommand(new IngredientName(\"Milk\"), descriptor);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        final String messageSuccess \u003d \"Here is the ingredient and its level: \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                + new Ingredient(new IngredientName(\"Milk\"), amount).toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        assertCommandSuccess(standardCommand, model, messageSuccess, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        IngredientViewSingleCommand.ViewIngredientDescriptor descriptor \u003d new"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                IngredientViewSingleCommand.ViewIngredientDescriptor();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        final IngredientViewSingleCommand standardCommand \u003d new"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                IngredientViewSingleCommand(new IngredientName(\"Milk\"), descriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        IngredientViewSingleCommand commandWithSameValues \u003d new"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                IngredientViewSingleCommand(new IngredientName(\"Milk\"), descriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        // different ingredient names -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        IngredientViewSingleCommand commandWithDifferentValues \u003d new"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                IngredientViewSingleCommand(new IngredientName(\"Boba\"), descriptor);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        assertFalse(standardCommand.equals(commandWithDifferentValues));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WM71811"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WM71811": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ingredientcommands/SetAllCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "package seedu.address.logic.commands.ingredientcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.IngredientBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ReadOnlyIngredientBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.SalesBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.Amount;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for SetAllCommand."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "class SetAllCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private static final Amount MILK_AMOUNT \u003d new Amount(\"10\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private static final Amount PEARL_AMOUNT \u003d new Amount(\"10\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private static final Amount BOBA_AMOUNT \u003d new Amount(\"10\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private static final Amount BLACK_TEA_AMOUNT \u003d new Amount(\"10\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private static final Amount GREEN_TEA_AMOUNT \u003d new Amount(\"10\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private static final Amount BROWN_SUGAR_AMOUNT \u003d new Amount(\"10\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private static final IngredientBook stubBook \u003d new IngredientBook();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private static final IngredientBook filledBook \u003d new IngredientBook();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new SalesBook(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            new IngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void execute_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        SetAllCommand setAllCommand \u003d new SetAllCommand(MILK_AMOUNT, PEARL_AMOUNT,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                BOBA_AMOUNT, BLACK_TEA_AMOUNT, GREEN_TEA_AMOUNT, BROWN_SUGAR_AMOUNT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        stubBook.addIngredient(new Ingredient(new IngredientName(\"Milk\")));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        stubBook.addIngredient(new Ingredient(new IngredientName(\"Pearl\")));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        stubBook.addIngredient(new Ingredient(new IngredientName(\"Boba\")));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        stubBook.addIngredient(new Ingredient(new IngredientName(\"Black Tea\")));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        stubBook.addIngredient(new Ingredient(new IngredientName(\"Green Tea\")));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        stubBook.addIngredient(new Ingredient(new IngredientName(\"Brown Sugar\")));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        stubBook.setIngredient(new Ingredient(new IngredientName(\"Milk\")),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new Ingredient(new IngredientName(\"Milk\"), new Amount(\"10\")));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        stubBook.setIngredient(new Ingredient(new IngredientName(\"Pearl\")),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new Ingredient(new IngredientName(\"Pearl\"), new Amount(\"10\")));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        stubBook.setIngredient(new Ingredient(new IngredientName(\"Boba\")),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new Ingredient(new IngredientName(\"Boba\"), new Amount(\"10\")));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        stubBook.setIngredient(new Ingredient(new IngredientName(\"Black Tea\")),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new Ingredient(new IngredientName(\"Black Tea\"), new Amount(\"10\")));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        stubBook.setIngredient(new Ingredient(new IngredientName(\"Green Tea\")),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new Ingredient(new IngredientName(\"Green Tea\"), new Amount(\"10\")));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        stubBook.setIngredient(new Ingredient(new IngredientName(\"Brown Sugar\")),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new Ingredient(new IngredientName(\"Brown Sugar\"), new Amount(\"10\")));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        ReadOnlyIngredientBook readOnlyToSet \u003d stubBook;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        String expectedMessage \u003d String.format(SetAllCommand.MESSAGE_SUCCESS, stubBook);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new ModelManager(new AddressBook(model.getAddressBook()), model.getSalesBook(),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                        model.getIngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        expectedModel.setIngredientBook(readOnlyToSet);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        filledBook.addIngredient(new Ingredient(new IngredientName(\"Milk\")));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        filledBook.addIngredient(new Ingredient(new IngredientName(\"Pearl\")));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        filledBook.addIngredient(new Ingredient(new IngredientName(\"Boba\")));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        filledBook.addIngredient(new Ingredient(new IngredientName(\"Black Tea\")));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        filledBook.addIngredient(new Ingredient(new IngredientName(\"Green Tea\")));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        filledBook.addIngredient(new Ingredient(new IngredientName(\"Brown Sugar\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        model.setIngredientBook(filledBook);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertCommandSuccess(setAllCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        final SetAllCommand standardCommand \u003d new SetAllCommand(MILK_AMOUNT, PEARL_AMOUNT,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                BOBA_AMOUNT, BLACK_TEA_AMOUNT, GREEN_TEA_AMOUNT, BROWN_SUGAR_AMOUNT);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        SetAllCommand commandWithSameValues \u003d new SetAllCommand(MILK_AMOUNT, PEARL_AMOUNT,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                BOBA_AMOUNT, BLACK_TEA_AMOUNT, GREEN_TEA_AMOUNT, BROWN_SUGAR_AMOUNT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertFalse(standardCommand.equals(new SetAllCommand(new Amount(\"30\"), PEARL_AMOUNT,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                BOBA_AMOUNT, BLACK_TEA_AMOUNT, GREEN_TEA_AMOUNT, BROWN_SUGAR_AMOUNT)));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 111,
      "WM71811": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ingredientcommands/SetCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "package seedu.address.logic.commands.ingredientcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.IngredientBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.SalesBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.Amount;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "class SetCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private static Ingredient target \u003d new Ingredient(new IngredientName(\"Milk\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private static final IngredientBook stubBook \u003d new IngredientBook();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private static final IngredientBook stubBook2 \u003d new IngredientBook();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private Model model \u003d new ModelManager(new AddressBook(), new SalesBook(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            new IngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void execute_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        stubBook.addIngredient(new Ingredient(new IngredientName(\"Milk\")));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        stubBook.addIngredient(new Ingredient(new IngredientName(\"Pearl\")));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        stubBook.addIngredient(new Ingredient(new IngredientName(\"Boba\")));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        stubBook.addIngredient(new Ingredient(new IngredientName(\"Black Tea\")));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        stubBook.addIngredient(new Ingredient(new IngredientName(\"Green Tea\")));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        stubBook.addIngredient(new Ingredient(new IngredientName(\"Brown Sugar\")));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        model.setIngredientBook(stubBook);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        Ingredient editedIngredient \u003d new Ingredient(new IngredientName(\"Milk\"), new Amount(\"20\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        SetCommand.SetIngredientDescriptor descriptor \u003d new SetCommand.SetIngredientDescriptor();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        descriptor.setAmount(new Amount(\"20\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        SetCommand setCommand \u003d new SetCommand(target.getIngredientName(), descriptor);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        String expectedMessage \u003d String.format(SetCommand.MESSAGE_SUCCESS, editedIngredient);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new ModelManager(new AddressBook(model.getAddressBook()), model.getSalesBook(),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                        stubBook, new UserPrefs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        expectedModel.setIngredient(target, editedIngredient);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertCommandSuccess(setCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void execute_amountsNotChanged_failure() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        stubBook2.addIngredient(new Ingredient(new IngredientName(\"Milk\")));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        stubBook2.addIngredient(new Ingredient(new IngredientName(\"Pearl\")));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        stubBook2.addIngredient(new Ingredient(new IngredientName(\"Boba\")));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        stubBook2.addIngredient(new Ingredient(new IngredientName(\"Black Tea\")));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        stubBook2.addIngredient(new Ingredient(new IngredientName(\"Green Tea\")));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        stubBook2.addIngredient(new Ingredient(new IngredientName(\"Brown Sugar\")));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        model.setIngredientBook(stubBook2);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        SetCommand.SetIngredientDescriptor descriptor \u003d new SetCommand.SetIngredientDescriptor();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        descriptor.setAmount(new Amount(\"0\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        SetCommand setCommand \u003d new SetCommand(new IngredientName(\"Pearl\"), descriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        String expectedMessage \u003d SetCommand.MESSAGE_NO_CHANGE;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertCommandFailure(setCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        final SetCommand.SetIngredientDescriptor descriptor \u003d new SetCommand.SetIngredientDescriptor();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        descriptor.setAmount(new Amount(\"20\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        final SetCommand standardCommand \u003d new SetCommand(new IngredientName(\"Milk\"), descriptor);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        SetCommand.SetIngredientDescriptor copyDescriptor \u003d new SetCommand.SetIngredientDescriptor();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        copyDescriptor.setAmount(new Amount(\"20\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        SetCommand commandWithSameValues \u003d new SetCommand(new IngredientName(\"Milk\"), copyDescriptor);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        // different ingredient name -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertFalse(standardCommand.equals(new SetCommand(new IngredientName(\"Boba\"), copyDescriptor)));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertFalse(standardCommand.equals(new SetCommand(new IngredientName(\"Milk\"),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new SetCommand.SetIngredientDescriptor())));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 106
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ingredientcommands/SetDefaultCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "package seedu.address.logic.commands.ingredientcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.IngredientBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ReadOnlyIngredientBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.SalesBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.Amount;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "class SetDefaultCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private static final IngredientBook stubBook \u003d new IngredientBook();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private static final IngredientBook stubBook2 \u003d new IngredientBook();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private static final IngredientBook filledBook \u003d new IngredientBook();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void execute_emptyIngredientBook_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        stubBook.addIngredient(new Ingredient(new IngredientName(\"Milk\")));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        stubBook.addIngredient(new Ingredient(new IngredientName(\"Pearl\")));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        stubBook.addIngredient(new Ingredient(new IngredientName(\"Boba\")));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        stubBook.addIngredient(new Ingredient(new IngredientName(\"Black Tea\")));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        stubBook.addIngredient(new Ingredient(new IngredientName(\"Green Tea\")));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        stubBook.addIngredient(new Ingredient(new IngredientName(\"Brown Sugar\")));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        stubBook.setIngredient(new Ingredient(new IngredientName(\"Milk\")),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new Ingredient(new IngredientName(\"Milk\"), new Amount(\"50\")));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        stubBook.setIngredient(new Ingredient(new IngredientName(\"Pearl\")),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new Ingredient(new IngredientName(\"Pearl\"), new Amount(\"20\")));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        stubBook.setIngredient(new Ingredient(new IngredientName(\"Boba\")),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new Ingredient(new IngredientName(\"Boba\"), new Amount(\"20\")));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        stubBook.setIngredient(new Ingredient(new IngredientName(\"Black Tea\")),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new Ingredient(new IngredientName(\"Black Tea\"), new Amount(\"50\")));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        stubBook.setIngredient(new Ingredient(new IngredientName(\"Green Tea\")),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new Ingredient(new IngredientName(\"Green Tea\"), new Amount(\"50\")));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        stubBook.setIngredient(new Ingredient(new IngredientName(\"Brown Sugar\")),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new Ingredient(new IngredientName(\"Brown Sugar\"), new Amount(\"20\")));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        ReadOnlyIngredientBook defaultReadOnlyIngredientBook \u003d stubBook;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        expectedModel.setIngredientBook(defaultReadOnlyIngredientBook);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertCommandSuccess(new SetDefaultCommand(), model, SetDefaultCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void execute_nonEmptyIngredientBook_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        filledBook.addIngredient(new Ingredient(new IngredientName(\"Milk\")));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        filledBook.addIngredient(new Ingredient(new IngredientName(\"Pearl\")));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        filledBook.addIngredient(new Ingredient(new IngredientName(\"Boba\")));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        filledBook.addIngredient(new Ingredient(new IngredientName(\"Black Tea\")));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        filledBook.addIngredient(new Ingredient(new IngredientName(\"Green Tea\")));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        filledBook.addIngredient(new Ingredient(new IngredientName(\"Brown Sugar\")));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new SalesBook(),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                filledBook, new UserPrefs());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        model.setIngredient(new Ingredient(new IngredientName(\"Milk\")),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new Ingredient(new IngredientName(\"Milk\"), new Amount(\"100\")));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        model.setIngredient(new Ingredient(new IngredientName(\"Pearl\")),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new Ingredient(new IngredientName(\"Pearl\"), new Amount(\"120\")));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new SalesBook(),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                stubBook2, new UserPrefs());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        stubBook2.addIngredient(new Ingredient(new IngredientName(\"Milk\")));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        stubBook2.addIngredient(new Ingredient(new IngredientName(\"Pearl\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        stubBook2.addIngredient(new Ingredient(new IngredientName(\"Boba\")));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        stubBook2.addIngredient(new Ingredient(new IngredientName(\"Black Tea\")));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        stubBook2.addIngredient(new Ingredient(new IngredientName(\"Green Tea\")));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        stubBook2.addIngredient(new Ingredient(new IngredientName(\"Brown Sugar\")));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        stubBook2.setIngredient(new Ingredient(new IngredientName(\"Milk\")),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new Ingredient(new IngredientName(\"Milk\"), new Amount(\"50\")));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        stubBook2.setIngredient(new Ingredient(new IngredientName(\"Pearl\")),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new Ingredient(new IngredientName(\"Pearl\"), new Amount(\"20\")));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        stubBook2.setIngredient(new Ingredient(new IngredientName(\"Boba\")),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new Ingredient(new IngredientName(\"Boba\"), new Amount(\"20\")));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        stubBook2.setIngredient(new Ingredient(new IngredientName(\"Black Tea\")),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new Ingredient(new IngredientName(\"Black Tea\"), new Amount(\"50\")));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        stubBook2.setIngredient(new Ingredient(new IngredientName(\"Green Tea\")),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new Ingredient(new IngredientName(\"Green Tea\"), new Amount(\"50\")));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        stubBook2.setIngredient(new Ingredient(new IngredientName(\"Brown Sugar\")),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new Ingredient(new IngredientName(\"Brown Sugar\"), new Amount(\"20\")));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        ReadOnlyIngredientBook defaultReadOnlyIngredientBook \u003d stubBook2;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        expectedModel.setIngredientBook(defaultReadOnlyIngredientBook);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertCommandSuccess(new SetDefaultCommand(), model, SetDefaultCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 107
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Persdre"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMERGENCY_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Persdre"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMERGENCY_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Persdre"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMERGENCY_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Persdre"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMERGENCY_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                + EMERGENCY_DESC_BOB"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                + EMERGENCY_DESC_BOB"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                + EMERGENCY_DESC_BOB"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        // multiple emergency contact - last emergency contact(phone) accepted"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                + EMERGENCY_DESC_AMY"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                + EMERGENCY_DESC_BOB"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                + EMERGENCY_DESC_BOB"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMERGENCY_DESC_BOB"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMERGENCY_DESC_AMY + ADDRESS_DESC_AMY,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMERGENCY_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMERGENCY_DESC_BOB"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                        + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        // missing emergency contact"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMERGENCY_BOB"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                        + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMERGENCY_DESC_BOB"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                        + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMERGENCY_BOB"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                        + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMERGENCY_DESC_BOB"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMERGENCY_DESC_BOB"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        // invalid emergency contact"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMERGENCY_DESC"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMERGENCY_DESC_BOB"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMERGENCY_DESC_BOB"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMERGENCY_DESC_BOB"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                        + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                + EMERGENCY_DESC_BOB"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 112,
      "Persdre": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BSBM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import seedu.address.logic.commands.SalesListCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import seedu.address.logic.commands.SalesUpdateCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.logic.commands.ingredientcommands.IngredientListCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.logic.commands.ingredientcommands.IngredientResetAllCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.logic.commands.ingredientcommands.IngredientViewSingleCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import seedu.address.model.Drink;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public void parseCommand_resetAllIngredients() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        assertTrue(parser.parseCommand(IngredientResetAllCommand.COMMAND_WORD) instanceof IngredientResetAllCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        assertTrue(parser.parseCommand(IngredientResetAllCommand.COMMAND_WORD + \" 3\")"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                instanceof IngredientResetAllCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public void parseCommand_ingredientViewSingle() throws Exception {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        final String userInput \u003d IngredientViewSingleCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                + \" \" + PREFIX_INGREDIENT + \"Milk \";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        IngredientViewSingleCommand command \u003d (IngredientViewSingleCommand) parser.parseCommand(userInput);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        assertTrue(command instanceof IngredientViewSingleCommand);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public void parseCommand_ingredientList() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        assertTrue(parser.parseCommand(IngredientListCommand.COMMAND_WORD) instanceof IngredientListCommand);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        assertTrue(parser.parseCommand(IngredientListCommand.COMMAND_WORD + \" 3\") instanceof IngredientListCommand);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void parseCommand_salesUpdate() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        final int numBsbmSold \u003d 80;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        final String userInput \u003d SalesUpdateCommand.COMMAND_WORD + \" \" + PREFIX_BSBM + numBsbmSold;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        SalesUpdateCommand command \u003d (SalesUpdateCommand) parser.parseCommand(userInput);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        HashMap\u003cDrink, Integer\u003e sales \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSBM, numBsbmSold);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertEquals(new SalesUpdateCommand(sales), command);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void parseCommand_salesList() throws Exception {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertTrue(parser.parseCommand(SalesListCommand.COMMAND_WORD) instanceof SalesListCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertTrue(parser.parseCommand(SalesListCommand.COMMAND_WORD + \" 3\") instanceof SalesListCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 22,
      "WM71811": 24,
      "-": 101
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ArchiveCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "public class ArchiveCommandParserTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Persdre"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMERGENCY_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Persdre"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMERGENCY_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Persdre"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMERGENCY_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Persdre"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMERGENCY_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Persdre"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMERGENCY_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMERGENCY_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        // invalid emergency contact"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND + EMERGENCY_DESC_BOB"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmergency(VALID_EMERGENCY_BOB)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                .withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + EMERGENCY_DESC_AMY;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                .withEmergency(VALID_EMERGENCY_AMY)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 184,
      "Persdre": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void parseNumberSold_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseNumberSold(\"-1\"));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseNumberSold(\"+100\"));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void parseNumberSold_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertEquals(123, ParserUtil.parseNumberSold(\"123\"));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertEquals(123, ParserUtil.parseNumberSold(\"  123  \"));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 16,
      "-": 171
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SalesFindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Persdre"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Persdre"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Persdre"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Persdre"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Persdre"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Persdre"
        },
        "content": "import seedu.address.logic.commands.SalesFindCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Persdre"
        },
        "content": "import seedu.address.model.InputContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Persdre"
        },
        "content": "public class SalesFindCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    private SalesFindCommandParser parser \u003d new SalesFindCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                SalesFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    public void parse_validArgs_returnsSalesFindCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        SalesFindCommand expectedSalesFindCommand \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                new SalesFindCommand(new InputContainsKeywordsPredicate(Arrays.asList(\"BSBM\")));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Persdre"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Persdre": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SalesUpdateCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BSBBT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BSBM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import seedu.address.logic.commands.SalesUpdateCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import seedu.address.model.Drink;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "public class SalesUpdateCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    private SalesUpdateCommandParser parser \u003d new SalesUpdateCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void parse_salesItemSpecified_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // set up"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        int numBsbmSold \u003d 80;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        int numBsbbtSold \u003d 20;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        HashMap\u003cDrink, Integer\u003e sales \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSBM, numBsbmSold);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // have one item"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        String userInput \u003d \" \" + PREFIX_BSBM.toString() + numBsbmSold;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        SalesUpdateCommand expectedCommand \u003d new SalesUpdateCommand(sales);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // have two item"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSBBT, numBsbbtSold);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        userInput \u003d \" \" + PREFIX_BSBM.toString() + numBsbmSold"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                + \" \" + PREFIX_BSBBT.toString() + numBsbbtSold;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        expectedCommand \u003d new SalesUpdateCommand(sales);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void parse_missingSalesItem_failure() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, SalesUpdateCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // no parameters"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertParseFailure(parser, SalesUpdateCommand.COMMAND_WORD, expectedMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void parse_negativeSalesNumber_failure() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, SalesUpdateCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // no parameters"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertParseFailure(parser, SalesUpdateCommand.COMMAND_WORD + \"BSBM/-100\", expectedMessage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SetAllCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BLACK_TEA;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BOBA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BROWN_SUGAR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GREEN_TEA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MILK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PEARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.logic.commands.ingredientcommands.SetAllCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.Amount;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "class SetAllCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private static final String MILK_AMOUNT \u003d \" \" + PREFIX_MILK + \"10 \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private static final String PEARL_AMOUNT \u003d \" \" + PREFIX_PEARL + \"10 \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private static final String BOBA_AMOUNT \u003d \" \" + PREFIX_BOBA + \"10 \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private static final String BLACK_TEA_AMOUNT \u003d \" \" + PREFIX_BLACK_TEA + \"10 \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private static final String GREEN_TEA_AMOUNT \u003d \" \" + PREFIX_GREEN_TEA + \"10 \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private static final String BROWN_SUGAR_AMOUNT \u003d \" \" + PREFIX_BROWN_SUGAR + \"10 \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetAllCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private SetAllCommandParser parser \u003d new SetAllCommandParser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        // only field specified"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertParseFailure(parser, MILK_AMOUNT, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        // all but one fields are specified"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertParseFailure(parser, MILK_AMOUNT + PEARL_AMOUNT"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                + BOBA_AMOUNT + BLACK_TEA_AMOUNT + GREEN_TEA_AMOUNT, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        // empty input"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        // invalid number being parsed as preamble"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertParseFailure(parser, \"0\" + MILK_AMOUNT"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                + PEARL_AMOUNT + BOBA_AMOUNT + BLACK_TEA_AMOUNT + GREEN_TEA_AMOUNT + BROWN_SUGAR_AMOUNT,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertParseFailure(parser, \"some random string\" + MILK_AMOUNT"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                + PEARL_AMOUNT + BOBA_AMOUNT + BLACK_TEA_AMOUNT + GREEN_TEA_AMOUNT + BROWN_SUGAR_AMOUNT,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertParseFailure(parser, \"i/ string\" + MILK_AMOUNT"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                + PEARL_AMOUNT + BOBA_AMOUNT + BLACK_TEA_AMOUNT + GREEN_TEA_AMOUNT + BROWN_SUGAR_AMOUNT,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        String userInput \u003d MILK_AMOUNT + PEARL_AMOUNT"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                + BOBA_AMOUNT + BLACK_TEA_AMOUNT + GREEN_TEA_AMOUNT + BROWN_SUGAR_AMOUNT;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        SetAllCommand expectedCommand \u003d new SetAllCommand(new Amount(\"10\"), new Amount(\"10\"),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new Amount(\"10\"), new Amount(\"10\"), new Amount(\"10\"), new Amount(\"10\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 1,
      "-": 102
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ACTIVE_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertEquals(new SalesBook(), modelManager.getSalesBook());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void overwrite_salesBookNew_initialisedAndUpdateSalesEntry() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        HashMap\u003cDrink, Integer\u003e sales \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSBM, 80);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSBBT, 0);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSBGT, 0);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSPM, 0);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSPBT, 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSPGT, 0);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        modelManager.overwrite(sales);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        UniqueSalesRecordList expectedSalesRecord \u003d new UniqueSalesRecordList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        expectedSalesRecord.setSalesRecord(sales);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertEquals(expectedSalesRecord, modelManager.getSalesBook().getRecord());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void overwrite_salesBookInitialised_updateByOverwriteSalesEntry() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        HashMap\u003cDrink, Integer\u003e sales \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSBM, 80);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSBBT, 20);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSBGT, 0);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSPM, 0);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSPBT, 0);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSPGT, 0);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        modelManager.overwrite(sales);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSBBT, 80);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        modelManager.overwrite(sales);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        UniqueSalesRecordList expectedSalesRecord \u003d new UniqueSalesRecordList();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        expectedSalesRecord.setSalesRecord(sales);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertEquals(expectedSalesRecord, modelManager.getSalesBook().getRecord());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        SalesBook salesBook \u003d new SalesBook();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        IngredientBook ingredientBook \u003d new IngredientBook();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        HashMap\u003cDrink, Integer\u003e sales \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSBM, 80);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSBBT, 20);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        salesBook.overwriteSales(sales);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        SalesBook differentSalesBook \u003d new SalesBook();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, salesBook,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                ingredientBook, userPrefs);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, salesBook,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                ingredientBook, userPrefs);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, salesBook,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                ingredientBook, userPrefs)));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // different salesBook -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentSalesBook,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                ingredientBook, userPrefs)));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, salesBook,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                ingredientBook, userPrefs)));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_ACTIVE_PERSONS);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, salesBook,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                ingredientBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 48,
      "Diwu-Yi": 13,
      "yanbingtao": 2,
      "-": 125
    }
  },
  {
    "path": "src/test/java/seedu/address/model/SalesBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "public class SalesBookTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    private final SalesBook salesBook \u003d new SalesBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    private final HashMap\u003cDrink, Integer\u003e sales \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertEquals(Collections.emptyList(), salesBook.getSalesRecord());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e salesBook.resetData(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void resetData_withValidReadOnlySalesBook_replacesData() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        SalesBook newData \u003d new SalesBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        SalesRecordEntry newEntry \u003d new SalesRecordEntry(Drink.BSBGT, 10);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        List\u003cSalesRecordEntry\u003e salesRecordEntryList \u003d Collections.singletonList(newEntry);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        newData.setRecord(salesRecordEntryList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        salesBook.resetData(newData);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertEquals(newData, salesBook);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void setRecord_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e salesBook.setRecord(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void setRecord_list_replacesOwnUniqueListWithProvidedList() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        SalesBook newData \u003d new SalesBook();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        SalesRecordEntry newEntry \u003d new SalesRecordEntry(Drink.BSBGT, 10);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        List\u003cSalesRecordEntry\u003e salesRecordEntryList \u003d Collections.singletonList(newEntry);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        newData.setRecord(salesRecordEntryList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertEquals(salesRecordEntryList, newData.getSalesRecord());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void overwriteSales_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e salesBook.overwriteSales(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void overwriteSales_withOneDrinkItems_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSBM, 90);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        salesBook.overwriteSales(sales);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSBBT, 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSBGT, 0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSPM, 0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSPGT, 0);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSPBT, 0);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        UniqueSalesRecordList expectedSalesRecord \u003d new UniqueSalesRecordList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        expectedSalesRecord.setSalesRecord(sales);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertEquals(expectedSalesRecord, salesBook.getRecord());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    void isEmptySalesBook() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertTrue(salesBook.isEmptySalesRecord());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void getSalesRecordList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e salesBook.getSalesRecord().remove(0));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        SalesBook sameBook \u003d new SalesBook();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        SalesRecordEntry newEntry \u003d new SalesRecordEntry(Drink.BSBGT, 10);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        List\u003cSalesRecordEntry\u003e salesRecordEntryList \u003d Collections.singletonList(newEntry);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sameBook.setRecord(salesRecordEntryList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        salesBook.setRecord(salesRecordEntryList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        SalesBook differentBook \u003d new SalesBook();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSPGT, 20);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        differentBook.overwriteSales(sales);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertTrue(salesBook.equals(sameBook));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertTrue(salesBook.equals(salesBook));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertFalse(salesBook.equals(null));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertFalse(salesBook.equals(sales));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // different salesBook -\u003e returns false"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertFalse(salesBook.equals(differentBook));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 115
    }
  },
  {
    "path": "src/test/java/seedu/address/model/SalesRecordEntryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "public class SalesRecordEntryTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    private final SalesRecordEntry salesRecordEntry \u003d new SalesRecordEntry(Drink.BSBBT, 42);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void isSameRecord_sameDrinkDifferentNumberSold_returnsTrue() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        SalesRecordEntry newEntry \u003d new"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                SalesRecordEntry(salesRecordEntry.getDrink(), salesRecordEntry.getNumberSold() - 1);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertTrue(salesRecordEntry.isSameRecord(newEntry));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void isSameRecord_differentDrink_returnsFalse() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        SalesRecordEntry newEntry \u003d new SalesRecordEntry(Drink.BSBGT, 40);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertFalse(salesRecordEntry.isSameRecord(newEntry));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        SalesRecordEntry sameEntry \u003d new SalesRecordEntry(salesRecordEntry.getDrink(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                salesRecordEntry.getNumberSold());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertTrue(salesRecordEntry.equals(sameEntry));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertTrue(salesRecordEntry.equals(salesRecordEntry));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertFalse(salesRecordEntry.equals(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertFalse(salesRecordEntry.equals(5));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // different entry -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        SalesRecordEntry differentEntry \u003d new SalesRecordEntry(Drink.BSBGT, 32);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertFalse(salesRecordEntry.equals(differentEntry));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // different Drink -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertFalse(salesRecordEntry.equals(new SalesRecordEntry(Drink.BSBGT, salesRecordEntry.getNumberSold())));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // different NumberSold -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertFalse(salesRecordEntry.equals(new SalesRecordEntry(salesRecordEntry.getDrink(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                salesRecordEntry.getNumberSold() - 3)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UniqueSalesRecordListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import seedu.address.model.sales.exception.DuplicateSalesRecordException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import seedu.address.model.sales.exception.SalesRecordNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "public class UniqueSalesRecordListTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    private final UniqueSalesRecordList uniqueSalesRecordList \u003d new UniqueSalesRecordList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    private final SalesRecordEntry entry \u003d new SalesRecordEntry(Drink.BSBBT, 100);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void contains_nullSalesRecordEntry_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueSalesRecordList.contains(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void contains_salesRecordEntryNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertFalse(uniqueSalesRecordList.contains(entry));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void contains_salesRecordInList_returnsTrue() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        uniqueSalesRecordList.add(entry);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertTrue(uniqueSalesRecordList.contains(entry));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void contains_salesRecordEntryWithSameDrinkInList_returnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        uniqueSalesRecordList.add(entry);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        SalesRecordEntry entryOfSameDrink \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                new SalesRecordEntry(entry.getDrink(), entry.getNumberSold() - 3);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertTrue(uniqueSalesRecordList.contains(entryOfSameDrink));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void add_nullSalesRecordEntry_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueSalesRecordList.add(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void add_salesRecordEntryWithSameDrinkDifferentNumberSold_replacesOldEntry() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        uniqueSalesRecordList.add(entry);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        SalesRecordEntry entryOfSameDrink \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                new SalesRecordEntry(entry.getDrink(), entry.getNumberSold() - 3);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        uniqueSalesRecordList.add(entryOfSameDrink);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertEquals(entryOfSameDrink, uniqueSalesRecordList.getSalesEntry(entry.getDrink()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void setSalesEntry_nullSalesRecordEntry_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueSalesRecordList.setSalesEntry(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void setSalesEntry_salesEntryNotInList_throwsSalesRecordNotFoundException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertThrows(SalesRecordNotFoundException.class, () -\u003e uniqueSalesRecordList.setSalesEntry(entry));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void setSalesEntry_replaceSalesEntryWithNewEntryOfSameDrink_success() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        uniqueSalesRecordList.add(entry);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        SalesRecordEntry entryOfSameDrink \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                new SalesRecordEntry(entry.getDrink(), entry.getNumberSold() - 3);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        uniqueSalesRecordList.setSalesEntry(entryOfSameDrink);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertEquals(entryOfSameDrink, uniqueSalesRecordList.getSalesEntry(entryOfSameDrink.getDrink()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void remove_nullSalesRecordEntry_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueSalesRecordList.remove(null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void remove_salesRecordEntryDoesNotExist_throwsSalesRecordNotFoundException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertThrows(SalesRecordNotFoundException.class, () -\u003e uniqueSalesRecordList.remove(entry));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void remove_existingSalesRecordEntry_removesSalesRecordEntry() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        uniqueSalesRecordList.add(entry);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        uniqueSalesRecordList.remove(entry);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        UniqueSalesRecordList expectedUniqueSalesRecordList \u003d new UniqueSalesRecordList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertEquals(expectedUniqueSalesRecordList, uniqueSalesRecordList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void isEmpty_returnsTrue() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertTrue(uniqueSalesRecordList.isEmpty());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void size_addOneSalesRecordEntry_sizeEqualsOne() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        uniqueSalesRecordList.add(entry);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertEquals(1, uniqueSalesRecordList.size());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void setSalesRecord_nullUniqueSalesRecordList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                uniqueSalesRecordList.setSalesRecord((UniqueSalesRecordList) null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void setSalesRecord_uniqueSalesRecordList_replacesOwnListWithProvidedUniqueSalesRecordList() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        uniqueSalesRecordList.add(entry);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        UniqueSalesRecordList expectedUniqueSalesRecordList \u003d new UniqueSalesRecordList();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        SalesRecordEntry newEntry \u003d new SalesRecordEntry(Drink.BSBBT, 30);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        expectedUniqueSalesRecordList.add(newEntry);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        uniqueSalesRecordList.setSalesRecord(expectedUniqueSalesRecordList);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertEquals(expectedUniqueSalesRecordList, uniqueSalesRecordList);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void setSalesRecord_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                uniqueSalesRecordList.setSalesRecord((List\u003cSalesRecordEntry\u003e) null));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void setSalesRecord_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        uniqueSalesRecordList.add(entry);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        SalesRecordEntry newEntry \u003d new SalesRecordEntry(Drink.BSBBT, 30);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        List\u003cSalesRecordEntry\u003e salesRecordEntryList \u003d Collections.singletonList(newEntry);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        uniqueSalesRecordList.setSalesRecord(salesRecordEntryList);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        UniqueSalesRecordList expectedUniqueSalesRecordList \u003d new UniqueSalesRecordList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        expectedUniqueSalesRecordList.add(newEntry);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertEquals(expectedUniqueSalesRecordList, uniqueSalesRecordList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void setSalesRecord_listWithDuplicateSalesRecord_throwsDuplicateSalesRecordException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        List\u003cSalesRecordEntry\u003e listWithDuplicateSalesRecord \u003d Arrays.asList(entry, entry);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertThrows(DuplicateSalesRecordException.class, () -\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                uniqueSalesRecordList.setSalesRecord(listWithDuplicateSalesRecord));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void setSalesRecord_nullMap_throwsNullPointerException() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                uniqueSalesRecordList.setSalesRecord((Map\u003cDrink, Integer\u003e) null));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void setSalesRecord_map_replacesOwnListWithProvidedMap() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        uniqueSalesRecordList.add(entry);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        SalesRecordEntry newEntry \u003d new SalesRecordEntry(Drink.BSBBT, 30);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        Map\u003cDrink, Integer\u003e salesMap \u003d Collections.singletonMap(Drink.BSBBT, 30);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        uniqueSalesRecordList.setSalesRecord(salesMap);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        UniqueSalesRecordList expectedUniqueSalesRecordList \u003d new UniqueSalesRecordList();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        expectedUniqueSalesRecordList.add(newEntry);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertEquals(expectedUniqueSalesRecordList, uniqueSalesRecordList);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                uniqueSalesRecordList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 172
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ingredient/AmountTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "package seedu.address.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "class AmountTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Amount(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void constructor_invalidAmount_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        String invalidAmount \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Amount(invalidAmount));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void isValidAmount() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Amount.isValidAmount(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        // invalid amount numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertFalse(Amount.isValidAmount(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"-91\")); // negative number"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"1p0\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"2 1\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        // valid amount numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"1\")); // exactly 1 number"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"93121534\")); //large amounts"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public void isAmountBelowRestockLevel() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        Amount testAmount1 \u003d new Amount(\"1\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        Amount testAmount2 \u003d new Amount(\"2\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        Amount testAmount4 \u003d new Amount(\"4\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        Amount testAmount5 \u003d new Amount(\"0\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        Amount testAmount6 \u003d new Amount(\"5\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        assertTrue(testAmount1.isBelowRestockLevel());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        assertTrue(testAmount2.isBelowRestockLevel());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        assertTrue(testAmount4.isBelowRestockLevel());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        assertTrue(testAmount5.isBelowRestockLevel());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        assertFalse(testAmount6.isBelowRestockLevel());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        Amount test1 \u003d new Amount(\"90\"); // two digits"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        Amount test2 \u003d new Amount(\"0\"); // edge case, 0"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        Amount test3 \u003d new Amount(\"93121543\"); // large amounts"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertEquals(test1.toString(), \"90\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertEquals(test2.toString(), \"0\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertEquals(test3.toString(), \"93121543\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 49,
      "WM71811": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ingredient/IngredientNameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "package seedu.address.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "class IngredientNameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new IngredientName(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void constructor_invalidAmount_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        String invalidIngredientName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new IngredientName(invalidIngredientName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void isValidIngredientName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e IngredientName.isValidIngredientName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertFalse(IngredientName.isValidIngredientName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertFalse(IngredientName.isValidIngredientName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertFalse(IngredientName.isValidIngredientName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertFalse(IngredientName.isValidIngredientName(\"Milk*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertFalse(IngredientName.isValidIngredientName(\"Black Sugar\")); // does not appear in the predefined list"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertTrue(IngredientName.isValidIngredientName(\"Milk\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertTrue(IngredientName.isValidIngredientName(\"Boba\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertTrue(IngredientName.isValidIngredientName(\"Pearl\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertTrue(IngredientName.isValidIngredientName(\"Black Tea\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertTrue(IngredientName.isValidIngredientName(\"Green Tea\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertTrue(IngredientName.isValidIngredientName(\"Brown Sugar\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ingredient/IngredientTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "package seedu.address.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "class IngredientTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private static final Ingredient BLACK_TEA \u003d new Ingredient(new IngredientName(\"Black Tea\"));"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private static final Ingredient BLACK_TEA_VALID_AMOUNT \u003d new Ingredient(new IngredientName("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            \"Black Tea\"), new Amount(\"90\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void isSameIngredient() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertTrue(BLACK_TEA.isSameIngredient(BLACK_TEA));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertFalse(BLACK_TEA.isSameIngredient(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        // different amount -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertFalse(BLACK_TEA.isSameIngredient(BLACK_TEA_VALID_AMOUNT));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        Ingredient editedBlackTea \u003d new Ingredient(new IngredientName(\"Boba\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertFalse(BLACK_TEA.isSameIngredient(editedBlackTea));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void testEquals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        Ingredient oolongCopy \u003d new Ingredient(new IngredientName(\"Black Tea\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertTrue(BLACK_TEA.equals(oolongCopy));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertTrue(BLACK_TEA.equals(BLACK_TEA));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertFalse(BLACK_TEA.equals(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertFalse(BLACK_TEA.equals(5));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        // different ingredient name -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertFalse(BLACK_TEA.equals(new Ingredient(new IngredientName(\"Boba\"))));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        // different amount -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertFalse(BLACK_TEA.equals(BLACK_TEA_VALID_AMOUNT));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ingredient/UniqueIngredientListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "package seedu.address.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.exceptions.NoChangeIngredientException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "class UniqueIngredientListTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private static final UniqueIngredientList uniqueIngredientList \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private static final UniqueIngredientList myIngredientList \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private static final Ingredient BLACK_TEA \u003d new Ingredient(new IngredientName(\"Black Tea\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private static final Ingredient BLACK_TEA_VALID_AMOUNT \u003d new Ingredient(new IngredientName(\"Black Tea\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            new Amount(\"90\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private static final Ingredient BOBA \u003d new Ingredient(new IngredientName(\"Boba\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private static final List\u003cIngredient\u003e internalList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void contains_nullIngredient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueIngredientList.contains(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void contains_ingredientInList_returnsTrue() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        uniqueIngredientList.add(new Ingredient(new IngredientName(\"Black Tea\")));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        uniqueIngredientList.add(new Ingredient(new IngredientName(\"Green Tea\")));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        uniqueIngredientList.add(new Ingredient(new IngredientName(\"Boba\")));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        uniqueIngredientList.add(new Ingredient(new IngredientName(\"Pearl\")));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        uniqueIngredientList.add(new Ingredient(new IngredientName(\"Milk\")));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        uniqueIngredientList.add(new Ingredient(new IngredientName(\"Brown Sugar\")));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertTrue(uniqueIngredientList.contains(BLACK_TEA));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void setIngredient_nullTargetIngredient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueIngredientList.setIngredient(null,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                BLACK_TEA_VALID_AMOUNT));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void setIngredient_nullEditedIngredient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueIngredientList.setIngredient(BLACK_TEA,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void setIngredient_targetIngredientNotInList_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e uniqueIngredientList"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                .setIngredient(new Ingredient(new IngredientName(\"Olong Tea\")), BLACK_TEA_VALID_AMOUNT));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void setIngredient_editedIngredientIsSameIngredient_throwsNoChangeIngredientException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertThrows(NoChangeIngredientException.class, ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            -\u003e uniqueIngredientList.setIngredient(BLACK_TEA, BLACK_TEA));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void setIngredient_editedIngredientHasDifferentAmount_success() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        myIngredientList.add(new Ingredient(new IngredientName(\"Black Tea\")));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        myIngredientList.setIngredient(BLACK_TEA, BLACK_TEA_VALID_AMOUNT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        UniqueIngredientList expectedUniqueIngredientList \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        expectedUniqueIngredientList.add(new Ingredient(new IngredientName(\"Black Tea\")));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        expectedUniqueIngredientList.setIngredient(BLACK_TEA, BLACK_TEA_VALID_AMOUNT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertEquals(expectedUniqueIngredientList, myIngredientList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void setIngredient_editedIngredientHasNoChange_throwsNoChangeIngredientException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertThrows(NoChangeIngredientException.class, () -\u003e uniqueIngredientList.setIngredient(BLACK_TEA,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                BOBA));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void setIngredients_nullUniqueIngredientList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueIngredientList.setIngredients("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                (UniqueIngredientList) null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void setIngredients_uniqueIngredientList_replacesOwnListWithProvidedUniqueIngredientList() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        UniqueIngredientList expectedUniqueIngredientList \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        uniqueIngredientList.setIngredients(expectedUniqueIngredientList);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertEquals(expectedUniqueIngredientList, uniqueIngredientList);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void setIngredients_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueIngredientList.setIngredients("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                (List\u003cIngredient\u003e) null));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void setIngredients_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        internalList.add(new Ingredient(new IngredientName(\"Milk\")));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        internalList.add(new Ingredient(new IngredientName(\"Pearl\")));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        internalList.add(new Ingredient(new IngredientName(\"Boba\")));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        internalList.add(new Ingredient(new IngredientName(\"Black Tea\"), new Amount(\"90\")));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        internalList.add(new Ingredient(new IngredientName(\"Green Tea\")));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        internalList.add(new Ingredient(new IngredientName(\"Brown Sugar\")));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        uniqueIngredientList.setIngredients(internalList);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        UniqueIngredientList expectedUniqueIngredientList \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        expectedUniqueIngredientList.add(new Ingredient(new IngredientName(\"Milk\")));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        expectedUniqueIngredientList.add(new Ingredient(new IngredientName(\"Pearl\")));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        expectedUniqueIngredientList.add(new Ingredient(new IngredientName(\"Boba\")));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        expectedUniqueIngredientList.add(new Ingredient(new IngredientName(\"Black Tea\")));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        expectedUniqueIngredientList.add(new Ingredient(new IngredientName(\"Green Tea\")));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        expectedUniqueIngredientList.add(new Ingredient(new IngredientName(\"Brown Sugar\")));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        expectedUniqueIngredientList.setIngredient(BLACK_TEA, BLACK_TEA_VALID_AMOUNT);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertEquals(expectedUniqueIngredientList, uniqueIngredientList);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void setIngredients_listWithDuplicateIngredients_throwsNoChangeIngredientException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        List\u003cIngredient\u003e listWithDuplicateIngredients \u003d Arrays.asList(BLACK_TEA, BLACK_TEA);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertThrows(NoChangeIngredientException.class, ()"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            -\u003e uniqueIngredientList.setIngredients(listWithDuplicateIngredients));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            -\u003e uniqueIngredientList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 139,
      "WM71811": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/EmergencyTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Persdre"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Persdre"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Persdre"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Persdre"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Persdre"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Persdre"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Persdre"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Persdre"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Persdre"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Persdre"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Persdre"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Persdre"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Persdre"
        },
        "content": "public class EmergencyTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        // same name, same phone, same emergency contact, different address, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        // same name, different phone, different attributes -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        // different emergency contact -\u003ereturn false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmergency(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Persdre"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Persdre": 92
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        // Keywords match phone, and address, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                .withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 72,
      "Persdre": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        // same name, same phone, different address, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        // same name, different phone, different attributes -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 82,
      "Persdre": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedIngredientTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.MILK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": "public class JsonAdaptedIngredientTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private static final String VALID_INGREDIENT_NAME \u003d \"Milk\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private static final String VALID_AMOUNT \u003d \"10\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private static final String NULL_INGREDIENTNAME_EXCEPTION_MESSAGE \u003d \"Ingredient\u0027s IngredientName field is missing!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private static final String NULL_AMOUNT_EXCEPTION_MESSAGE \u003d \"Ingredient\u0027s Amount field is missing!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public void toModelType_validIngredientComposition_returnsIngredient() throws Exception {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        JsonAdaptedIngredient ingredient \u003d new JsonAdaptedIngredient(MILK);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        assertEquals(MILK, ingredient.toModelType());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public void toModelType_nullIngredientName_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        JsonAdaptedIngredient ingredient \u003d new JsonAdaptedIngredient(null, VALID_AMOUNT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        String expectedMessage \u003d NULL_INGREDIENTNAME_EXCEPTION_MESSAGE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, ingredient::toModelType);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public void toModelType_nullAmount_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        JsonAdaptedIngredient ingredient \u003d new JsonAdaptedIngredient(VALID_INGREDIENT_NAME, null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        String expectedMessage \u003d NULL_AMOUNT_EXCEPTION_MESSAGE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, ingredient::toModelType);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WM71811"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WM71811": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    private static final String INVALID_EMERGENCY \u003d \"+655432\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private static final String INVALID_ARCHIVESTATUS \u003d \"yes\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    private static final String VALID_EMERGENCY \u003d BENSON.getEmergency().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private static final String VALID_ARCHIVESTATUS \u003d BENSON.getArchiveStatus().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMERGENCY, VALID_ADDRESS,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                        VALID_ARCHIVESTATUS, VALID_TAGS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMERGENCY,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                VALID_ADDRESS, VALID_ARCHIVESTATUS,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                VALID_TAGS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMERGENCY, VALID_ADDRESS,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                        VALID_ARCHIVESTATUS, VALID_TAGS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMERGENCY, INVALID_ADDRESS,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                        VALID_ARCHIVESTATUS, VALID_TAGS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMERGENCY, null,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                VALID_ARCHIVESTATUS,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                VALID_TAGS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMERGENCY, VALID_ADDRESS,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                        VALID_ARCHIVESTATUS, invalidTags);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 4,
      "-": 80,
      "Persdre": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonIngredientBookStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.MILK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.PEARL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.UPDATED_MILK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.UPDATED_PEARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.getTypicalIngredientBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.IngredientBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ReadOnlyIngredientBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WM71811"
        },
        "content": "public class JsonIngredientBookStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            \"JsonIngredientBookStorageTest\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public void readIngredientBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readIngredientBook(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private java.util.Optional\u003cReadOnlyIngredientBook\u003e readIngredientBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return new JsonIngredientBookStorage(Paths.get(filePath)).readIngredientBook("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        assertFalse(readIngredientBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readIngredientBook("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                \"notJsonFormatIngredientBook.json\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public void readAndSaveIngredientBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempIngredientBook.json\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        IngredientBook original \u003d getTypicalIngredientBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        JsonIngredientBookStorage jsonIngredientBookStorage \u003d new JsonIngredientBookStorage(filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        jsonIngredientBookStorage.saveIngredientBook(original, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        ReadOnlyIngredientBook readBack \u003d jsonIngredientBookStorage.readIngredientBook(filePath).get();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        assertEquals(original, new IngredientBook(readBack));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        original.setIngredient(MILK, UPDATED_MILK);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        jsonIngredientBookStorage.saveIngredientBook(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        readBack \u003d jsonIngredientBookStorage.readIngredientBook(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        assertEquals(original, new IngredientBook(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        original.setIngredient(PEARL, UPDATED_PEARL);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        jsonIngredientBookStorage.saveIngredientBook(original); // file path not specified"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        readBack \u003d jsonIngredientBookStorage.readIngredientBook().get(); // file path not specified"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        assertEquals(original, new IngredientBook(readBack));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public void saveIngredientBook_nullAIngredientBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveIngredientBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private void saveIngredientBook(ReadOnlyIngredientBook ingredientBook, String filePath) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            new JsonIngredientBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                    .saveIngredientBook(ingredientBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public void saveIngredientBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveIngredientBook(new IngredientBook(), null));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WM71811"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WM71811": 102
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableIngredientBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": "public class JsonSerializableIngredientBookTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            \"JsonSerializableIngredientBookTest\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private static final Path TYPICAL_INGREDIENT_FILE \u003d TEST_DATA_FOLDER"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            .resolve(\"typicalIngredientsIngredientBook.json\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private static final Path DUPLICATE_INGREDIENT_FILE \u003d TEST_DATA_FOLDER"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            .resolve(\"duplicateIngredientIngredientBook.json\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WM71811": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"addressbook.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        userPrefs.setIngredientBookFilePath(Paths.get(\"data/ingredientbook.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WM71811": 1,
      "-": 123
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.getTypicalIngredientBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.IngredientBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ReadOnlyIngredientBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        JsonSalesBookStorage salesBookStorage \u003d new JsonSalesBookStorage(getTempFilePath(\"sb\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        JsonIngredientBookStorage ingredientBookStorage \u003d new JsonIngredientBookStorage(getTempFilePath(\"ib\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, salesBookStorage, userPrefsStorage,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                ingredientBookStorage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public void ingredientBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WM71811"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WM71811"
        },
        "content": "         * {@link JsonIngredientBookStorage} class."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WM71811"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonIngredientBookStorageTest} class."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WM71811"
        },
        "content": "         */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        IngredientBook original \u003d getTypicalIngredientBook();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        storageManager.saveIngredientBook(original);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        ReadOnlyIngredientBook retrieved \u003d storageManager.readIngredientBook().get();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        assertEquals(original, new IngredientBook(retrieved));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public void getIngredientBookFilePath() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        assertNotNull(storageManager.getIngredientBookFilePath());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 3,
      "WM71811": 23,
      "-": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        descriptor.setEmergency(person.getEmergency());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Persdre"
        },
        "content": "     * Sets the {@code Emergency} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    public EditPersonDescriptorBuilder withEmergency(String emergency) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        descriptor.setEmergency(new Phone(emergency));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Persdre"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 79,
      "Persdre": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.model.person.ArchiveStatus;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    public static final String DEFAULT_EMERGENCY \u003d \"97851877\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static final boolean DEFAULT_ARCHIVESTATUS \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    private Phone emergency;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private ArchiveStatus archiveStatus;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonBuilder} with the default details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        emergency \u003d new Phone(DEFAULT_EMERGENCY);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        archiveStatus \u003d new ArchiveStatus(DEFAULT_ARCHIVESTATUS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        emergency \u003d personToCopy.getEmergency();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        archiveStatus \u003d personToCopy.getArchiveStatus();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Persdre"
        },
        "content": "     * Sets the {@code Emergency} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    public PersonBuilder withEmergency(String emergency) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        this.emergency \u003d new Phone(emergency);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Sets the {@code Archive} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public PersonBuilder withArchiveStatus(String state) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        this.archiveStatus \u003d new ArchiveStatus(Boolean.valueOf(state));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        return new Person(name, phone, emergency, address, archiveStatus, tags);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 10,
      "-": 87,
      "Persdre": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Persdre"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMERGENCY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        sb.append(PREFIX_EMERGENCY + person.getEmergency().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        descriptor.getEmergency().ifPresent(emergency -\u003esb.append(PREFIX_EMERGENCY)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                .append(emergency.value).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 59,
      "Persdre": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIngredients.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.IngredientBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ingredient.Amount;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": "public class TypicalIngredients {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public static final Ingredient MILK \u003d new Ingredient(new IngredientName(\"Milk\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            new Amount(\"0\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public static final Ingredient UPDATED_MILK \u003d new Ingredient(new IngredientName(\"Milk\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            new Amount(\"90\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public static final Ingredient PEARL \u003d new Ingredient(new IngredientName(\"Pearl\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            new Amount(\"0\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public static final Ingredient UPDATED_PEARL \u003d new Ingredient(new IngredientName(\"Pearl\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            new Amount(\"70\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public static final Ingredient BOBA \u003d new Ingredient(new IngredientName(\"Boba\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            new Amount(\"0\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public static final Ingredient BLACK_TEA \u003d new Ingredient(new IngredientName(\"Black Tea\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            new Amount(\"0\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public static final Ingredient GREEN_TEA \u003d new Ingredient(new IngredientName(\"Green Tea\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            new Amount(\"0\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public static final Ingredient BROWN_SUGAR \u003d new Ingredient(new IngredientName(\"Brown Sugar\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            new Amount(\"0\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private TypicalIngredients() {} // prevents instantiation"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public static IngredientBook getTypicalIngredientBook() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        IngredientBook ab \u003d new IngredientBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        for (Ingredient ingredient : getTypicalIngredients()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            ab.addIngredient(ingredient);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public static List\u003cIngredient\u003e getTypicalIngredients() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(MILK, PEARL, BOBA, BLACK_TEA, GREEN_TEA, BROWN_SUGAR));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WM71811"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WM71811": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Persdre"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMERGENCY_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Persdre"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMERGENCY_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            .withEmergency(\"35215349\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            .withArchiveStatus(\"false\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            .withPhone(\"98765432\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            .withEmergency(\"23456789\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            .withArchiveStatus(\"false\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            .withEmergency(\"36525359\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            .withArchiveStatus(\"false\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            .withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            .withEmergency(\"3352678\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            .withAddress(\"10th street\").withArchiveStatus(\"false\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            .withEmergency(\"4222849\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            .withAddress(\"michegan ave\").withArchiveStatus(\"false\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            .withEmergency(\"7242849\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            .withAddress(\"little tokyo\").withArchiveStatus(\"false\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            .withEmergency(\"2442849\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            .withAddress(\"4th street\").withArchiveStatus(\"false\").build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            .withEmergency(\"4242848\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            .withAddress(\"little india\").withArchiveStatus(\"false\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            .withEmergency(\"1312848\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            .withAddress(\"chicago ave\").withArchiveStatus(\"false\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            .withEmergency(VALID_EMERGENCY_AMY)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            .withAddress(VALID_ADDRESS_AMY).withArchiveStatus(\"false\").withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            .withEmergency(VALID_EMERGENCY_BOB)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            .withAddress(VALID_ADDRESS_BOB).withArchiveStatus(\"false\").withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 1,
      "-": 63,
      "Persdre": 26
    }
  }
]
