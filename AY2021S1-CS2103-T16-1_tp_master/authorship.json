[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "# Supper Strikers"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103-T16-1/tp/actions)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "**Supper Strikers is a desktop application for managing your supper orders.** While it has a GUI (Graphical User Interface), most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "- If you are interested in using Supper Strikers, head over to the [**User Guide**](docs/UserGuide.md)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "- If you are interested about developing Supper Strikers, the [**Developer Guide**](docs/DeveloperGuide.md) is a good place to start."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "## Libraries Used"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "- JavaFX - Used for creating the GUI"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "- Jackson - Used for processing JSON files"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "- JUnit5 - Used for unit testing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "- Telegram API - Used for sending text messages to the supper vendor"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "## Acknowledgments"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "- Adapted from AddressBook Level 3 (AB3), part of the **se-education.org initiative.** If you would like to contribute code to this project, see [se-education.org](https://se-education.org#https://se-education.org/#contributing) for more info ."
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 28,
      "-": 3
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "run {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    String javaFxVersion \u003d \u002711.0.1\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    archiveName \u003d \u0027supperstrikers.jar\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 1,
      "duckmoon99": 5,
      "-": 70
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "You can contact us at the email `seer[at]comp.nus.edu.sg`"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "### Lim Wei Quan, Ernest"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "\u003cimg src\u003d\"images/ernestlim8.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "[[github](https://github.com/ernestlim8)]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "[[portfolio](http://ernestlim8.netlify.app/)]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "* Role: Team Lead"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "### Ambrose Liew Cheng Yuan"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "\u003cimg src\u003d\"images/morninglit.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "[[github](https://github.com/MorningLit)]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "[[portfolio](https://ambroseliew.netlify.app/)]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "* Responsibilities: Checkstyle, Documentation, Intellij expert, Arts Director"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "### Anikesh Bhuvaneshwaram"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "\u003cimg src\u003d\"images/ebolaeater.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "[[github](https://github.com/Ebolaeater)]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "[[portfolio](https://anikeshb.netlify.app)]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "* Responsibilities: Integration, Scheduling and Tracking, Data Handler"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "### Tan Wei Xin"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "\u003cimg src\u003d\"images/duckmoon99.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "[[github](github.com/duckmoon99/)]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "[[portfolio](https://www.linkedin.com/in/tanweixin/)]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "* Responsibilities: Code Quality"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "### Chan Yong Soon, Kendrew"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "\u003cimg src\u003d\"images/kendrewchan.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "[[github](https://github.com/KendrewChan)] [[portfolio]([https://kendrewc.netlify.app](https://kendrewc.netlify.app/))]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "* Responsibilities: Testing, Handle Code Skeletons, Deliverables and deadlines"
      }
    ],
    "authorContributionMap": {
      "duckmoon99": 2,
      "-": 27,
      "KendrewChan": 24
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/AY2021S1-CS2103-T16-1/tp/tree/master/docs/diagrams) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/AY2021S1-CS2103-T16-1/tp/blob/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/AY2021S1-CS2103-T16-1/tp/blob/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `remove 1`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "[`Ui.java`](https://github.com/AY2021S1-CS2103-T16-1/tp/blob/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/AY2021S1-CS2103-T16-1/tp/blob/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/AY2021S1-CS2103-T16-1/tp/blob/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding an order item)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"remove 1\")` API call."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "![Interactions Inside the Logic Component for the `remove 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `RemoveCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "**API** : [`Model.java`](https://github.com/AY2021S1-CS2103-T16-1/tp/blob/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "* contains the `AddressBook` and `MenuManager`, `OrderManager` components."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    * `AddressBook` stores the data for vendors."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    * `MenuManager` stores the data for food items of the vendor\u0027s menu."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    * `OrderManager` stores the data for order items."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "* Each of these components exposes an unmodifiable `ObservableList` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "**API** : [`Storage.java`](https://github.com/AY2021S1-CS2103-T16-1/tp/blob/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the address book data in json format and read it back."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "### Order Commands"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "Order commands represents the operations to which users interact with."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "#### Add Command"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "- The Add Command allows the user to add an order item from the selected menu `Model#getFilteredFoodList()`."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "- If the index provided is greater or less than the size of the menu, a `CommandException will be thrown`."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "- If the quantity provided is less or equal to zero, a `CommandException will be thrown`."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "The following diagram summarises the sequence when the AddCommand is executed."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "![AddCommandDiagram](images/AddCommandDiagram.png)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "Given below is an example usage scenario and how the AddCommand behaves at each step."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "Step 1: The user launches the application for the first time, by default, no vendor is selected."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "Step 2: The user selects a vendor with the VendorCommand `vendor i`, the corresponding menu will be loaded."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "Step 3: The user enters the command `add 2 3` which adds item 2 from the menu with a quantity of 3."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "Step 4: `Model#getFilteredFoodList()` is executed to retrieve the list of Food items or menu from the current vendor."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "Step 5: AddCommand checks whether the index and quantity inputted is valid. Index and Quantity is valid."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "Step 6: An OrderItem object is created from input quantity and the retrieved Food item."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "Step 7: `Model#addOrderItem()` is executed to add the OrderItem into the `Model`."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "#### Remove Command"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "- The RemoveCommand allows the user to remove an order from the selected menu `Model#getFilteredOrderItemList()`."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "- If the index provided is greater or less than the size of the menu, a `CommandException will be thrown`."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "- If the quantity provided is less or equal to zero, a `CommandException will be thrown`."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "The following diagram summarises the sequence when the RemoveCommand is executed."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "![RemoveCommandDiagram](images/RemoveCommandDiagram.png)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "Given below is an example usage scenario and how the RemoveCommand behaves at each step."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "Step 1: The user has selected a vendor with `vendor i`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "Step 2: The user has added items with `add i qty`."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "Step 3: The user enters the command `remove 1 1` which removes 1 quantity of the item at the 1st index in the order."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "Step 4: `Model#getFilteredOrderItemList()` is executed to retrieve the list of OrderItems from the current order."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "Step 5: RemoveCommand checks whether the index and quantity inputted is valid. Index and Quantity is valid."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "Step 6: A new OrderItem object is created from input quantity and the retrieved OrderItem."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "Step 7: `Model#removeOrderItem()` is executed to remove the related OrderItem."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "#### Clear Command"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "- The ClearCommand allows the user to clear all orders in the current order."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "- If the current Order has no items, a `CommandException will be thrown`."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "The following diagram summarises the sequence when the ClearCommand is executed."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "![ClearCommandDiagram](images/ClearCommandDiagram.png)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "Given below is an example usage scenario and how the ClearCommand behaves at each step."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "Step 1: The user has selected a vendor with `vendor i`."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "Step 2: The user has added items with `add i qty`."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "Step 3: The user enters the command `clear`."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "Step 4: ClearCommand checks whether the order has OrderItems with `Model#getOrderSize()`. The order has OrderItems."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "Step 5: `Model#clearOrder()` is executed to clear all OrderItems from the order."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "### Undo feature"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "Changes made to the Order can be undone by using the `undo` command."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "The OrderManager starts out with a Stack of Order `orderHistory` and a main Order `order`, which"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "represents the past versions of the order, and the most current order respectively. Any changes (ie. `add`, `remove`,"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "`clear` etc.) should be done to `order`. After the changes are done, the method `OrderManager#saveChanges()` should be"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "called, which saves a copy (see `Order#makeCopy()`) of `order` to the `orderHistory`. If the user requests an undo,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "the head of `orderHistory` will be popped, and `order` is now a copy of the head of the popped stack."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "`OrderManager#saveChanges()` works based on the assumption that the head of `orderHistory` is always equal to `order`."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "If not and a change is made to the order followed by calling `OrderManager#saveChanges()`, then the `order` right before "
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "the change is not saved. Therefore, the method `orderHistory#clear()` should not be called unless the developer "
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "understands the effect of doing so. This also means if a method changes the order and it should be able to be undone, "
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "`saveChanges()` must be called at the end of the method."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data archiving feature will be implemented}_"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "### Friendly Syntax"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "The friendly syntax allows users to type in just the prefix of a command to execute it."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "The following diagram summarizes the sequence when the RemoveCommand is executed from the user input of `r 1`."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "![Friendly_Syntax_Architecture_Diagram](images/Friendly_Syntax_Architecture_Diagram.png)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "Given below is an example usage scenario and how the friendly syntax behaves at the parse stage."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "Step 1: The user launches the application for the first time and enters the vendor command `vendor 1`."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "Step 2: SupperStrikers loads the menu of the 1\u003csup\u003est\u003c/sup\u003e vendor into the GUI."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "Step 3: The user enters the add command `add 1 3` "
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "Step 4:  SupperStrikers adds 3 of the 1\u003csup\u003est\u003c/sup\u003e item into the order."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "Step 5: The user enters the command `r 1 1`."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "Step 6: The `LogicManager#execute()` is executed to call the `AddressBookParser#parseCommand()` method."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "Step 7: `AddressBookParser#parseCommand()` checks if the inputted command word is a prefix of one and only one of the valid commands by filtering the list of valid commands based on whether they start with the user inputted prefix. The `r` in this case maps to the `remove` keyword."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "Step 8: The `RemoveCommand` is executed and one quantity of the first item in the order is removed.  "
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "- If there is no command with the given prefix, an `Parse Exception` will be thrown."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "- If the inputted prefix exists for more than 1 command, a `Parse Exception` will be thrown."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "- If there is a command which is a prefix for another command, it can no longer be executed."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "### Vendor Commands"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "* There are two VendorCommand classes in SupperStrikers."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "* `SwitchVendorCommand` allows the user to select a vendor from the `AddressBook` to order from."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "* `VendorCommand`, deselects the vendor to the default unintialized value."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "* If the vendor does not exist, a `Command Exception` will be thrown"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "* If the vendor selected is different from the current vendor, the model will clear the current order."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "* If the vendor selected is different from the current vendor, the model will clear the current order."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "#### Switch Vendor Command"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "The following activity diagram summarises the process when the SwitchVendorCommand is executed."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "\u003cimg src\u003d\"images/SwitchVendorCommandActivityDiagram.png\" alt\u003d\"SwitchVendorCommandActivityDiagram\" style\u003d\"zoom:40%;\" /\u003e"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "Given below is an example usage scenario and how the SwitchVendorCommand behaves at each step."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "Step 1: The user launches the application for the first time, by default, no vendor is selected."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "Step 2: The user enters the vendor command `vendor i`."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "Step 3: `Model#getFilteredVendorList()` is executed to retrieve the list of vendors."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "Step 4: SwitchVendorCommand checks whether i\u003csup\u003eth\u003c/sup\u003e index is valid."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "Step 5: If the i\u003csup\u003eth\u003c/sup\u003e index is valid, `Model#setVendorIndex(i)` is executed to select the vendor. "
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "Step 6: Supper Strikers loads the menu of the i\u003csup\u003eth\u003c/sup\u003e vendor into the UI by calling `MainWindow#handleVendor()`."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "Step 7: The UI component"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "showing the vendor list is hidden and the UI showing the menu is displayed to the user by calling"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "`MainWindow#displayMenu()`."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "Step 8: `Model#resetOrder()` creates a new empty order for the i\u003csup\u003eth\u003c/sup\u003e vendor."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "The following diagram summarises the sequence when the SwitchVendorCommmand is executed."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "\u003cimg src\u003d\"images/VendorCommandSequenceDiagram.png\" alt\u003d\"VendorSequenceDiagram\" style\u003d\"zoom: 80%;\" /\u003e"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "#### Vendor Command"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "Given below is an example usage scenario and how VendorCommand behaves at each step."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "Step 1: The user has selected a vendor with index `i`."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "Step 2: The user enters the vendor command `vendor`."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "Step 3:  `Model#setVendorIndex(-1)` is executed to set the vendor to the default uninitialized value."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "Step 4: The UI component showing the menu is hidden and the UI component showing"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        the vendor list is displayed to the user by calling `MainWindow#displayMenu()`."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "Step 5: `Model#resetOrder()` sets the order to a new empty order. "
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "* has a need to order supper frequently"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "* stays on campus"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "**Value proposition**: manage ordering supper faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                                    | I want to …​                     | So that I can…​                                                        |"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "| -------- | ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "| `* * *`  | new user                                   | see usage instructions         | refer to instructions when I forget how to use the App                 |"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "| `* * *`  | NUS resident                           | add a food item to my supper order |                                                                        |"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "| `* * *`  | NUS resident | remove a food item from my supper order |                                    |"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "| `* * *`  | NUS resident | see the menu | view all the items currently ordered by me |"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "| `* * *` | NUS resident | see the vendor list and select vendor | confirm which vendor to order from |"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "| `* * ` | NUS resident | see the total price of my current order | decide whether I want to order more |"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "| `*` | NUS resident | confirm order | finalize my supper selection |"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "| `* * *` | NUS resident | undo my commands | fix any mistakes made while ordering |"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "| `* * *` | NUS resident | submit my order |  |"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "| `* *` | NUS resident | clear the current order | start a new order |"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "| `* *` | NUS  resident | filter the menu | find the food item that I want to order easily |"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "| `* *` | NUS resident | save my current order as a preset | load up the preset for fast supper ordering |"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "(For all use cases below, the **System** is the `SupperStrikers` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "**Use case: Showing and selecting a particular vendor**"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "2. SupperStrikers displays the list of vendors."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "3. User requests to choose a specified vendor."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "4. SupperStrikers displays the menu of the selected vendor."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "5. SupperStrikers creates a new empty order of the selected vendor."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "- 3a. The given index is invalid."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "  - 3a1. SupperStrikers displays an error message."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    Use Case resumes at step 2."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "  "
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "- 3b. The user has already selected a different vendor."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "  "
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "  - 3b1. SupperStrikers clears the order of the current vendor."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "  "
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "  Use case resumes at step 4."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "**Use case: Showing list of all vendors**"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "Precondition: \u003cu\u003eUser has already selected a particular vendor\u003c/u\u003e "
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "1. SupperStrikers displays a specific vendor."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "2. User requests to view all vendors."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "3. SupperStrikers displays the details of all vendors."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "4. SupperStrikers resets the current order to a new empty order."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "**Use case: Viewing total**"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "1. User requests to see the total price of the current order."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "2. SupperStrikers displays the total price of the current order to the user."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "**Use case: Clearing current order**"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "1. User requests to clear the current order."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "2. SupperStrikers clears the current order."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "3. SupperStrikers creates a new empty order of the selected order  ."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "**Use case: Submit order**"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "1. User requests to submit the current order."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "2. SupperStrikers displays a copy of the order in a submittable format to the user."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "**Use case: Add an item**"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "1. User requests to add a specified quantity of an item listed in the vendor menu."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "2. SupperStrikers adds the item along with the quantity specified into the current order."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "4. SupperStrikers displays the updated order with the newly added item."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "- 1a. The given index is invalid."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "  - 1a1. SupperStrikers shows an error message."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    Use Case resumes at step 1."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "- 1b. The given quantity is negative."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "  - 1b1. SupperStrikers shows an error message."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    Use Case resumes at step 1."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "  "
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "- 1c. The quantity is not specified."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "  - 1c1. SupperStrikers adds the quantity of the item by 1."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    Use case resumes at step 1."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "**Use case: Remove an item**"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "1.  User requests to remove a quantity of a specific item in the current order."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "2.  SupperStrikers decreases the quantity of the item by the quantity provided."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "* 1a. The list is empty."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "* 1b. The given index is invalid."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    * 1b1. SupperStrikers shows an error message."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    "
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "* 1c. The given quantity is invalid."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "  "
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * 1c1. SupperStrikers shows an error message."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "     "
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "* 1d. The given quantity is larger or equal to the quantity to the order item."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * 1d1. SupperStrikers removes the order item at the specified index."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "* 1e. The quantity is not specified."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     - 1e1. SupperStrikers removes the order item at the specified index."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "2.  Should be able to hold up to 1000 items without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "   2. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "   2. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "2. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "### Selecting a vendor"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "1. Selecting a vendor while all the vendors are being shown"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "   1. Prerequisites: List all vendors using the `vendor` command."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "   2. Test case: `vendor 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      Expected: First vendor is selected. The menu from the selected vendor is displayed."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "   3. Test case: `vendor`\u003cbr\u003e"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      Expected: No vendor is selected. The list of vendors is displayed again."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "   4. Test case: `vendor 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      Expected: No vendor is selected. Error details shown in status message. Status bar remains the same."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "   5. Other incorrect delete commands to try: `vendor x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "2. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "### Adding an item"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "1. Adding an item while an order is currently active"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "   1. Prerequisites: Create a supper order using the `view` command."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "   2. Test case: `add 1 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "      Expected: 1 order of the first item from the menu is added into the order. Details of the added order shown in the status message."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "   3. Test case: `add 1 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "      Expected: No item is added. Error details shown in the status message."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "   4. Test case: `add 0 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "      Expected: No item is added. Error details shown in the status message."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "   5. Other incorrect add commands to try: `add`, `add -1 -1`, `add x y`, `...` (where x is larger than the menu size)\u003cbr\u003e"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "2. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "### Removing an item"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "1. Removing an item while an order is currently active"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "   1. Prerequisites: List all items using the `view` command. There is at least one item in the order."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "   2. Test case: `remove 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "      Expected: All the quantity of the first item is removed from the order. Details of the removed order shown in the status message."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "   3. Test case: `remove 1 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "      Expected: 1 order of the first item from the user\u0027s order is removed from the order. Details of the removed order shown in the status message."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "   4. Test case: `remove 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "      Expected: No item is deleted. Error details shown in the status message."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "   5. Test case: `remove 1 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "      Expected: No item is deleted. Error details shown in the status message."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "   6. Other incorrect delete commands to try: `remove`, `remove -1 -1`,`remove x y`, `...` (where x is larger than the list size or y is larger than the user\u0027s order quantity amount)\u003cbr\u003e"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "2. _{ more test cases …​ }"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "2. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 140,
      "MorningLit": 34,
      "Ebolaeater": 130,
      "duckmoon99": 11,
      "-": 282,
      "KendrewChan": 42
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "# User Guide for Supper Striker"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "## Commands"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "**Supper Strikers is a desktop application for managing your supper orders.** While it has a GUI (Graphical User Interface), most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "{coming soon}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "1. Download the latest `supperstrikers.jar` from [here](https://github.com/AY2021S1-CS2103-T16-1/tp/releases)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "1. Copy the jar to the folder you want to use as the _home folder_ for your SupperStrikers."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "1. Double-click the jar to start the app. The GUI similar to the one below should appear in a few seconds.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "   Some example commands you can try:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "   * **`vendor`** : List all the vendors available."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "   * **`vendor i/1`** : Select the first vendor to make a supper order for."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "   * **`create`** : Creates a new supper order."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "   * **`add i/1 q/1`** : Adds one quantity of the first item from the vendor\u0027s menu to your supper menu."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`exit`** : Exits the app."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "1. Refer to the [Features](#features) below for details of each command."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "  e.g. in `add NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "### Getting Started: `help`"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "Shows the user instructions on how to use the application."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "### View/select vendor: `vendor`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "Shows the list of vendor. If an index is specified, that vendor is selected."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "Format: `vendor INDEX`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "* `vendor 2` Selects the 2\u003csup\u003end\u003c/sup\u003e vendor in the list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "### Displaying supper menu: `menu`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "Shows the menu from the current selected vendor"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "Format: `menu"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "### Adding a food item: `add`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "Adds a new food item for the user according to the index from the menu"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "Format: `add INDEX [QUANTITY]`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "* `add 1 1` add 1 quantity of item at index 1"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "* `add 2 3` add 3 quantity of item at index 2"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "* `add 1` add 1 quantity of item at index 1"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "### Removing an item : `remove`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "Removes the specified item from the supper order."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "Format: `remove INDEX [QUANTITY]`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "* Removes the item at the specified `INDEX` of the user\u0027s supper order."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "* Quantity can be specified to indicate the number of item to be deleted. Otherwise, it deletes all the item\u0027s quantity."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "* The index refers to the index number shown in the displayed supper order list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "* `delete 2` deletes the second item in the supper order."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "* `delete 1 2` deletes 2 instances of the first item in the supper order."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "### Display total: \u0027total\u0027"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "Displays the price of the current order"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "Format: `total`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "### Submit the order: \u0027submit\u0027"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "Displays the current order along with its total price"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "Format: `submit`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "### Other features `[coming soon]`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "_{coming soon}_"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "**A**: Overwrite your current data file with your old data file."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "## Command summary"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "**Help**   | `help`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "**Vendor** | `vendor INDEX` \u003cbr\u003e e.g., `vendor 2`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "**Menu**   | `menu` \u003cbr\u003e e.g., `menu`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "**Total** | `total` \u003cbr\u003e e.g., `total`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "**Add**    | `add INDEX [QUANTITY]` \u003cbr\u003e e.g., `add 2 2`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "**Delete** | `delete INDEX [QUANTITY]`\u003cbr\u003e e.g., `delete 3 1`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "**Submit**| `submit` \u003cbr\u003e e.g., `submit`"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 5,
      "MorningLit": 14,
      "duckmoon99": 2,
      "Ebolaeater": 27,
      "-": 85,
      "KendrewChan": 4
    }
  },
  {
    "path": "docs/diagrams/AddCommand.xml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "\u003cmxfile host\u003d\"app.diagrams.net\" modified\u003d\"2020-10-24T12:31:28.269Z\" agent\u003d\"5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\" etag\u003d\"Muw7OL9UdB0Oa0hK54HU\" version\u003d\"13.8.1\" type\u003d\"google\"\u003e\u003cdiagram id\u003d\"nTntHJRpF3LuYKWkEak2\" name\u003d\"Page-1\"\u003e7VzbcqM4EP0aV+0+hBIS4vJoJ5nd2ZqpmdpUzV5ethSj2FQw8mI8cebrVxhhQDLhYm6eWT+koIFG6T5Sn+6WPUO3m8MvIdmuPzKX+jMI3MMM3c0gtADkf2PBayLQTWQlklXouUKWCR68b1QIgZDuPZfuCjdGjPmRty0KlywI6DIqyEgYspfibU/ML751S1ZUETwsia9K//DcaJ1IbWhl8l+pt1qnb9ZNJ7myIenN4j/ZrYnLXnIidD9DtyFjUXK0OdxSPzZeapfkuXclV08DC2kQ1Xlg/uJ+ef+w2M1D+Pfdb58efv/n+euN0PKV+HvxD4vBRq+pBdbRxudH+gwttswLoqNB8WKG72IJDb0NjWjIhSyM1mzFAuJ/zqQL8QIaRvRQOnL9ZA8OJMr4s+ErvyV9AAkTChDd2KngJXNJCph1zhsQCyERKFiddGeG4gfCVg3sBlW7ofkHtvKWH0nAMRG+ZcYOTGLLFrHOWASeM0lfFjGqkUQDdx5PSX4WsIALFy7ZrakrzJKzED140Z/8GGgYmOL8r/hcHN8d8ievuZMc9I6yZBDUVWa5ZGk+ULYPl7RqrqgeyVkcnzF4KgupTyLva3EY57wg3vA5nmv5OYAlj0OnqCMZv3gsvw6omjRu1KIyeaJEJFzRSFHG3Udec7eJBUHGzsk67eGEO4VTwAcj8JSexnDSNQCMVJBh6nj2mj9rj6rEkFeDKowkINRHlVHUZBkSPksg1RVgrEaAefTZ8vnoXfed5/tnIMN9+yAezQLbfSZdEN9bBfyqT5+4Uxbxcu5x3jAX4ohtGwCldKFPI/SFji6NoM39XKWpZz/bip/pgS73Ef1pBs1/9zGbWhDX5bfEt6FM+LOKB+6WD+SRM1a0COnO+0Yej5dAEQoVjn5kUcQ2J18LIipUzU4BtyLcl2O6N2ikt7Cnpx3txVdO9Zwcn11CE0mI1sVSVsEujb6oVPqyIrucuy4H6W7B2PNnEu56p5h8qkt2GZ1j6jXSlSsnmc6YdACatuTytiSTa9IAdrKPzF4NR3Pyn1oxZDj6qZ9J8Drhn4Zt5hko0Bz7dMdIDHRakGvNQKFpFTUNzUDT9XJiFPQEvhugAWgU0QeANU30dUt/dUNmrWmMb46yKk2N166yF5XQkgy1icpuMayWcbYx2bhlmw0J3O+QYyeztjsAXkZwapQ9xmfMyJHnAKhZj+2NGJqK3UhCmQVw37JiFxYxZH6jn7PIGZOkI+/eJGqi/N0ymGTajEVhkExuLRnndYMLcqQimumgYSlMjYx9DAojMjVdAyjN3BLsoQnmat1SF2hJPMByDA22ZC/qOpU2aCeTecEaOX4OYaVMIQdTtqWBvLbxy6LZbA/CZy9eY6SQa9lt0yRLLtTLmnpeY1J/XquDS5jAxXmwPM2tlnNcN8wKTX07WM2DiRpFJpQXVNRBgTz1ZHt2t6ugRhN9gvTfqrkdQ5dLO90Zrq928QTJbgqSSnpilLSPRmLFWO6XtGfF+rCsGKrZ5VvoGqWwBwobG46SsXc2JEDtv7Snl6xGjXEmt7YVTR2V9kqH3GtpD6o7JNLO+RWW7ZI52T+4pBZCf71yWKNeM37sx7o8R2C92N9bsxyeKVmgudiIXG6/Dmxh2HIyjVVbmEOWQdP16jvujyfTZCxSg3WlftKyQc41acAEp48UEWw47f44arYT40fodfYdiwwlD21bZsYgBpekTHc0C16IsjKoAw3K1Q04AONBaqWJ/z8cgNy51H3HmPvB20XXyH5Qx4i7LOrU2PcwWkGv80IdBtI2E7NtJVaZ0IqmnvNadBXdZiyXm0yjHuXsrdqE1HoA45zzU+jS8H1EN28ZsQuDYImEmKZqEHtI3mk0452Dtw0LLUNTx40JbFYRLFIKXEEo6q5SdYivKIJVll3QIJmxYceEKveRmg4mBpoOFX7bmKpgXTOdc6ovpCpdr6XGGEHwBEu9CEsHoonW/i4Nvkos0NsGX/kblIqmnoOv0azX0zdgxt7B0wtclE6VCVrCRfnCraKpb7g042pXTrKV/bpYCjewnRvlCn+F2r59eo5HTjkXraqHVi2p3RHOGt/23K3JNj7cb/w7uotCxoe1eFl7EX3YkiPVegnJtmjF+Lbn0w89oI765bJdcFo4zvF1NGQCY/xAe0On1wXvZCFzDM0uLx+bAGqGmVWP7WHXtWa7SKcLr8m0GVrvncA6x4lUex26zISbVQf+h4Oa9RiaY8mIcDSz5eIR61NA0Vn6w0+zHzVKbs9+Ggrd/wc\u003d\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "KendrewChan": 2
    }
  },
  {
    "path": "docs/diagrams/SwitchVendorCommandActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ":User executes SwitchVendorCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "if () then ([Vendor Index is valid])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    :Supper Strikers selects vendor"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    corresponding to the index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    :Vendor window will be hidden"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    and replaced with corresponding"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    Menu window;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    if() then([index is different from current index])"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    :Current order is cleared;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    else ([else])"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ":Supper Strikers throws a CommandException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "informing user that index provided is invalid;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ":Error message is displayed to user;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "endif"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "stop"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 24
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "title: Supper Strikers"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/se-edu/addressbook-level3/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "[![codecov](https://codecov.io/gh/se-edu/addressbook-level3/branch/master/graph/badge.svg)](https://codecov.io/gh/se-edu/addressbook-level3)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "**Supper Strikers is a desktop application for managing your supper orders.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "* If you are interested in using Supper Strikers, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "* If you are interested about developing Supper Strikers, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 4,
      "-": 15
    }
  },
  {
    "path": "order/order.json",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "  \"persons\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    \"name\" : \"Menu Yeoh\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    \"phone\" : \"87438807\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    \"email\" : \"alexyeoh@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    \"address\" : \"Blk 30 Geylang Street 29, #06-40\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    \"tagged\" : [\"iloveprata\"],"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    \"itemName\": \"Naan\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    \"quantity\": 2"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "  }]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duckmoon99": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.model.menu.MenuManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.model.menu.ReadOnlyMenuManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import seedu.address.model.order.OrderManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.storage.FoodStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 0, true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        List\u003cOptional\u003cReadOnlyMenuManager\u003e\u003e menuManagersOptional;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        List\u003cMenuManager\u003e initialMenuManagers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        OrderManager initialOrderManager \u003d new OrderManager();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            if (addressBookOptional.isEmpty()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            menuManagersOptional \u003d new FoodStorage().readMenuManagers(initialData.getVendorList());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            menuManagersOptional.forEach(x -\u003e x.ifPresentOrElse(y -\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                    initialMenuManagers.add(new MenuManager(y)), () -\u003e {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                    logger.info(\"Data file not found. Will be starting with an empty menu\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                    initialMenuManagers.add(new MenuManager());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "            assert model !\u003d null;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            storage.saveAddressBook(initialData);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            logger.warning(\"Something unexpected occurred!\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "            assert model !\u003d null;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        return new ModelManager(initialData, userPrefs, initialMenuManagers, initialOrderManager);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 13,
      "MorningLit": 6,
      "Ebolaeater": 2,
      "-": 181,
      "KendrewChan": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public static final String MESSAGE_INVALID_VENDOR_DISPLAYED_INDEX \u003d \"The vendor index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public static final String MESSAGE_FOOD_LISTED_OVERVIEW \u003d \"%1$d food listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public static final String MESSAGE_FOOD_LISTED_PRICE_CONTEXT \u003d \"%1$d food with price %2$s listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public static final String MESSAGE_MENU_LIST \u003d \"All food listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public static final String MESSAGE_VENDORS_LISTED_OVERVIEW \u003d \"%1$d food listed!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public static final String MESSAGE_AMBIGUOUS_COMMAND \u003d \"Ambiguous command. The following commands matches the \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "            + \"prefix: %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 2,
      "duckmoon99": 5,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance) + \"\\n\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ebolaeater": 1,
      "-": 142
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "import seedu.address.logic.commands.enums.Inequality;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        String preppedWord \u003d word.toLowerCase().trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        String[] wordsInPreppedSentence \u003d sentence.toLowerCase().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                .anyMatch(x -\u003e x.contains(preppedWord));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     * Returns true if {@code s} represents a non-negative unsigned double"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public static boolean isNonNegativeUnsignedDouble(String s) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "            double value \u003d Double.parseDouble(s);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "            return value \u003e\u003d 0 \u0026\u0026 !s.startsWith(\"+\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     * Returns true if {@code s} represents the symbol of inequality."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public static boolean isInequality(String s) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        return Inequality.get(s) !\u003d null;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 3,
      "duckmoon99": 28,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.model.food.Food;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import seedu.address.model.order.OrderItem;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.model.vendor.Vendor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of vendors */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    ObservableList\u003cVendor\u003e getObservableVendorList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of foods */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    ObservableList\u003cFood\u003e getFilteredFoodList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of foods */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    ObservableList\u003cOrderItem\u003e getFilteredOrderItemList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    boolean isSelected();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 4,
      "MorningLit": 3,
      "duckmoon99": 1,
      "Ebolaeater": 2,
      "-": 49,
      "KendrewChan": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.model.food.Food;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import seedu.address.model.order.OrderItem;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.model.vendor.Vendor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    private boolean isMenu;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public ObservableList\u003cVendor\u003e getObservableVendorList() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return model.getAddressBook().getVendorList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public ObservableList\u003cFood\u003e getFilteredFoodList() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return model.getFilteredFoodList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public ObservableList\u003cOrderItem\u003e getFilteredOrderItemList() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        return model.getObservableOrderItemList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public boolean isSelected() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        return model.getVendorIndex() !\u003d -1;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 6,
      "MorningLit": 4,
      "Ebolaeater": 4,
      "-": 73,
      "KendrewChan": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.model.food.Food;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.model.order.OrderItem;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "//TODO change to fit vendor better"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    //TODO: Update message to be closer to user guide"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a OrderItem to the OrderManager. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            + \" Index of FoodItem in Menu \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            + \" [Quantity of Food to add]\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public static final String MESSAGE_ADD_SUCCESS \u003d \"%1$s has been added to your Order\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    private final Index addIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    private final int quantity;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Food}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public AddCommand(Index index) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        this.addIndex \u003d index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        this.quantity \u003d 1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Food}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public AddCommand(Index index, int quantity) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        this.addIndex \u003d index;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        // Todo: This index value will be that of the chosen vendor. As of now the first menu on the list is chosen"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assert model !\u003d null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        ObservableList\u003cFood\u003e menu \u003d model.getFilteredFoodList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        int index \u003d addIndex.getZeroBased();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        if (!model.isSelected()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            throw new CommandException(ParserUtil.MESSAGE_VENDOR_NOT_SELECTED);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        if (menu.size() \u003c\u003d index) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            throw new CommandException(ParserUtil.MESSAGE_INVALID_ORDERITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        OrderItem orderItem \u003d new OrderItem(menu.get(index), quantity);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        model.addOrderItem(orderItem);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADD_SUCCESS, orderItem));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                \u0026\u0026 addIndex.equals(((AddCommand) other).addIndex));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 14,
      "MorningLit": 4,
      "Ebolaeater": 20,
      "duckmoon99": 4,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Clears the Order.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Order has been cleared!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public static final String MESSAGE_EMPTY_ORDER \u003d \"Order is still empty!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        requireNonNull(model.getOrderManager());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        if (!model.isSelected()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            throw new CommandException(ParserUtil.MESSAGE_VENDOR_NOT_SELECTED);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        if (model.getOrderSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            return new CommandResult(MESSAGE_EMPTY_ORDER);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        model.clearOrder();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 8,
      "Ebolaeater": 8,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Help information should be shown to the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * The application should exit."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Vendor is being changed in this command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    private final boolean isVendor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, boolean isVendor) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        this.isVendor \u003d isVendor;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        this(feedbackToUser, false, false, false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public boolean isVendor() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        return isVendor;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit, isVendor);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 19,
      "Ebolaeater": 3,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 1,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.model.vendor.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MorningLit"
        },
        "content": " * Finds and lists all vendors in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all vendors whose names contain any of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        if (!model.isSelected()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            throw new CommandException(ParserUtil.MESSAGE_VENDOR_NOT_SELECTED);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        model.updateFilteredFoodList(predicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "                String.format(Messages.MESSAGE_FOOD_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "                        model.getFilteredFoodListSize()), false, false, true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 8,
      "MorningLit": 4,
      "duckmoon99": 2,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                false, false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 2,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/MenuCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "public class MenuCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"menu\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows the whole menu again.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        if (!model.isSelected()) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            throw new CommandException(ParserUtil.MESSAGE_VENDOR_NOT_SELECTED);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        model.showDefaultMenu();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "                Messages.MESSAGE_MENU_LIST, false, false, true);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 7,
      "duckmoon99": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/PriceCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "import seedu.address.model.food.PriceWithinRangePredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "public class PriceCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"price\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists Food in within price range.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        + \"Parameters: INEQUALITY PRICE\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    private final PriceWithinRangePredicate predicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public PriceCommand(PriceWithinRangePredicate predicate) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        if (!model.isSelected()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            throw new CommandException(ParserUtil.MESSAGE_VENDOR_NOT_SELECTED);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        model.updateFilteredFoodList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "                String.format(Messages.MESSAGE_FOOD_LISTED_PRICE_CONTEXT,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "                        model.getFilteredFoodListSize(), predicate), false, false, true);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                || (other instanceof PriceCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                \u0026\u0026 predicate.equals(((PriceCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 8,
      "duckmoon99": 29,
      "Ebolaeater": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RemoveCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import seedu.address.model.order.OrderItem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MorningLit"
        },
        "content": " * Removes a order item identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "public class RemoveCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remove\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            + \": Removes the order item identified by the index number used in the displayed menu list.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "            + \"Parameters: \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "            + \"1. INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "            + \"2. INDEX (must be a positive integer) QUANTITY (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "            + \"Example: \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "            + \"1. \" + COMMAND_WORD + \" 1\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "            + \"2. \" + COMMAND_WORD + \" 1 2\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public static final String MESSAGE_REMOVE_ORDERITEM_SUCCESS \u003d \"Removed order item: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    private final int quantity;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    private final boolean specified;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * Creates a RemoveCommand to remove the OrderItem at the specified {@code targetIndex} and remove all its quantity"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public RemoveCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        this.quantity \u003d Integer.MAX_VALUE;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        specified \u003d false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * Creates a RemoveCommand to remove the OrderItem at the specified {@code targetIndex} and remove its quantity by"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * the specified {@code quantity}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public RemoveCommand(Index targetIndex, int quantity) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assert quantity \u003e 0;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        specified \u003d true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        if (!model.isSelected()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            throw new CommandException(ParserUtil.MESSAGE_VENDOR_NOT_SELECTED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        ObservableList\u003cOrderItem\u003e order \u003d model.getObservableOrderItemList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        int index \u003d targetIndex.getZeroBased();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        if (order.size() \u003c\u003d index) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            throw new CommandException(ParserUtil.MESSAGE_INVALID_ORDERITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        } else if (model.getOrderItemQuantity(index) \u003c quantity \u0026\u0026 specified) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "            throw new CommandException(ParserUtil.MESSAGE_INVALID_ORDERITEM_DISPLAYED_QUANTITY);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        OrderItem oldItem \u003d order.get(index);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        OrderItem orderItem \u003d new OrderItem(order.get(index), quantity);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        model.removeOrderItem(orderItem);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        if (order.size() \u003d\u003d index || !order.get(index).isSameOrderItemDescription(orderItem)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            orderItem \u003d oldItem;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_REMOVE_ORDERITEM_SUCCESS, orderItem));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                || (other instanceof RemoveCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((RemoveCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 5,
      "MorningLit": 18,
      "Ebolaeater": 10,
      "duckmoon99": 8,
      "-": 32,
      "KendrewChan": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SortCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": " * Sorts the current selected menu."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public static final String NAME \u003d \"n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public static final String PRICE \u003d \"p\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sorts the current select menu. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "            + \" Sort by Price or Quantity \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "            + \" [Ascending / Descending]\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Menu successfully sorted!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    private final String sortedBy;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    private final boolean ascending;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    private final boolean toggle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * Creates an SortCommand to sort the current menu with the respective sort type"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public SortCommand(String sortedBy, String ascending) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assert sortedBy.equals(SortCommand.NAME) || sortedBy.equals(SortCommand.PRICE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assert ascending.equals(\"a\") || ascending.equals(\"d\") || ascending.equals(\"t\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        this.sortedBy \u003d sortedBy;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        if (ascending.equals(\"t\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            this.toggle \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "            this.ascending \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            this.toggle \u003d false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            this.ascending \u003d ascending.equals(\"a\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        if (!model.isSelected()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            throw new CommandException(ParserUtil.MESSAGE_VENDOR_NOT_SELECTED);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        model.sortFoodBy(sortedBy, ascending, toggle);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, false, true);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 31,
      "KendrewChan": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SubmitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "import seedu.address.model.order.OrderItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "public class SubmitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"submit\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        if (!model.isSelected()) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            throw new CommandException(ParserUtil.MESSAGE_VENDOR_NOT_SELECTED);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        Order order \u003d new Order();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        order.setOrderItems(model.getObservableOrderItemList());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        StringBuilder text \u003d new StringBuilder();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        for (OrderItem orderItem: order) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "            text.append(String.format(\"%s x %d\\n\", orderItem.getName(), orderItem.getQuantity()));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        text.append(String.format(\"Estimated total: $%.2f\", order.getTotal()));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        return new CommandResult(text.toString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 8,
      "MorningLit": 1,
      "duckmoon99": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SwitchVendorCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.model.vendor.Vendor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": " * Selects a Vendor to order from."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "public class SwitchVendorCommand extends VendorCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"vendor\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Selects a Vendor in the AddressBook. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            + \" Index of Vendor\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public static final String MESSAGE_SELECT_VENDOR_SUCCESS \u003d \"Vendor %s has been selected.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    private final Index vendorIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Creates a VendorCommand to select the vendor at the specified {@code index} of the AddressBook"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public SwitchVendorCommand(Index index) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        this.vendorIndex \u003d index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        ObservableList\u003cVendor\u003e vendors \u003d model.getObservableVendorList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        int index \u003d vendorIndex.getZeroBased();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        if (vendors.size() \u003c\u003d index) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            throw new CommandException(ParserUtil.MESSAGE_INVALID_VENDOR_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        int oldIndex \u003d model.getVendorIndex();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        model.selectVendor(index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        if (oldIndex !\u003d index) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            model.resetOrder();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_VENDOR_SUCCESS, vendorIndex.getOneBased()),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                false, false, true);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                || (other instanceof SwitchVendorCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                \u0026\u0026 vendorIndex.equals(((SwitchVendorCommand) other).vendorIndex));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 61,
      "MorningLit": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/TotalCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "public class TotalCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"total\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public static final String MESSAGE_RESULT \u003d \"Total is $%.2f.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        if (!model.isSelected()) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            throw new CommandException(ParserUtil.MESSAGE_VENDOR_NOT_SELECTED);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        Order order \u003d new Order();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        order.setOrderItems(model.getObservableOrderItemList());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        double total \u003d order.getTotal();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_RESULT, total));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 8,
      "MorningLit": 1,
      "duckmoon99": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Undoes the last change to the order.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public static final String MESSAGE_UNDO_SUCCESS \u003d \"Successfully undone last change.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public static final String MESSAGE_UNDO_EMPTY \u003d \"No changes left to undo.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        if (!model.isSelected()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            throw new CommandException(ParserUtil.MESSAGE_VENDOR_NOT_SELECTED);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        if (model.getOrderHistorySize() \u003c\u003d 1) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "            return new CommandResult(MESSAGE_UNDO_EMPTY);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        model.undoOrder();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        return new CommandResult(MESSAGE_UNDO_SUCCESS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        return super.equals(obj);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 6,
      "duckmoon99": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/VendorCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "public class VendorCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"vendor\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public static final String MESSAGE_RESET_VENDOR_SUCCESS \u003d \"Vendors have been displayed.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        model.selectVendor(-1);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        model.clearOrder();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        return new CommandResult(MESSAGE_RESET_VENDOR_SUCCESS,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                false, false, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                || (other instanceof VendorCommand); // instanceof handles nulls"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 22,
      "MorningLit": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/enums/Inequality.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "package seedu.address.logic.commands.enums;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "public enum Inequality {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    LESSER_THAN(\"\u003c\"),"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    LESSER_THAN_OR_EQUAL_TO(\"\u003c\u003d\"),"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    GREATER_THAN(\"\u003e\"),"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    GREATER_THAN_OR_EQUAL_TO(\"\u003e\u003d\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    private String s;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    Inequality(String s) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        this.s \u003d s;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public boolean matches(String s) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        return this.s.equals(s);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public static Inequality get(String s) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        for (Inequality ineq: Inequality.values()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "            if (ineq.matches(s)) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "                return ineq;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duckmoon99": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        String trimArgs \u003d args.trim();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        String[] argsArr \u003d trimArgs.split(\" \");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        ParserUtil.checkArgsLength(argsArr, AddCommand.COMMAND_WORD, AddCommand.MESSAGE_USAGE, 1, 2);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        Index index \u003d ParserUtil.parseIndex(argsArr[0], \"Menu Index\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        if (argsArr.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            return new AddCommand(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        int quantity \u003d ParserUtil.parseQuantity(argsArr[1]);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        return new AddCommand(index, quantity);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 6,
      "Ebolaeater": 5,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_AMBIGUOUS_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "import seedu.address.logic.commands.MenuCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "import seedu.address.logic.commands.PriceCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.logic.commands.RemoveCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "import seedu.address.logic.commands.SubmitCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "import seedu.address.logic.commands.TotalCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.logic.commands.VendorCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        final String commandPrefix \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        String[] commands \u003d {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "            AddCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "            RemoveCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "            SortCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "            ClearCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "            FindCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "            PriceCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "            MenuCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "            TotalCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "            SubmitCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "            UndoCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "            ExitCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            HelpCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "            VendorCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        };"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        ArrayList\u003cString\u003e matchingCommands \u003d new ArrayList\u003c\u003e(Arrays.asList(commands));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        matchingCommands.removeIf(s -\u003e !s.startsWith(commandPrefix));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        String commandWord \u003d \"\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        if (matchingCommands.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "            commandWord \u003d matchingCommands.get(0);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        case RemoveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            return new RemoveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "            return new SortCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            return new ClearCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        case PriceCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "            return new PriceCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        case MenuCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "            return new MenuCommand();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        case TotalCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "            return new TotalCommand();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        case SubmitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "            return new SubmitCommand();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        case VendorCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            return new VendorCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "            throw matchingCommands.size() \u003d\u003d 0"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "                    ? new ParseException(MESSAGE_UNKNOWN_COMMAND)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "                    : new ParseException(String.format(MESSAGE_AMBIGUOUS_COMMAND, matchingCommands));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duckmoon99": 49,
      "Ebolaeater": 9,
      "-": 64,
      "KendrewChan": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ClearCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": " * Parses input command and creates a new ClearCommand object"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "public class ClearCommandParser implements Parser\u003cClearCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ClearCommand"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * and returns an ClearCommand object for execution."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public ClearCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        String trimArgs \u003d args.trim();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        String errorMessage \u003d String.format(ParserUtil.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                ClearCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        if (trimArgs.length() !\u003d 0) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            throw new ParseException(errorMessage);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        return new ClearCommand();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ebolaeater": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /* Prefixes for Food */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public static final Prefix PREFIX_PRICE \u003d new Prefix(\"pr/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 3,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.model.vendor.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 1,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "import seedu.address.logic.commands.enums.Inequality;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseIndexException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.model.vendor.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.model.vendor.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.model.vendor.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.model.vendor.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"%s is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public static final String MESSAGE_INVALID_QUANTITY \u003d \"Quantity given is invalid.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public static final String MESSAGE_INVALID_VENDOR_DISPLAYED_INDEX \u003d \"The vendor index provided is invalid\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public static final String MESSAGE_INVALID_ORDERITEM_DISPLAYED_INDEX \u003d \"The order item index provided is invalid\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public static final String MESSAGE_INVALID_ORDERITEM_DISPLAYED_QUANTITY \u003d \"The order item quantity \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            + \"provided is invalid\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public static final String MESSAGE_VENDOR_NOT_SELECTED \u003d \"A vendor has not been selected yet,\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            + \" please choose a vendor.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public static final String MESSAGE_INSUFFICENT_ARGUMENTS \u003d \"%s command requires at least %s argument(s). \\n %s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public static final String MESSAGE_TOO_MANY_ARGUMENTS \u003d \"%s command should not have more than %s arguments. \\n %s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public static final String MESSAGE_INVALID_PRICE \u003d \"%s is not a non-negative unsigned real number.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public static final String MESSAGE_INVALID_INEQUALITY \u003d \"%s is not a valid inequality sign.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     * Parses {@code inequality} into an {@code Inequality} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     * @throws ParseException if the string is not recognized as an inequality symbol"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public static Inequality parseInequality(String inequality) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        String trimmedInequality \u003d inequality.trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        if (!StringUtil.isInequality(trimmedInequality)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_INEQUALITY, trimmedInequality));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        return Inequality.get(trimmedInequality);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     * Parses {@code price} into a double and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     * @throws ParseException if the string is not a valid price"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public static double parsePrice(String price) throws ParseException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        String trimmedPrice \u003d price.trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        if (!StringUtil.isNonNegativeUnsignedDouble(trimmedPrice)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_PRICE, trimmedPrice));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        return Double.parseDouble(trimmedPrice);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} with indexName"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * @throws ParseIndexException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex, String indexName) throws ParseIndexException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            throw new ParseIndexException(String.format(MESSAGE_INVALID_INDEX, indexName));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Parses {@code quantity} into an {@code Integer} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * @throws ParseIndexException if the specified quantity is a zero or negative value, or not an Integer."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public static int parseQuantity(String quantity) throws ParseIndexException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        String trimmedQuantity \u003d quantity.trim();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedQuantity)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            throw new ParseIndexException(MESSAGE_INVALID_QUANTITY);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        return Integer.parseInt(trimmedQuantity);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Checks whether the number of arguments are from min to max inclusive."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Throws a ParseException if given String is empty."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public static void checkArgsLength(String[] argsArr, String commandWord, String messageUsage,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                                       int min, int max) throws ParseException {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        // Check for empty String"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        if (argsArr.length \u003d\u003d 1 \u0026\u0026 argsArr[0].equals(\"\") || argsArr.length \u003c min) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                    String.format(MESSAGE_INSUFFICENT_ARGUMENTS, commandWord, min, messageUsage)));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        } else if (argsArr.length \u003e max) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                    String.format(MESSAGE_TOO_MANY_ARGUMENTS, commandWord, max, messageUsage)));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Checks whether the number of arguments are equal to argNum."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Throws a ParseException if given String is empty."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public static void checkArgsLength(String[] argsArr, String commandWord,"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                                       String messageUsage, int argNum) throws ParseException {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        checkArgsLength(argsArr, commandWord, messageUsage, argNum, argNum);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 63,
      "MorningLit": 4,
      "duckmoon99": 32,
      "Ebolaeater": 6,
      "-": 119
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/PriceCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "import seedu.address.logic.commands.PriceCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "import seedu.address.logic.commands.enums.Inequality;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "import seedu.address.model.food.PriceWithinRangePredicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "public class PriceCommandParser implements Parser\u003cPriceCommand\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the PriceCommand"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     * and returns an PriceCommand object for execution."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public PriceCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        String[] argsArr \u003d trimmedArgs.split(\" \");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        ParserUtil.checkArgsLength(argsArr, PriceCommand.COMMAND_WORD, PriceCommand.MESSAGE_USAGE, 2);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        Inequality inequality \u003d ParserUtil.parseInequality(argsArr[0]);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        double price \u003d ParserUtil.parsePrice(argsArr[1]);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        return new PriceCommand(new PriceWithinRangePredicate(inequality, price));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duckmoon99": 23,
      "Ebolaeater": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RemoveCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.logic.commands.RemoveCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": " * Parses input arguments and creates a new RemoveCommand object"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "public class RemoveCommandParser implements Parser\u003cRemoveCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RemoveCommand"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * and returns a RemoveCommand object for execution."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public RemoveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        String trimArgs \u003d args.trim();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        String[] argsArr \u003d trimArgs.split(\" \");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        ParserUtil.checkArgsLength(argsArr, RemoveCommand.COMMAND_WORD, RemoveCommand.MESSAGE_USAGE, 1, 2);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        Index index \u003d ParserUtil.parseIndex(argsArr[0], \"Menu Index\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        if (argsArr.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            return new RemoveCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        int quantity \u003d ParserUtil.parseQuantity(argsArr[1]);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return new RemoveCommand(index, quantity);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 8,
      "Ebolaeater": 7,
      "-": 14,
      "KendrewChan": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SortCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": " * Parses input arguments and creates a new SortCommand object"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "public class SortCommandParser implements Parser\u003cSortCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SortCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     * and returns an SortCommand object for execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public SortCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        String trimArgs \u003d args.trim();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        String[] argsArr \u003d trimArgs.split(\" \");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        ParserUtil.checkArgsLength(argsArr, SortCommand.COMMAND_WORD, SortCommand.MESSAGE_USAGE, 1, 2);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        String sortedBy \u003d argsArr[0].toLowerCase();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        String ascending \u003d \"t\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        if (argsArr.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            ascending \u003d argsArr[1].toLowerCase();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        if (!sortedBy.equals(SortCommand.NAME) \u0026\u0026 !sortedBy.equals(SortCommand.PRICE)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "            throw new ParseException(SortCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        if (!ascending.equals(\"a\") \u0026\u0026 !ascending.equals(\"d\") \u0026\u0026 !ascending.equals(\"t\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "            throw new ParseException(SortCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        return new SortCommand(sortedBy, ascending);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 7,
      "KendrewChan": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/VendorCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.logic.commands.SwitchVendorCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.logic.commands.VendorCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": " * Parses input arguments and creates a new VendorCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "public class VendorCommandParser implements Parser\u003cVendorCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the VendorCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * and returns an VendorCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public VendorCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        String trimArgs \u003d args.trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        String[] argsArr \u003d trimArgs.split(\" \");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        // No arguments supplied"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        if (argsArr.length \u003d\u003d 1 \u0026\u0026 argsArr[0].equals(\"\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            return new VendorCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        ParserUtil.checkArgsLength(argsArr, VendorCommand.COMMAND_WORD, SwitchVendorCommand.MESSAGE_USAGE, 1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        Index index \u003d ParserUtil.parseIndex(argsArr[0], \"Vendor Index\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        return new SwitchVendorCommand(index);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/exceptions/ParseIndexException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "package seedu.address.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "public class ParseIndexException extends ParseException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public ParseIndexException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.model.vendor.UniqueVendorList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.model.vendor.Vendor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    private final UniqueVendorList vendors;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    private int vendorIndex;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    *   among constructors."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    */ {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        vendors \u003d new UniqueVendorList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * Default vendor index is -1. Assumes that there is no vendor chosen yet."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public AddressBook() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        this.vendorIndex \u003d -1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * Creates an AddressBook using the Vendors in the {@code toBeCopied}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Sets the vendorIndex of the AddressBook to {@code vendorIndex}. This method is only called when"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * the selectVendor method is called."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    private AddressBook(List\u003cVendor\u003e vendors, int vendorIndex) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        setVendors(vendors);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        this.vendorIndex \u003d vendorIndex;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * Replaces the contents of the vendor list with {@code vendors}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * {@code vendors} must not contain duplicate vendors."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void setVendors(List\u003cVendor\u003e vendors) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        this.vendors.setVendors(vendors);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        setVendors(newData.getVendorList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        selectVendor(newData.getVendorIndex());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //// vendor-level operations"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * Returns true if a vendor with the same identity as {@code vendor} exists in the address book."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public boolean hasVendor(Vendor vendor) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        requireNonNull(vendor);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        return vendors.contains(vendor);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * Adds a vendor to the address book."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * The vendor must not already exist in the address book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void addVendor(Vendor p) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        vendors.add(p);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * Replaces the given vendor {@code target} in the list with {@code editedVendor}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * The vendor identity of {@code editedVendor} must not be the same as another existing vendor in the address book."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void setVendor(Vendor target, Vendor editedVendor) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        requireNonNull(editedVendor);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        vendors.setVendor(target, editedVendor);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void selectVendor(int vendorIndex) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        this.vendorIndex \u003d vendorIndex;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public int getVendorIndex() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        return this.vendorIndex;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public Vendor getSelectedVendor() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        return this.vendors.asUnmodifiableObservableList().get(vendorIndex);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void removeVendor(Vendor key) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        vendors.remove(key);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return vendors.asUnmodifiableObservableList().size() + \" vendors\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public ObservableList\u003cVendor\u003e getVendorList() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        return vendors.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                \u0026\u0026 vendors.equals(((AddressBook) other).vendors))"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                \u0026\u0026 this.getVendorIndex() \u003d\u003d ((AddressBook) other).getVendorIndex();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return vendors.hashCode();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 30,
      "MorningLit": 8,
      "Ebolaeater": 28,
      "-": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.model.food.Food;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.model.menu.ReadOnlyMenuManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import seedu.address.model.order.OrderItem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import seedu.address.model.order.ReadOnlyOrderManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.model.vendor.Vendor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    Predicate\u003cFood\u003e PREDICATE_SHOW_ALL_FOODS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Sets the user prefs\u0027 menu manager file path."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Replaces menu manager data with the data in {@code menuManager}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Returns the AddressBook"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * Returns true if a vendor with the same identity as {@code vendor} exists in the address book."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    boolean hasVendor(Vendor vendor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Selects the vendor with index {@code vendorIndex} ."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * {@code vendorIndex} must be a valid index in the model."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    void selectVendor(int vendorIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    ObservableList\u003cVendor\u003e getObservableVendorList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Replaces address book data with the data in {@code menuManager}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    void setMenuManager(ReadOnlyMenuManager menuManager, int index);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Returns the MenuManager at the ith index"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    ReadOnlyMenuManager getMenuManager(int index);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    void sortFoodBy(String sortedBy, boolean ascending, boolean toggle);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    void showDefaultMenu();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     * Replaces address book data with the data in {@code orderManager}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    void setOrderManager(ReadOnlyOrderManager orderManager);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Returns the MenuManager at the ith index"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    ReadOnlyOrderManager getOrderManager();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     * Returns true if an orderItem with the same identity as {@code orderItem} exists in the address book."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    boolean hasOrderItem(OrderItem orderItem);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     * Deletes the given orderItem."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     * The orderItem must exist in the order manager."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    void removeOrderItem(OrderItem target);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     * Adds the given orderItem."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     * {@code orderItem} if orderItem exists in order manageradd to the current quantity."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    void addOrderItem(OrderItem orderItem);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Returns an unmodifiable view of the filtered food list at the corresponding index"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    ObservableList\u003cFood\u003e getFilteredFoodList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    int getFilteredFoodListSize();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * Clears the order."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    void clearOrder();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     * Clears the orderHistory."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    void resetOrder();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Updates the filter of the filtered food list at the corresponding index to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    void updateFilteredFoodList(Predicate\u003cFood\u003e predicate);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Returns an unmodifiable view of the filtered orderItem list at the corresponding index"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    ObservableList\u003cOrderItem\u003e getObservableOrderItemList();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    int getOrderSize();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    int getVendorIndex();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    int getOrderHistorySize();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    int getOrderItemQuantity(int index);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    void undoOrder();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    boolean isSelected();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 38,
      "MorningLit": 10,
      "duckmoon99": 14,
      "Ebolaeater": 8,
      "-": 68,
      "KendrewChan": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.model.food.Food;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.model.menu.MenuManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.model.menu.ReadOnlyMenuManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import seedu.address.model.order.OrderItem;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import seedu.address.model.order.OrderManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import seedu.address.model.order.ReadOnlyOrderManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.model.vendor.Vendor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    private final List\u003cMenuManager\u003e menuManagers;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    private final OrderManager orderManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    private ObservableList\u003cFood\u003e filteredFoods;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    private boolean isSortedAsc \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        this.menuManagers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        this.orderManager \u003d new OrderManager();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     * Initializes a ModelManager with the given addressBook, userPrefs, menuManager and orderManager."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public ModelManager("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "            ReadOnlyAddressBook addressBook,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "            ReadOnlyUserPrefs userPrefs,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "            List\u003cMenuManager\u003e menuManagers,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "            OrderManager orderManager"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    ) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs, menuManagers, orderManager);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        this.menuManagers \u003d menuManagers;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        this.orderManager \u003d orderManager;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        this(new AddressBook(), new UserPrefs(), new ArrayList\u003c\u003e(), new OrderManager());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public boolean hasVendor(Vendor vendor) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        requireNonNull(vendor);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return addressBook.hasVendor(vendor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void selectVendor(int vendorIndex) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        this.addressBook.selectVendor(vendorIndex);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        if (vendorIndex !\u003d -1) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            this.filteredFoods \u003d new FilteredList\u003c\u003e(this.menuManagers.get(vendorIndex).getFoodList());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public int getVendorIndex() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        return this.addressBook.getVendorIndex();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public boolean isSelected() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        return this.addressBook.getVendorIndex() !\u003d -1;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public ObservableList\u003cVendor\u003e getObservableVendorList() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return addressBook.getVendorList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d MenuManager \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void setMenuManager(ReadOnlyMenuManager menuManager, int index) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        this.menuManagers.get(index).resetData(menuManager);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public ReadOnlyMenuManager getMenuManager(int index) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        return menuManagers.get(index);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public void sortFoodBy(String sortedBy, boolean ascending, boolean toggle) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        int index \u003d getVendorIndex();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d menuManagers.size()) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        // not suppose to modify menumanager\u0027s menus"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        Comparator\u003cFood\u003e foodComparator;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        switch (sortedBy) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        case SortCommand.NAME:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            foodComparator \u003d Comparator.comparing(Food::getName);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        case SortCommand.PRICE:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            foodComparator \u003d Comparator.comparing(Food::getPrice);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            throw new IllegalStateException(\"Unexpected value: \" + sortedBy);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        filteredFoods \u003d filteredFoods.sorted(foodComparator);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        if ((toggle \u0026\u0026 isSortedAsc) || (!toggle \u0026\u0026 !ascending)) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            filteredFoods \u003d filteredFoods.sorted(foodComparator.reversed());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        isSortedAsc \u003d toggle ? !isSortedAsc : ascending;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * Shows the current menu at the default state."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public void showDefaultMenu() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        filteredFoods \u003d new FilteredList\u003c\u003e(menuManagers.get(getVendorIndex()).getFoodList());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        isSortedAsc \u003d false;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d OrderManager \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public void setOrderManager(ReadOnlyOrderManager orderManager) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        this.orderManager.resetData(orderManager);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public ReadOnlyOrderManager getOrderManager() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        return orderManager;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public boolean hasOrderItem(OrderItem orderItem) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        requireNonNull(orderItem);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        return orderManager.hasOrderItem(orderItem);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public void removeOrderItem(OrderItem target) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        requireNonNull(target);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        orderManager.removeOrderItem(target);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public void addOrderItem(OrderItem orderItem) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        requireNonNull(orderItem);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        orderManager.addOrderItem(orderItem);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public int getOrderHistorySize() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        return orderManager.getOrderHistorySize();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public int getOrderItemQuantity(int index) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        return orderManager.getQuantity(index);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public void undoOrder() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        orderManager.undoChanges();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void clearOrder() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        orderManager.setOrder(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public void resetOrder() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        orderManager.resetOrder();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public int getOrderSize() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return orderManager.getOrderItemList().size();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public ObservableList\u003cOrderItem\u003e getObservableOrderItemList() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return orderManager.getOrderItemList();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Food List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public ObservableList\u003cFood\u003e getFilteredFoodList() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return filteredFoods;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public int getFilteredFoodListSize() {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return filteredFoods \u003d\u003d null ? 0 : getFilteredFoodList().size();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public void updateFilteredFoodList(Predicate\u003cFood\u003e predicate) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        int index \u003d getVendorIndex();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d menuManagers.size()) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        // not suppose to modify menumanager\u0027s menus"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        filteredFoods \u003d filteredFoods.filtered(predicate);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 32,
      "MorningLit": 61,
      "Ebolaeater": 12,
      "duckmoon99": 24,
      "-": 131,
      "KendrewChan": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.model.vendor.Vendor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * Returns an unmodifiable view of the vendors list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * This list will not contain any duplicate vendors."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    ObservableList\u003cVendor\u003e getVendorList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Returns an unmodifiable view of the selected vendor index."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    int getVendorIndex();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 4,
      "MorningLit": 2,
      "Ebolaeater": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    private Path menuManagerFolderPath \u003d Paths.get(\"menu\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    private Path orderManagerFolderPath \u003d Paths.get(\"order\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public Path getMenuManagerFolderPath() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        return menuManagerFolderPath;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void setMenuManagerFolderPath(Path menuManagerFolderPath) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        requireNonNull(menuManagerFolderPath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        this.addressBookFilePath \u003d menuManagerFolderPath;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public Path getOrderManagerFolderPath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        return orderManagerFolderPath;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public void setOrderManagerFolderPath(Path orderManagerFolderPath) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        requireNonNull(orderManagerFolderPath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        this.addressBookFilePath \u003d orderManagerFolderPath;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 10,
      "duckmoon99": 10,
      "-": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/model/food/Food.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "package seedu.address.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MorningLit"
        },
        "content": " * Represents a Food in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "public class Food {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    protected final String name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    protected final double price;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    protected final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public Food(String name, double price, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        requireAllNonNull(name, price, tags);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Checks whether the price of the food is valid."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public static boolean isValidPrice(double price) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        if (price \u003c\u003d 0) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        String priceString \u003d String.valueOf(price);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        String[] priceArray \u003d priceString.split(\"\\\\.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        // Price with 0 as fractional portion"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        if (priceArray.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assert priceArray.length \u003d\u003d 2;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        return priceArray[1].length() \u003c\u003d 2;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public double getPrice() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        return price;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Formats the price to 2 decimal places"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public String getPriceString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        return String.format(\"$%.2f\", price);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * Returns true if both foods have the same identity and data fields."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * This defines a stronger notion of equality between two foods."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        if (!(other instanceof Food)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        Food otherFood \u003d (Food) other;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return otherFood.getName().equals(getName())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                \u0026\u0026 otherFood.getPrice() \u003d\u003d getPrice()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                \u0026\u0026 otherFood.getTags().equals(getTags());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        return Objects.hash(name, price, tags);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                .append(\" Price: \")"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                .append(getPriceString())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 104,
      "MorningLit": 7,
      "KendrewChan": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/food/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "package seedu.address.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": " * Tests that a {@code Food}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cFood\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public boolean test(Food food) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(food.getName(), keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 5,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/food/PriceWithinRangePredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "package seedu.address.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "import seedu.address.logic.commands.enums.Inequality;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "public class PriceWithinRangePredicate implements Predicate\u003cFood\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    private final double price;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    private final Inequality inequality;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     * Creates a predicate, taking in an inequality and a price. Used to compare the price of a food item to the price"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     * with the specified inequality."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public PriceWithinRangePredicate(Inequality inequality, double price) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        this.inequality \u003d inequality;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        if (price \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            throw new ParseException(String.format(ParserUtil.MESSAGE_INVALID_PRICE, price));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public boolean test(Food food) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        switch (inequality) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        case LESSER_THAN:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "            return food.getPrice() \u003c price;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        case LESSER_THAN_OR_EQUAL_TO:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "            return food.getPrice() \u003c\u003d price;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        case GREATER_THAN:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "            return food.getPrice() \u003e price;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        case GREATER_THAN_OR_EQUAL_TO:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "            return food.getPrice() \u003e\u003d price;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "            assert (false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public boolean equals (Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                || (other instanceof PriceWithinRangePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                \u0026\u0026 price \u003d\u003d ((PriceWithinRangePredicate) other).price"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                \u0026\u0026 inequality.equals(((PriceWithinRangePredicate) other).inequality)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        return String.format(\"%s $%.2f\", inequality.toString(), price);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duckmoon99": 40,
      "Ebolaeater": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/food/exceptions/DuplicateFoodException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "package seedu.address.model.food.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": " * Signals that the operation will result in duplicate Foods (Foods are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "public class DuplicateFoodException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public DuplicateFoodException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/food/exceptions/FoodNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "package seedu.address.model.food.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": " * Signals that the operation is unable to find the specified food."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "public class FoodNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public FoodNotFoundException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        super(\"Food not found\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/menu/Menu.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "package seedu.address.model.menu;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.model.food.Food;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.model.food.exceptions.DuplicateFoodException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.model.food.exceptions.FoodNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.storage.JsonAdaptedFood;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": " * A list of foods that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": " * A food is considered unique by comparing using {@code Food#equals(Food)}. As such, adding and updating of"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": " * foods uses Food#equals(Food) for equality so as to ensure that the food being added or updated is"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": " * unique in terms of identity in the Menu. The removal of a food also uses Food#equals(Object) so"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": " * as to ensure that the food with exactly the same fields will be removed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": " *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": " *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": " * @see Food#equals(Object) (Food)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "public class Menu implements Iterable\u003cFood\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    private final ObservableList\u003cFood\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    private final ObservableList\u003cFood\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Returns true if the list contains an equivalent food as the given argument."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public boolean contains(Food toCheck) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Adds a food to the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * The food must not already exist in the list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void add(Food toAdd) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            throw new DuplicateFoodException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Replaces the food {@code target} in the list with {@code editedFood}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * The food identity of {@code editedFood} must not be the same as another existing food in the list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void setFood(Food target, Food editedFood) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        requireAllNonNull(target, editedFood);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            throw new FoodNotFoundException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        if (!target.equals(editedFood) \u0026\u0026 contains(editedFood)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            throw new DuplicateFoodException();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        internalList.set(index, editedFood);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Removes the equivalent food from the list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * The food must exist in the list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void remove(Food toRemove) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            throw new FoodNotFoundException();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void setFoods(Menu replacement) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Replaces the contents of this list with {@code foods}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * {@code foods} must not contain duplicate foods."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void setFoods(List\u003cFood\u003e foods) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        requireAllNonNull(foods);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        if (!foodsAreUnique(foods)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            throw new DuplicateFoodException();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        internalList.setAll(foods);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     * Sort Food items in menu by name"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     * @param ascending decide whether to sort ascending or descending"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public void sortFoodByName(boolean ascending) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        Comparator\u003cFood\u003e foodComparator \u003d Comparator.comparing(Food::getName);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        if (ascending) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "            internalList.sort(foodComparator);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "            internalList.sort(foodComparator.reversed());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     * Sort Food items in menu by price"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     * @param ascending decide whether to sort ascending or descending"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public void sortFoodByPrice(boolean ascending) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        Comparator\u003cFood\u003e foodComparator \u003d Comparator.comparing(Food::getPrice);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        if (ascending) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "            internalList.sort(foodComparator);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "            internalList.sort(foodComparator.reversed());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * Replaces the contents of this list with {@code foods}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * {@code foods} must not contain duplicate foods."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void setOrderedFoodList(List\u003cJsonAdaptedFood\u003e foods) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        requireAllNonNull(foods);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        List\u003cFood\u003e foodList \u003d foods.stream().map(x -\u003e {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                return x.toModelType();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        }).collect(Collectors.toList());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        if (!foodsAreUnique(foodList)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            throw new DuplicateFoodException();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        internalList.setAll(foodList);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * Gets the contents of the list."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * {@code foods} must not contain duplicate foods."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public List\u003cJsonAdaptedFood\u003e getFoods() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        requireAllNonNull(internalList);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        ArrayList\u003cJsonAdaptedFood\u003e foodList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        for (Food food : internalList) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            foodList.add(new JsonAdaptedFood(food));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        return foodList;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public ObservableList\u003cFood\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public Iterator\u003cFood\u003e iterator() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                || (other instanceof Menu // instanceof handles nulls"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                        \u0026\u0026 internalList.equals(((Menu) other).internalList));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Returns true if {@code foods} contains only unique foods."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    private boolean foodsAreUnique(List\u003cFood\u003e foods) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        for (int i \u003d 0; i \u003c foods.size() - 1; i++) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            for (int j \u003d i + 1; j \u003c foods.size(); j++) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                if (foods.get(i).equals(foods.get(j))) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 139,
      "Ebolaeater": 39,
      "KendrewChan": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/model/menu/MenuManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "package seedu.address.model.menu;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.model.food.Food;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": " * Duplicates are not allowed (by .isSameFood comparison)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "public class MenuManager implements ReadOnlyMenuManager {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    private Menu menu;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        menu \u003d new Menu();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public MenuManager() {}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Creates a MenuManager using the Foods in the {@code toBeCopied}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public MenuManager(ReadOnlyMenuManager toBeCopied) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * Creates a MenuManager using the menu in the {@code toBeCopied}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public MenuManager(Menu toBeCopied) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        this.menu \u003d toBeCopied;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Replaces the contents of the food list with {@code foods}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * {@code foods} must not contain duplicate foods."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void setMenu(List\u003cFood\u003e foods) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        this.menu.setFoods(foods);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Resets the existing data of this {@code MenuManager} with {@code newData}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void resetData(ReadOnlyMenuManager newData) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        setMenu(newData.getFoodList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    //// food-level operations"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Returns true if a food with the same identity as {@code food} exists in the menu manager."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public boolean hasFood(Food food) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        requireNonNull(food);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        return menu.contains(food);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Adds a food to the address book."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * The food must not already exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void addFood(Food f) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        menu.add(f);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Replaces the given food {@code target} in the list with {@code editedFood}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * The food identity of {@code editedFood} must not be the same as another existing food in the address book."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void setFood(Food target, Food editedFood) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        requireNonNull(editedFood);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        menu.setFood(target, editedFood);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public void sortFoodByName(boolean ascending) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        menu.sortFoodByName(ascending);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public void sortFoodByPrice(boolean ascending) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        menu.sortFoodByPrice(ascending);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Removes {@code key} from this {@code MenuManager}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void removeFood(Food key) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        menu.remove(key);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        return menu.asUnmodifiableObservableList().size() + \" foods\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public ObservableList\u003cFood\u003e getFoodList() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        return menu.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                || (other instanceof MenuManager // instanceof handles nulls"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                \u0026\u0026 menu.equals(((MenuManager) other).menu));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        return menu.hashCode();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 120,
      "Ebolaeater": 8,
      "KendrewChan": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/menu/ReadOnlyMenuManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "package seedu.address.model.menu;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.model.food.Food;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": " * Unmodifiable view of a menu"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "public interface ReadOnlyMenuManager {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Returns an unmodifiable view of the foods list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * This list will not contain any duplicate foods."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    ObservableList\u003cFood\u003e getFoodList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/order/Order.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import seedu.address.model.order.exceptions.DuplicateOrderItemException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import seedu.address.model.order.exceptions.OrderItemNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import seedu.address.model.vendor.Vendor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "public class Order implements Iterable\u003cOrderItem\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    protected Vendor vendor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    private final ObservableList\u003cOrderItem\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    private final ObservableList\u003cOrderItem\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public void setVendor(Vendor vendor) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        this.vendor \u003d vendor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     * Returns true if the list contains an equivalent OrderItem as the given argument."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public boolean contains(OrderItem toCheck) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameOrderItemDescription);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     * Returns a copy of the order. The orderItems are also copies."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public Order makeCopy() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        Order newOrder \u003d new Order();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        for (OrderItem orderItem: internalList) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "            newOrder.add(orderItem.makeCopy());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        return newOrder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     * Adds OrderItem to the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public void add(OrderItem toAdd) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "            int index \u003d internalList.indexOf(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "            OrderItem existingItem \u003d internalList.get(index);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "            toAdd.setQuantity(toAdd.getQuantity() + existingItem.getQuantity());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "            setOrderItem(existingItem, toAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "            internalList.add(toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public OrderItem getOrderItem(String name) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        for (OrderItem orderItem: internalList) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "            if (orderItem.getName().equals(name)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "                return orderItem;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        throw new OrderItemNotFoundException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     * Replaces the OrderItem {@code target} in the list with {@code editedOrderItem}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     * The OrderItem identity of {@code editedOrderItem} must not be the same as another existing OrderItem in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public void setOrderItem(OrderItem target, OrderItem editedOrderItem) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        requireAllNonNull(target, editedOrderItem);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "            throw new OrderItemNotFoundException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        if (!target.isSameOrderItemDescription(editedOrderItem) \u0026\u0026 contains(editedOrderItem)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "            throw new DuplicateOrderItemException();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        internalList.set(index, editedOrderItem);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     * Removes the equivalent OrderItem from the list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     * The OrderItem must exist in the list."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public void remove(OrderItem toRemove) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        if (!contains(toRemove)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "            throw new OrderItemNotFoundException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        int index \u003d internalList.indexOf(toRemove);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        OrderItem existingItem \u003d internalList.get(index);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        int currQty \u003d existingItem.getQuantity();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        int newQty \u003d currQty - toRemove.getQuantity();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        if (!OrderItem.isValidQuantity(newQty)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            // Remove all"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            internalList.remove(toRemove);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            // Reduce"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            OrderItem reduce \u003d new OrderItem(toRemove, newQty);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            setOrderItem(existingItem, reduce);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public void setOrder(Order replacement) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public void setOrderItems(List\u003cOrderItem\u003e orderItems) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        requireAllNonNull(orderItems);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        if (!orderItemsAreUnique(orderItems)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "            throw new DuplicateOrderItemException();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        internalList.setAll(orderItems);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public double getTotal() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        double total \u003d 0;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        for (OrderItem orderItem: internalList) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "            total +\u003d orderItem.getQuantity() * orderItem.getPrice();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        return total;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        StringBuilder text \u003d new StringBuilder();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        for (OrderItem orderItem: internalList) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "            text.append(orderItem.toString() + \u0027\\n\u0027);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        return text.toString();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public ObservableList\u003cOrderItem\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public Iterator\u003cOrderItem\u003e iterator() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public int getQuantity(int index) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        assert(index \u003c internalList.size());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        return internalList.get(index).getQuantity();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "                || (other instanceof Order // instanceof handles nulls"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "                \u0026\u0026 internalList.equals(((Order) other).internalList));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     * Returns true if {@code orderItems} contains only unique orderItems."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    private boolean orderItemsAreUnique(List\u003cOrderItem\u003e orderItems) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        for (int i \u003d 0; i \u003c orderItems.size() - 1; i++) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "            for (int j \u003d i + 1; j \u003c orderItems.size(); j++) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                if (orderItems.get(i).isSameOrderItemDescription(orderItems.get(j))) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 18,
      "duckmoon99": 56,
      "KendrewChan": 113
    }
  },
  {
    "path": "src/main/java/seedu/address/model/order/OrderItem.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import seedu.address.model.food.Food;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": " * Represents an OrderItem in the Order."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "public class OrderItem extends Food {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    private int quantity;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public OrderItem(String name, double price, Set\u003cTag\u003e tags, int quantity) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        super(name, price, tags);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        requireAllNonNull(quantity);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Alternative constructor that takes in a food item and quantity. Every field must be present and not null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public OrderItem(Food food, int quantity) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        super(food.getName(), food.getPrice(), food.getTags());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        requireAllNonNull(quantity);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public OrderItem makeCopy() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        return new OrderItem(getName(), getPrice(), getTags(), getQuantity());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public int getQuantity() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        return quantity;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public void setQuantity(int quantity) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public static boolean isValidQuantity(int quantity) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        return quantity \u003e 0;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * Returns true only if both OrderItems have the same exact identity fields for all attributes."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public boolean isSameOrderItem(OrderItem orderItem) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        if (orderItem \u003d\u003d this) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        return orderItem !\u003d null"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "                \u0026\u0026 orderItem.getName().equals(getName())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "                \u0026\u0026 (orderItem.getPrice() \u003d\u003d (getPrice()))"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                \u0026\u0026 (orderItem.getQuantity() \u003d\u003d getQuantity())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "                \u0026\u0026 (orderItem.getTags().equals(getTags()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * Returns true if both OrderItems have the same identity fields for all attributes except for quantity."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * This defines a weaker notion of equality between two OrderItems."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public boolean isSameOrderItemDescription(OrderItem orderItem) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        if (orderItem \u003d\u003d this) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return orderItem !\u003d null"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                \u0026\u0026 orderItem.getName().equals(getName())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                \u0026\u0026 (orderItem.getPrice() \u003d\u003d (getPrice()))"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                \u0026\u0026 (orderItem.getTags().equals(getTags()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //                || (other instanceof OrderItem // instanceof handles nulls"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //                \u0026\u0026 isSameOrderItem((OrderItem) other));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        return Objects.hash(super.name, super.price, super.tags, quantity);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "                .append(\" Price: \")"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "                .append(getPriceString())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "                .append(\" Quantity: \")"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "                .append(getQuantity())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 11,
      "MorningLit": 24,
      "duckmoon99": 10,
      "KendrewChan": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/model/order/OrderManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": " * Duplicates are not allowed (by .isSameOrderItem comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "public class OrderManager implements ReadOnlyOrderManager {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    private final Stack\u003cOrder\u003e orderHistory; // head of orderHistory"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    private final Order order;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        orderHistory \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        order \u003d new Order();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        saveChanges();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public OrderManager() {}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     * Creates a OrderManager using the OrderItems in the {@code toBeCopied}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public OrderManager(ReadOnlyOrderManager toBeCopied) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    private void saveChanges() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        orderHistory.add(order.makeCopy());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     * Undoes the last change to the order."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public void undoChanges() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        assert(orderHistory.size() \u003e 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        orderHistory.pop();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        order.setOrder(orderHistory.peek().makeCopy());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     * Replaces the contents of the orderItem list with {@code orderItems}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     * {@code orderItems} must not contain duplicate orderItems."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public void setOrder(List\u003cOrderItem\u003e orderItems) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        this.order.setOrderItems(orderItems);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        saveChanges();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     * Clears the contents of orderHistory."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public void resetOrder() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        this.orderHistory.clear();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        this.order.setOrderItems(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        saveChanges();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     * Resets the existing data of this {@code OrderManager} with {@code newData}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public void resetData(ReadOnlyOrderManager newData) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        setOrder(newData.getOrderItemList());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    //// orderItem-level operations"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     * Returns true if a orderItem with the same identity as {@code orderItem} exists in the order manager."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public boolean hasOrderItem(OrderItem orderItem) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        requireNonNull(orderItem);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        return order.contains(orderItem);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     * Adds a orderItem to the address book."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     * The orderItem must not already exist in the address book."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public void addOrderItem(OrderItem f) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        order.add(f);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        saveChanges();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     * Replaces the given orderItem {@code target} in the list with {@code editedOrderItem}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     * The orderItem identity of {@code editedOrderItem} must not be the same as another existing orderItem in the"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     * address book."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public void setOrderItem(OrderItem target, OrderItem editedOrderItem) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        requireNonNull(editedOrderItem);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        order.setOrderItem(target, editedOrderItem);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        saveChanges();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     * Removes {@code key} from this {@code OrderManager}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public void removeOrderItem(OrderItem key) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        order.remove(key);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        saveChanges();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public int getOrderHistorySize() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        return orderHistory.size();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        return order.asUnmodifiableObservableList().size() + \" orderItems\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public ObservableList\u003cOrderItem\u003e getOrderItemList() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        return order.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public int getQuantity(int index) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        return order.getQuantity(index);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "                || (other instanceof OrderManager // instanceof handles nulls"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "                \u0026\u0026 order.equals(((OrderManager) other).order));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        return order.hashCode();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 2,
      "duckmoon99": 148,
      "KendrewChan": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/order/ReadOnlyOrderManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": " * Unmodifiable view of an order"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "public interface ReadOnlyOrderManager {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     * Returns an unmodifiable view of the OrderItem list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     * This list will not contain any duplicate OrderItems."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    ObservableList\u003cOrderItem\u003e getOrderItemList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duckmoon99": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/order/exceptions/DuplicateOrderItemException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "package seedu.address.model.order.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "public class DuplicateOrderItemException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public DuplicateOrderItemException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        super(\"Operation would result in duplicate order item\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duckmoon99": 4,
      "KendrewChan": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/order/exceptions/OrderItemNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "package seedu.address.model.order.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": " * Signals that the operation is unable to find the specified food."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "public class OrderItemNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public OrderItemNotFoundException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        super(\"OrderItem not found\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duckmoon99": 6,
      "KendrewChan": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[A-Za-z0-9 ]+$\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        Pattern p \u003d Pattern.compile(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        Matcher m \u003d p.matcher(test);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return m.matches();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 7,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.model.food.Food;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.model.menu.Menu;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.model.vendor.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.model.vendor.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.model.vendor.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.model.vendor.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.model.vendor.Vendor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public static Vendor[] getSampleVendors() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        Menu menu1 \u003d new Menu();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        menu1.add(new Food(\"Milo\", 0.9, new HashSet\u003c\u003e()));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        menu1.add(new Food(\"Fries\", 1.5, new HashSet\u003c\u003e()));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        menu1.add(new Food(\"Lemonade\", 2, new HashSet\u003c\u003e()));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        menu1.add(new Food(\"Cup noodles\", 1.15, new HashSet\u003c\u003e()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        Menu menu2 \u003d new Menu();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        HashSet\u003cTag\u003e tagList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        tagList.add(new Tag(\"Egg\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        tagList.add(new Tag(\"Cheese\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        menu2.add(new Food(\"Prata\", 1.0, tagList));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        menu2.add(new Food(\"Water\", 3, new HashSet\u003c\u003e()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        Menu menu3 \u003d new Menu();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        HashSet\u003cTag\u003e tagList2 \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        tagList2.add(new Tag(\"No ice\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        menu3.add(new Food(\"Steak\", 16.90, new HashSet\u003c\u003e()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        menu3.add(new Food(\"Hamburger\", 4.20, new HashSet\u003c\u003e()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        menu3.add(new Food(\"Lemon tea\", 1.2, tagList2));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return new Vendor[] {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            new Vendor(new Name(\"McDonalds\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                getTagSet(\"friends\"), menu1),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            new Vendor(new Name(\"Local Indian Store\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\"), menu2),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            new Vendor(new Name(\"Ameens\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                getTagSet(\"neighbours\"), menu3)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        for (Vendor sampleVendor : getSampleVendors()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            sampleAb.addVendor(sampleVendor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 36,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/model/vendor/Address.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "package seedu.address.model.vendor;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": " * Represents a vendor\u0027s address in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ebolaeater": 2,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/vendor/Email.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "package seedu.address.model.vendor;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": " * Represents a vendor\u0027s email in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ebolaeater": 2,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/model/vendor/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "package seedu.address.model.vendor;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": " * Represents a vendor\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ebolaeater": 2,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/vendor/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "package seedu.address.model.vendor;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.model.food.Food;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MorningLit"
        },
        "content": " * Tests that a {@code Vendor}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cFood\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public boolean test(Food food) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        StringBuilder sentence \u003d new StringBuilder(food.getName() + \u0027 \u0027);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        food.getTags().forEach(x -\u003e sentence.append(x.tagName).append(\u0027 \u0027));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(sentence.toString(), keyword));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 7,
      "Ebolaeater": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/model/vendor/Phone.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "package seedu.address.model.vendor;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": " * Represents a Vendor\u0027s phone number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ebolaeater": 2,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/vendor/ReadOnlyVendorManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "package seedu.address.model.vendor;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MorningLit"
        },
        "content": " * Unmodifiable view of a menu"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MorningLit"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "public interface ReadOnlyVendorManager {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * Returns an unmodifiable view of the vendor list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * This list will not contain any duplicate vendors."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    ObservableList\u003cVendor\u003e getVendorList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/vendor/UniqueVendorList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "package seedu.address.model.vendor;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.model.vendor.exceptions.DuplicateVendorException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.model.vendor.exceptions.VendorNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": " * A list of vendors that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": " * A vendor is considered unique by comparing using {@code Vendor#isSameVendor(Vendor)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": " * vendors uses Vendor#isSameVendor(Vendor) for equality so as to ensure that the vendor being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": " * unique in terms of identity in the UniqueVendorList. However, the removal of a vendor uses Vendor#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": " * as to ensure that the vendor with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": " * @see Vendor#isSameVendor(Vendor)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "public class UniqueVendorList implements Iterable\u003cVendor\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    private final ObservableList\u003cVendor\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    private final ObservableList\u003cVendor\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * Returns true if the list contains an equivalent vendor as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public boolean contains(Vendor toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameVendor);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * Adds a vendor to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * The vendor must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void add(Vendor toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            throw new DuplicateVendorException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * Replaces the vendor {@code target} in the list with {@code editedVendor}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * The vendor identity of {@code editedVendor} must not be the same as another existing vendor in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void setVendor(Vendor target, Vendor editedVendor) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        requireAllNonNull(target, editedVendor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            throw new VendorNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        if (!target.isSameVendor(editedVendor) \u0026\u0026 contains(editedVendor)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            throw new DuplicateVendorException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        internalList.set(index, editedVendor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * Removes the equivalent vendor from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * The vendor must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void remove(Vendor toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            throw new VendorNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void setVendors(UniqueVendorList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * Replaces the contents of this list with {@code vendors}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * {@code vendors} must not contain duplicate vendors."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void setVendors(List\u003cVendor\u003e vendors) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        requireAllNonNull(vendors);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        if (!vendorsAreUnique(vendors)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            throw new DuplicateVendorException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        internalList.setAll(vendors);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public ObservableList\u003cVendor\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public Iterator\u003cVendor\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                || (other instanceof UniqueVendorList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueVendorList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * Returns true if {@code vendors} contains only unique vendors."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    private boolean vendorsAreUnique(List\u003cVendor\u003e vendors) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        for (int i \u003d 0; i \u003c vendors.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            for (int j \u003d i + 1; j \u003c vendors.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                if (vendors.get(i).isSameVendor(vendors.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ebolaeater": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/model/vendor/Vendor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "package seedu.address.model.vendor;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.model.menu.Menu;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "public class Vendor {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    private final Menu menu;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public Vendor(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags, Menu menu) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags, menu);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        this.menu \u003d menu;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public Menu getMenu() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        return menu;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * Returns true if both vendors of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * This defines a weaker notion of equality between two vendors."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public boolean isSameVendor(Vendor otherVendor) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        if (otherVendor \u003d\u003d this) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        return otherVendor !\u003d null"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                \u0026\u0026 otherVendor.getName().equals(getName())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                \u0026\u0026 (otherVendor.getPhone().equals(getPhone()) || otherVendor.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * Returns true if both vendors have the same identity and data fields."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * This defines a stronger notion of equality between two vendors."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        if (!(other instanceof Vendor)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        Vendor otherVendor \u003d (Vendor) other;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        return otherVendor.getName().equals(getName())"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                \u0026\u0026 otherVendor.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                \u0026\u0026 otherVendor.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                \u0026\u0026 otherVendor.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                \u0026\u0026 otherVendor.getTags().equals(getTags())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                \u0026\u0026 otherVendor.getMenu().equals(getMenu());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags, menu);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        //TODO append menu?"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 4,
      "Ebolaeater": 26,
      "-": 91
    }
  },
  {
    "path": "src/main/java/seedu/address/model/vendor/exceptions/DuplicateVendorException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "package seedu.address.model.vendor.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MorningLit"
        },
        "content": " * Signals that the operation will result in duplicate Vendors (Vendors are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MorningLit"
        },
        "content": " * properties)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "public class DuplicateVendorException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public DuplicateVendorException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        super(\"Operation would result in duplicate vendors\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 3,
      "Ebolaeater": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/vendor/exceptions/VendorNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "package seedu.address.model.vendor.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MorningLit"
        },
        "content": " * Signals that the operation is unable to find the specified vendor."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MorningLit"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "public class VendorNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public VendorNotFoundException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        super(\"Vendor not found\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 8,
      "Ebolaeater": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/FoodStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.model.menu.MenuManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.model.menu.ReadOnlyMenuManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.model.vendor.Vendor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": " * Stub to load in a sample menu to be used in MainApp class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "public class FoodStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * Generates a List of ReadOnlyMenuManager wrapped in Optional class"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public List\u003cOptional\u003cReadOnlyMenuManager\u003e\u003e readMenuManagers(ObservableList\u003cVendor\u003e vendorObservableList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        List\u003cOptional\u003cReadOnlyMenuManager\u003e\u003e menuManagers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        for (Vendor vendor : vendorObservableList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            MenuManager menuManager1 \u003d new MenuManager(vendor.getMenu());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            menuManagers.add(Optional.of(menuManager1));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        return menuManagers;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ebolaeater": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedFood.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.model.food.Food;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": " * Jackson-friendly version of {@link seedu.address.model.food.Food}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "public class JsonAdaptedFood {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Food\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public static final String INVALID_PRICE_FORMAT \u003d \"Price must be a double and non-negative.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    private final double price;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Constructs a {@code JsonAdaptedFood} with the given food details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public JsonAdaptedFood(@JsonProperty(\"name\") String name, @JsonProperty(\"price\") double price,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                           @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Converts a given {@code Food} into this class for Jackson use."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public JsonAdaptedFood(Food source) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        name \u003d source.getName();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        price \u003d source.getPrice();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Converts this Jackson-friendly adapted food object into the model\u0027s {@code Food} object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted food."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public Food toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        final List\u003cTag\u003e foodTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            foodTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Name\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        if (!Food.isValidPrice(price)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            throw new IllegalValueException(\"Price must be a double and non-negative.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(foodTags);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        return new Food(name, price, modelTags);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 73,
      "Ebolaeater": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedOrderItem.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static seedu.address.storage.JsonAdaptedFood.INVALID_PRICE_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "import seedu.address.model.order.OrderItem;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": " * Jackson-friendly version of {@link seedu.address.model.order.OrderItem}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "class JsonAdaptedOrderItem {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"OrderItem\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    private final double price;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    private final int quantity;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public JsonAdaptedOrderItem(@JsonProperty(\"name\") String name, @JsonProperty(\"price\") double price,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "                           @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "                                @JsonProperty(\"quantity\") int quantity) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     * Converts a given {@code OrderItem} into this class for Jackson use."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public JsonAdaptedOrderItem(OrderItem source) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        name \u003d source.getName();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        price \u003d source.getPrice();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        quantity \u003d source.getQuantity();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     * Converts this Jackson-friendly adapted orderItem object into the model\u0027s {@code OrderItem} object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted orderItem."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public OrderItem toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Name\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        if (!OrderItem.isValidPrice(price)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            throw new IllegalValueException(INVALID_PRICE_FORMAT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        if (!OrderItem.isValidQuantity(quantity)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "            throw new IllegalValueException(\"Quantity must be positive.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        return new OrderItem(name, price, modelTags, quantity);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 4,
      "duckmoon99": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedVendor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.model.menu.Menu;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.model.vendor.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.model.vendor.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.model.vendor.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.model.vendor.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.model.vendor.Vendor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MorningLit"
        },
        "content": " * Jackson-friendly version of {@link Vendor}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "class JsonAdaptedVendor {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Vendor\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    private List\u003cJsonAdaptedFood\u003e menu \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * Constructs a {@code JsonAdaptedVendor} with the given vendor details."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public JsonAdaptedVendor(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged, @JsonProperty(\"menu\") List\u003cJsonAdaptedFood\u003e foodList) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        if (foodList !\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            this.menu.addAll(foodList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * Converts a given {@code Vendor} into this class for Jackson use."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public JsonAdaptedVendor(Vendor source) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        menu.addAll(source.getMenu().getFoods());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        //TODO add a value in menu"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * Converts this Jackson-friendly adapted vendor object into the model\u0027s {@code Vendor} object."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted vendor."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public Vendor toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        final List\u003cTag\u003e vendorTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            vendorTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        final Menu vendorMenu \u003d new Menu();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        for (JsonAdaptedFood food : menu) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            vendorMenu.add(food.toModelType());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        if (menu \u003d\u003d null || menu.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            // todo change error message"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            throw new IllegalValueException(\"Menu must not be empty.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(vendorTags);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        //TODO: check the menu"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return new Vendor(modelName, modelPhone, modelEmail, modelAddress, modelTags, vendorMenu);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 2,
      "MorningLit": 30,
      "Ebolaeater": 5,
      "-": 90
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonMenuManagerStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.model.menu.ReadOnlyMenuManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": " * A class to access MenuManager data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "public class JsonMenuManagerStorage implements MenuManagerStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonMenuManagerStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public JsonMenuManagerStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public Path getMenuManagerFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public Optional\u003cReadOnlyMenuManager\u003e readMenuManager() throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        return readMenuManager(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Similar to {@link #readMenuManager()}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public Optional\u003cReadOnlyMenuManager\u003e readMenuManager(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        Optional\u003cJsonSerializableMenuManager\u003e jsonMenuManager \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                filePath, JsonSerializableMenuManager.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        if (!jsonMenuManager.isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            return Optional.of(jsonMenuManager.get().toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void saveMenuManager(ReadOnlyMenuManager menuManager) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        saveMenuManager(menuManager, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Similar to {@link #saveMenuManager(ReadOnlyMenuManager)}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void saveMenuManager(ReadOnlyMenuManager menuManager, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        requireNonNull(menuManager);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableMenuManager(menuManager), filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonOrderManagerStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import seedu.address.model.order.ReadOnlyOrderManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "public class JsonOrderManagerStorage implements OrderManagerStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonOrderManagerStorage.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public JsonOrderManagerStorage(Path filePath) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public Path getOrderManagerFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public Optional\u003cReadOnlyOrderManager\u003e readOrderManager() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        return readOrderManager(filePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     * Similar to {@link #readOrderManager()}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public Optional\u003cReadOnlyOrderManager\u003e readOrderManager(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        Optional\u003cJsonSerializableOrderManager\u003e jsonOrderManager \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "                filePath, JsonSerializableOrderManager.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        if (!jsonOrderManager.isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "            return Optional.of(jsonOrderManager.get().toModelType());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public void saveOrderManager(ReadOnlyOrderManager orderManager) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        saveOrderManager(orderManager, filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     * Similar to {@link #saveOrderManager(ReadOnlyOrderManager)}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public void saveOrderManager(ReadOnlyOrderManager orderManager, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        requireNonNull(orderManager);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableOrderManager(orderManager), filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrewChan": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.model.vendor.Vendor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_VENDOR \u003d \"Vendors list contains duplicate vendor(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    private final List\u003cJsonAdaptedVendor\u003e vendors \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given vendors."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"vendors\") List\u003cJsonAdaptedVendor\u003e vendors) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        this.vendors.addAll(vendors);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        vendors.addAll(source.getVendorList().stream().map(JsonAdaptedVendor::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        for (JsonAdaptedVendor jsonAdaptedVendor : vendors) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            Vendor vendor \u003d jsonAdaptedVendor.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            if (addressBook.hasVendor(vendor)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_VENDOR);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            addressBook.addVendor(vendor);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 12,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableMenuManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.model.food.Food;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.model.menu.MenuManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.model.menu.ReadOnlyMenuManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": " * An Immutable MenuManager that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "@JsonRootName(value \u003d \"menuManager\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "class JsonSerializableMenuManager {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FOOD \u003d \"Menu contains duplicate foods.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    private final List\u003cJsonAdaptedFood\u003e foods \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Constructs a {@code JsonSerializableMenuManager} with the given foods."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public JsonSerializableMenuManager(@JsonProperty(\"foods\") List\u003cJsonAdaptedFood\u003e foods) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        this.foods.addAll(foods);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Converts a given {@code ReadOnlyMenuManager} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableMenuManager}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public JsonSerializableMenuManager(ReadOnlyMenuManager source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        foods.addAll(source.getFoodList().stream().map(JsonAdaptedFood::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Converts this address book into the model\u0027s {@code MenuManager} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public MenuManager toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        MenuManager menuManager \u003d new MenuManager();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        for (JsonAdaptedFood jsonAdaptedFood : foods) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            Food food \u003d jsonAdaptedFood.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            if (menuManager.hasFood(food)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_FOOD);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            menuManager.addFood(food);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        return menuManager;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableOrderManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import seedu.address.model.order.OrderItem;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import seedu.address.model.order.OrderManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import seedu.address.model.order.ReadOnlyOrderManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": " * An Immutable OrderManager that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "@JsonRootName(value \u003d \"orderManager\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "public class JsonSerializableOrderManager {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ORDERITEM \u003d \"Order contains duplicate orderItems.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    private final List\u003cJsonAdaptedOrderItem\u003e orderItems \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     * Constructs a {@code JsonSerializableOrderManager} with the given orderItems."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public JsonSerializableOrderManager(@JsonProperty(\"orderItems\") List\u003cJsonAdaptedOrderItem\u003e orderItems) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        this.orderItems.addAll(orderItems);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     * Converts a given {@code ReadOnlyOrderManager} into this class for Jackson use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableOrderManager}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public JsonSerializableOrderManager(ReadOnlyOrderManager source) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        orderItems.addAll("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "                source.getOrderItemList()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "                        .stream()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "                        .map(JsonAdaptedOrderItem::new)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "                        .collect(Collectors.toList())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        );"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     * Converts this address book into the model\u0027s {@code OrderManager} object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public OrderManager toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        OrderManager orderManager \u003d new OrderManager();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        for (JsonAdaptedOrderItem jsonAdaptedOrderItem : orderItems) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "            OrderItem orderItem \u003d jsonAdaptedOrderItem.toModelType();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "            if (orderManager.hasOrderItem(orderItem)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ORDERITEM);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "            orderManager.addOrderItem(orderItem);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        return orderManager;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrewChan": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/MenuManagerStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.model.menu.ReadOnlyMenuManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": " * Represents a storage for {@link seedu.address.model.menu.MenuManager}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "public interface MenuManagerStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    Path getMenuManagerFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Returns MenuManager data as a {@link ReadOnlyMenuManager}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    Optional\u003cReadOnlyMenuManager\u003e readMenuManager() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * @see #getMenuManagerFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    Optional\u003cReadOnlyMenuManager\u003e readMenuManager(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Saves the given {@link ReadOnlyMenuManager} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * @param menuManager cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    void saveMenuManager(ReadOnlyMenuManager menuManager) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * @see #saveMenuManager(ReadOnlyMenuManager)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    void saveMenuManager(ReadOnlyMenuManager menuManager, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/OrderItemStorageStub.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "import seedu.address.model.order.OrderItem;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "import seedu.address.model.order.OrderManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "import seedu.address.model.order.ReadOnlyOrderManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "public class OrderItemStorageStub {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public static final OrderItem EGG_PRATA \u003d new OrderItem(\"Egg Prata\", 1.20, new HashSet\u003c\u003e(), 2);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public static final OrderItem CHEESE_PRATA \u003d new OrderItem(\"Cheese Prata\", 1, new HashSet\u003c\u003e(), 3);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public static final OrderItem MILO \u003d new OrderItem(\"Milo\", 1.5, new HashSet\u003c\u003e(), 1);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     * Generates a ReadOnlyOrderManager wrapped in Optional class"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public Optional\u003cReadOnlyOrderManager\u003e readOrderManager() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        OrderManager orderManager \u003d new OrderManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        orderManager.addOrderItem(EGG_PRATA);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        orderManager.addOrderItem(CHEESE_PRATA);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        orderManager.addOrderItem(MILO);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        return Optional.of(orderManager);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duckmoon99": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/OrderManagerStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import seedu.address.model.order.ReadOnlyOrderManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "public interface OrderManagerStorage {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    Path getOrderManagerFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     * Returns OrderManager data as a {@link ReadOnlyOrderManager}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    Optional\u003cReadOnlyOrderManager\u003e readOrderManager() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     * @see #getOrderManagerFilePath()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    Optional\u003cReadOnlyOrderManager\u003e readOrderManager(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     * Saves the given {@link ReadOnlyOrderManager} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     * @param orderManager cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    void saveOrderManager(ReadOnlyOrderManager orderManager) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     * @see #saveOrderManager(ReadOnlyOrderManager)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    void saveOrderManager(ReadOnlyOrderManager orderManager, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrewChan": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Storage extends AddressBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    //    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    //    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ebolaeater": 2,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/FoodCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.model.food.Food;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": " * An UI component that displays information of a {@code Food}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "public class FoodCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    private static final String FXML \u003d \"FoodListCard.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public final Food food;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    private Label price;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Creates a {@code FoodCode} with the given {@code Food} and index to display."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public FoodCard(Food food, int displayedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        this.food \u003d food;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        name.setText(food.getName());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        price.setText(food.getPriceString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        food.getTags().stream()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        if (!(other instanceof FoodCard)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        FoodCard card \u003d (FoodCard) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                \u0026\u0026 food.equals(card.food);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/FoodListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.model.food.Food;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": " * Panel containing the list of foods."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "public class FoodListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    private static final String FXML \u003d \"FoodListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(FoodListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    private ListView\u003cFood\u003e foodListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Creates a {@code FoodListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public FoodListPanel(ObservableList\u003cFood\u003e foodList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        foodListView.setItems(foodList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        foodListView.setCellFactory(listView -\u003e new FoodListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Food} using a {@code FoodCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    class FoodListViewCell extends ListCell\u003cFood\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        protected void updateItem(Food food, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            super.updateItem(food, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            if (empty || food \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                setGraphic(new FoodCard(food, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay2021s1-cs2103-t16-1.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ebolaeater": 1,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    private VendorListPanel vendorListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    private FoodListPanel foodListPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    private OrderItemListPanel orderItemListPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    private StackPane vendorListPanelPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    private StackPane foodListPanelPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    private StackPane orderItemListPanelPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    private VBox vendorBox;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    private VBox menuBox;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        foodListPanel \u003d new FoodListPanel(logic.getFilteredFoodList());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        foodListPanelPlaceholder.getChildren().add(foodListPanel.getRoot());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        setFoodListDisplay(false);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        vendorListPanel \u003d new VendorListPanel(logic.getObservableVendorList());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        vendorListPanelPlaceholder.getChildren().add(vendorListPanel.getRoot());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        orderItemListPanel \u003d new OrderItemListPanel(logic.getFilteredOrderItemList());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        orderItemListPanelPlaceholder.getChildren().add(orderItemListPanel.getRoot());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * Sets visibility of vendor list display based on the boolean provided."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    void setVendorListDisplay(boolean bool) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        vendorBox.visibleProperty().setValue(bool);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        vendorBox.managedProperty().setValue(bool);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Sets visibility of food list display based on the boolean provided."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    void setFoodListDisplay(boolean bool) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        menuBox.visibleProperty().setValue(bool);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        menuBox.managedProperty().setValue(bool);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    void setOrderItemListDisplay(boolean bool) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        orderItemListPanel.getRoot().setVisible(bool);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        orderItemListPanel.getRoot().setManaged(bool);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Displays menu if vendor has been selected, otherwise display vendor list."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    void displayMenu() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        boolean bool \u003d logic.isSelected();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        setVendorListDisplay(!bool);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        setFoodListDisplay(bool);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        setOrderItemListDisplay(true);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Updates the UI to display the menu of the selected vendor."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void handleVendor() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        foodListPanel \u003d new FoodListPanel(logic.getFilteredFoodList());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        foodListPanelPlaceholder.getChildren().add(foodListPanel.getRoot());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        displayMenu();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public VendorListPanel getVendorListPanel() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return vendorListPanel;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            if (commandResult.isVendor()) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                handleVendor();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 49,
      "MorningLit": 7,
      "duckmoon99": 7,
      "Ebolaeater": 4,
      "-": 193,
      "KendrewChan": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/OrderItemCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import seedu.address.model.order.OrderItem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": " * An UI component that displays information of a {@code Food}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "public class OrderItemCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    private static final String FXML \u003d \"OrderItemListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public final OrderItem orderItem;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    private Label price;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    private Label quantity;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     * Creates a {@code FoodCode} with the given {@code Food} and index to display."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public OrderItemCard(OrderItem orderItem, int displayedIndex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        this.orderItem \u003d orderItem;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        name.setText(orderItem.getName());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        price.setText(orderItem.getPriceString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        quantity.setText(\"x \" + Integer.toString(orderItem.getQuantity()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        orderItem.getTags().stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        if (!(other instanceof OrderItemCard)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        OrderItemCard card \u003d (OrderItemCard) other;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "                \u0026\u0026 orderItem.equals(card.orderItem);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duckmoon99": 6,
      "KendrewChan": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/OrderItemListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import seedu.address.model.order.OrderItem;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": " * Panel containing the list of OrderItem."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "public class OrderItemListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    private static final String FXML \u003d \"OrderItemListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(OrderItemListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    private ListView\u003cOrderItem\u003e orderItemListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     * Creates a {@code OrderListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    public OrderItemListPanel(ObservableList\u003cOrderItem\u003e orderList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        orderItemListView.setItems(orderList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        orderItemListView.setCellFactory(listView -\u003e new OrderItemListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code OrderItem} using a {@code OrderCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    class OrderItemListViewCell extends ListCell\u003cOrderItem\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        protected void updateItem(OrderItem orderItem, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "            super.updateItem(orderItem, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "            if (empty || orderItem \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "                setGraphic(new OrderItemCard(orderItem, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duckmoon99": 9,
      "KendrewChan": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/VendorCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.model.vendor.Vendor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MorningLit"
        },
        "content": " * An UI component that displays information of a {@code Vendor}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "public class VendorCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    private static final String FXML \u003d \"VendorListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public final Vendor vendor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * Creates a {@code PersonCode} with the given {@code Vendor} and index to display."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public VendorCard(Vendor vendor, int displayedIndex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        this.vendor \u003d vendor;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        name.setText(vendor.getName().fullName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        phone.setText(vendor.getPhone().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        address.setText(vendor.getAddress().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        email.setText(vendor.getEmail().value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        vendor.getTags().stream()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        if (!(other instanceof VendorCard)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        VendorCard card \u003d (VendorCard) other;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                \u0026\u0026 vendor.equals(card.vendor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 16,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/VendorListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.model.vendor.Vendor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MorningLit"
        },
        "content": " * Panel containing the list of vendors."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MorningLit"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "public class VendorListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    private static final String FXML \u003d \"VendorListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(VendorListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    private ListView\u003cVendor\u003e vendorListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * Creates a {@code VendorListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public VendorListPanel(ObservableList\u003cVendor\u003e vendorList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        vendorListView.setItems(vendorList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        vendorListView.setCellFactory(listView -\u003e new VendorListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Vendor} using a {@code VendorCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    class VendorListViewCell extends ListCell\u003cVendor\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        protected void updateItem(Vendor vendor, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            super.updateItem(vendor, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            if (empty || vendor \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                setGraphic(new VendorCard(vendor, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 49
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "#filterField, #vendorListPanel, #vendorWebpage {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 1,
      "-": 351
    }
  },
  {
    "path": "src/main/resources/view/FoodListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        \u003cLabel fx:id\u003d\"price\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$price\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 34
    }
  },
  {
    "path": "src/main/resources/view/FoodListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "  \u003cListView fx:id\u003d\"foodListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "\u003c?import java.net.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "\u003c?import javafx.geometry.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "\u003c?import javafx.scene.image.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "\u003c?import javafx.stage.*?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "\u003cfx:root minHeight\u003d\"600.0\" minWidth\u003d\"900.0\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Address App\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    \u003cScene fill\u003d\"BLACK\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "      \u003cVBox style\u003d\"-fx-background-color: BLACK;\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" minWidth\u003d\"-Infinity\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"SOMETIMES\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        \u003cHBox maxWidth\u003d\"1.7976931348623157E308\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "          \u003cchildren\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            \u003cVBox fx:id\u003d\"vendorBox\" minWidth\u003d\"-Infinity\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"SOMETIMES\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "                \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "              \u003cchildren\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "                \u003cLabel style\u003d\"-fx-text-fill: WHITE;\" text\u003d\"Vendors\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "                \u003cStackPane fx:id\u003d\"vendorListPanelPlaceholder\" minWidth\u003d\"-Infinity\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "              \u003c/children\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            \u003cVBox fx:id\u003d\"menuBox\" minWidth\u003d\"-Infinity\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"SOMETIMES\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "                \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "              \u003cLabel style\u003d\"-fx-text-fill: WHITE;\" text\u003d\"Menu\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "              \u003cStackPane fx:id\u003d\"foodListPanelPlaceholder\" minWidth\u003d\"-Infinity\" prefWidth\u003d\"200.0\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "            \u003cVBox fx:id\u003d\"orderItemList\" minWidth\u003d\"-Infinity\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"SOMETIMES\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "                \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "              \u003cLabel style\u003d\"-fx-text-fill: WHITE;\" text\u003d\"Order\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "              \u003cStackPane fx:id\u003d\"orderItemListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "          \u003c/children\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" minWidth\u003d\"-Infinity\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" minWidth\u003d\"-Infinity\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 6,
      "duckmoon99": 37,
      "-": 35
    }
  },
  {
    "path": "src/main/resources/view/OrderItemListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "\u003c?import javafx.geometry.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "                \u003cLabel fx:id\u003d\"price\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$price\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "                \u003cLabel fx:id\u003d\"quantity\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$quantity\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "duckmoon99": 11,
      "KendrewChan": 22
    }
  },
  {
    "path": "src/main/resources/view/OrderItemListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    \u003cListView fx:id\u003d\"orderItemListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "duckmoon99": 1,
      "KendrewChan": 7
    }
  },
  {
    "path": "src/main/resources/view/VendorListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "  \u003cListView fx:id\u003d\"vendorListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 1,
      "-": 7
    }
  },
  {
    "path": "src/test/data/JsonAddressBookStorageTest/invalidAndValidVendorAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    \"name\": \"Valid Vendor\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    \"name\": \"Vendor With Invalid Phone Field\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"948asdf2424\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 2,
      "-": 11
    }
  },
  {
    "path": "src/test/data/JsonAddressBookStorageTest/invalidVendorAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    \"name\": \"Vendor with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 1,
      "-": 7
    }
  },
  {
    "path": "src/test/data/JsonMenuManagerStorageTest/invalidMenuManager.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "  \"foods\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"name\" : \"Prata\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"price\": 1,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"tagged\" : [\"classic\"]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "  },"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"name\" : \"Prata\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"price\": 1,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"tagged\" : [\"classic\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ebolaeater": 12
    }
  },
  {
    "path": "src/test/data/JsonMenuManagerStorageTest/typicalMenuManager.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "  \"foods\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"name\" : \"Prata\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"price\": 1,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"tagged\" : []"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "  },"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"name\" : \"Milo\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"price\": 1.5,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"tagged\" : []"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"name\": \"Nasi Goreng\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"price\": 4.5,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"tagged\": []"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ebolaeater": 17
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/duplicateVendorAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "  \"vendors\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"94351253\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"alice@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"tagged\": [ \"friends\" ],"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"menu\" : [ {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"name\" : \"Prata\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"price\" : 1.0,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"tagged\" : [ \"classic\" ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"name\" : \"Milo\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"price\" : 1.5,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"tagged\" : [ \"Iced\" ]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"name\" : \"Nuggets\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"price\" : 3.2,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"tagged\" : [ \"six\" ]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"94351253\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"pauline@example.com\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"address\": \"4th street\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"tagged\": [],"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"menu\" : [ {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"name\" : \"Prata\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"price\" : 1.0,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"tagged\" : [ \"classic\" ]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"name\" : \"Milo\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"price\" : 1.5,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"tagged\" : [ \"Iced\" ]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"name\" : \"Nuggets\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"price\" : 3.2,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"tagged\" : [ \"six\" ]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ebolaeater": 30,
      "-": 11
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/invalidVendorAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "  \"vendors\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Hans Muster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"invalid@email!3e\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ebolaeater": 1,
      "-": 7
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/storageAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "  \"vendors\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"name\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"phone\" : \"94351253\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"email\" : \"alice@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"address\" : \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"tagged\" : [ \"friends\" ],"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"menu\" : [ {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"name\" : \"Prata\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"price\" : 1.0,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"tagged\" : [ \"classic\" ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"name\" : \"Milo\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"price\" : 1.5,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"tagged\" : [ \"Iced\" ]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"name\" : \"Nuggets\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"price\" : 3.2,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"tagged\" : [ \"six\" ]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"name\" : \"Benson Meier\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"phone\" : \"98765432\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"email\" : \"johnd@example.com\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"address\" : \"311, Clementi Ave 2, #02-25\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"tagged\" : [ \"owesMoney\", \"friends\" ],"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"menu\" : [ {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"name\" : \"Prata\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"price\" : 1.0,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"tagged\" : [ \"classic\" ]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"name\" : \"Milo\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"price\" : 1.5,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"tagged\" : [ \"Iced\" ]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"name\" : \"Nuggets\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"price\" : 3.2,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"tagged\" : [ \"six\" ]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"name\" : \"Carl Kurz\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"phone\" : \"95352563\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"email\" : \"heinz@example.com\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"address\" : \"wall street\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"menu\" : [ {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"name\" : \"Prata\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"price\" : 1.0,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"tagged\" : [ \"classic\" ]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"name\" : \"Milo\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"price\" : 1.5,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"tagged\" : [ \"Iced\" ]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"name\" : \"Nuggets\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"price\" : 3.2,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"tagged\" : [ \"six\" ]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"name\" : \"Daniel Meier\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"phone\" : \"87652533\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"email\" : \"cornelia@example.com\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"address\" : \"10th street\","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"tagged\" : [ \"friends\" ],"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"menu\" : [ {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"name\" : \"Prata\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"price\" : 1.0,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"tagged\" : [ \"classic\" ]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"name\" : \"Milo\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"price\" : 1.5,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"tagged\" : [ \"Iced\" ]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"name\" : \"Nuggets\","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"price\" : 3.2,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"tagged\" : [ \"six\" ]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"name\" : \"Elle Meyer\","
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"phone\" : \"9482224\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"email\" : \"werner@example.com\","
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"address\" : \"michegan ave\","
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"menu\" : [ {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"name\" : \"Prata\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"price\" : 1.0,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"tagged\" : [ \"classic\" ]"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"name\" : \"Milo\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"price\" : 1.5,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"tagged\" : [ \"Iced\" ]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"name\" : \"Nuggets\","
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"price\" : 3.2,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"tagged\" : [ \"six\" ]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"name\" : \"Fiona Kunz\","
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"phone\" : \"9482427\","
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"email\" : \"lydia@example.com\","
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"address\" : \"little tokyo\","
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"menu\" : [ {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"name\" : \"Prata\","
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"price\" : 1.0,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"tagged\" : [ \"classic\" ]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"name\" : \"Milo\","
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"price\" : 1.5,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"tagged\" : [ \"Iced\" ]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"name\" : \"Nuggets\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"price\" : 3.2,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"tagged\" : [ \"six\" ]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"name\" : \"George Best\","
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"phone\" : \"9482442\","
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"email\" : \"anna@example.com\","
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"address\" : \"4th street\","
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"menu\" : [ {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"name\" : \"Prata\","
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"price\" : 1.0,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"tagged\" : [ \"classic\" ]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"name\" : \"Milo\","
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"price\" : 1.5,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"tagged\" : [ \"Iced\" ]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"name\" : \"Nuggets\","
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"price\" : 3.2,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"tagged\" : [ \"six\" ]"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ebolaeater": 136
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/typicalVendorsAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"94351253\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"alice@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"tagged\" : [ \"friends\" ],"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"menu\" : {\"foods\" : [ {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"name\" : \"Prata\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"price\": 1,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"tagged\" : []"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    },"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        \"name\" : \"Milo\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        \"price\": 1.5,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        \"tagged\" : []"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      },"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        \"name\": \"Nasi Goreng\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        \"price\": 4.5,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        \"tagged\": []"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      }]}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Benson Meier\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"98765432\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"johnd@example.com\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"311, Clementi Ave 2, #02-25\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"tagged\" : [ \"owesMoney\", \"friends\" ],"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"menu\" : {\"foods\" : [ {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"name\" : \"Prata\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"price\": 1,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"tagged\" : []"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    },"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        \"name\" : \"Milo\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        \"price\": 1.5,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        \"tagged\" : []"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      },"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        \"name\": \"Nasi Goreng\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        \"price\": 4.5,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        \"tagged\": []"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      }]}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Carl Kurz\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"95352563\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"heinz@example.com\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"wall street\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"menu\" : {\"foods\" : [ {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"name\" : \"Prata\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"price\": 1,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"tagged\" : []"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    },"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        \"name\" : \"Milo\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        \"price\": 1.5,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        \"tagged\" : []"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      },"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        \"name\": \"Nasi Goreng\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        \"price\": 4.5,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        \"tagged\": []"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      }]}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Daniel Meier\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"87652533\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"cornelia@example.com\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"10th street\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"tagged\" : [ \"friends\" ],"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"menu\" : {\"foods\" : [ {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"name\" : \"Prata\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"price\": 1,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"tagged\" : []"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "  },"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"name\" : \"Milo\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"price\": 1.5,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"tagged\" : []"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    },"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"name\": \"Nasi Goreng\","
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"price\": 4.5,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"tagged\": []"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }]}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Elle Meyer\","
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482224\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"werner@example.com\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"michegan ave\","
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"menu\" : {\"foods\" : [ {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"name\" : \"Prata\","
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"price\": 1,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"tagged\" : []"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    },"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        \"name\" : \"Milo\","
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        \"price\": 1.5,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        \"tagged\" : []"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      },"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        \"name\": \"Nasi Goreng\","
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        \"price\": 4.5,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        \"tagged\": []"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      }]}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Fiona Kunz\","
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482427\","
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"lydia@example.com\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"little tokyo\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"menu\" : {\"foods\" : [ {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"name\" : \"Prata\","
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"price\": 1,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "      \"tagged\" : []"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    },"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        \"name\" : \"Milo\","
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        \"price\": 1.5,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        \"tagged\" : []"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      },"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        \"name\": \"Nasi Goreng\","
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        \"price\": 4.5,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        \"tagged\": []"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      }]}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"George Best\","
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482442\","
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"anna@example.com\","
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"4th street\","
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    \"menu\" : {\"foods\" : [ {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"name\" : \"Prata\","
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"price\": 1,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      \"tagged\" : []"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    },"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        \"name\" : \"Milo\","
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        \"price\": 1.5,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        \"tagged\" : []"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      },"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        \"name\": \"Nasi Goreng\","
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        \"price\": 4.5,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        \"tagged\": []"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "      }]}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ebolaeater": 108,
      "-": 42
    }
  },
  {
    "path": "src/test/data/JsonSerializableMenuManagerTest/duplicateFoods.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "  \"foods\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    \"name\" : \"Prata\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    \"price\": 1,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    \"tagged\" : [\"classic\"]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "  },"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "      \"name\" : \"Prata\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "      \"price\": 1,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "      \"tagged\" : [\"classic\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 12
    }
  },
  {
    "path": "src/test/data/JsonSerializableMenuManagerTest/invalidMenuManager.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "  \"foods\" : ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "      \"name\": \"Prata\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "      \"price\": -1.4,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "      \"tagged\": ["
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        \"classic\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 10
    }
  },
  {
    "path": "src/test/data/JsonSerializableMenuManagerTest/typicalMenuManager.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "  \"foods\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    \"name\" : \"Prata\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    \"price\": 1,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    \"tagged\" : [\"classic\"]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "  },"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "      \"name\" : \"Milo\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "      \"price\": 1.5,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "      \"tagged\" : [\"Iced\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "      \"name\": \"Nasi Goreng\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "      \"price\": 4.5,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "      \"tagged\": [\"Bestseller\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    },"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "      \"name\": \"Nuggets\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "      \"price\": 3.2,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "      \"tagged\": [\"six\"]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    },"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "      \"name\": \"Cheese Prata\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "      \"price\": 1.6,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "      \"tagged\": [\"cheesy\"]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 27
    }
  },
  {
    "path": "src/test/data/JsonSerializableOrderManagerTest/duplicateOrderItems.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "  \"orderItems\" : ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "      \"name\" : \"Prata\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "      \"price\": 1,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "      \"quantity\": 1,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "      \"tagged\" : [\"classic\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "      \"name\" : \"Prata\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "      \"price\": 1,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "      \"quantity\": 1,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "      \"tagged\" : [\"classic\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrewChan": 16
    }
  },
  {
    "path": "src/test/data/JsonSerializableOrderManagerTest/invalidOrderManager.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "  \"orderItems\" : ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "      \"name\": \"Prata\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "      \"price\": -1.4,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "      \"quantity\": 1,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "      \"tagged\": ["
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        \"classic\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrewChan": 12
    }
  },
  {
    "path": "src/test/data/JsonSerializableOrderManagerTest/typicalOrderManager.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "  \"orderItems\" : ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "      \"name\" : \"Prata\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "      \"price\": 1,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "      \"quantity\": 3,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "      \"tagged\" : [\"classic\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "      \"name\" : \"Milo\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "      \"price\": 1.5,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "      \"quantity\": 2,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "      \"tagged\" : [\"Iced\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    },"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "      \"name\": \"Nasi Goreng\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "      \"price\": 4.5,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "      \"quantity\": 1,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "      \"tagged\": [\"Bestseller\"]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    },"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "      \"name\": \"Nuggets\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "      \"price\": 3.2,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "      \"quantity\": 5,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "      \"tagged\": [\"six\"]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    },"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "      \"name\": \"Cheese Prata\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "      \"price\": 1.6,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "      \"quantity\": 2,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "      \"tagged\": [\"cheesy\"]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrewChan": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 2,
      "-": 142
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import static seedu.address.testutil.TypicalVendors.getManagers;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.model.order.OrderManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import seedu.address.testutil.TypicalVendors;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    private AddressBook book;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    private UserPrefs userPrefs;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        this.book \u003d TypicalVendors.getTypicalAddressBook();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        this.userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        this.model \u003d new ModelManager(book, userPrefs, getManagers(), new OrderManager());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        book.selectVendor(0);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        model.selectVendor(0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        String removeCommand \u003d \"remove 9\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertCommandException(removeCommand, ParserUtil.MESSAGE_INVALID_ORDERITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //TODO: pass"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    //                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    //                .resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //        // Execute add command"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //        Vendor expectedVendor \u003d new VendorBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //        expectedModel.addVendor(expectedVendor);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public void getAddressBook_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        assertEquals(this.book, logic.getAddressBook());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public void getFilteredVendorList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getObservableVendorList().remove(0));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public void getFilteredFoodList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredFoodList().remove(0));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public void getFilteredOrderItemList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredOrderItemList().remove(0));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public void isSelected_success() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        model.selectVendor(2);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        assertTrue(logic.isSelected());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public void getAddressBookFilePath_success() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        assertEquals(userPrefs.getAddressBookFilePath(), logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public void getGuiSettings_success() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        assertEquals(model.getGuiSettings(), logic.getGuiSettings());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public void setGuiSettings_success() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        GuiSettings guiSettings \u003d model.getGuiSettings();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        assertEquals(guiSettings, logic.getGuiSettings());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 1,
      "MorningLit": 21,
      "Ebolaeater": 6,
      "-": 129,
      "KendrewChan": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.model.food.Food;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import seedu.address.model.order.OrderItem;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.testutil.TypicalModel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void constructor_nullVendor_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public void execute_validIndex_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        Model model \u003d TypicalModel.getModelManagerWithMenu();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        Index index \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(index);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        ObservableList\u003cFood\u003e menu \u003d model.getFilteredFoodList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        Food firstItem \u003d menu.get(0);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        OrderItem addedItem \u003d new OrderItem(firstItem, 1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        Model expectedModel \u003d TypicalModel.getModelManagerWithMenu();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        expectedModel.addOrderItem(addedItem);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        String expectedMessage \u003d String.format(AddCommand.MESSAGE_ADD_SUCCESS, addedItem);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assertCommandSuccess(addCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public void execute_validQuantity_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        Model model \u003d TypicalModel.getModelManagerWithMenu();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        Index first \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        int quantity \u003d 3;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(first, quantity);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        ObservableList\u003cFood\u003e menu \u003d model.getFilteredFoodList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        Food secondItem \u003d menu.get(1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        OrderItem addedItem \u003d new OrderItem(secondItem, 3);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        Model expectedModel \u003d TypicalModel.getModelManagerWithMenu();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        expectedModel.addOrderItem(addedItem);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        String expectedMessage \u003d String.format(AddCommand.MESSAGE_ADD_SUCCESS, addedItem);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assertCommandSuccess(addCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public void execute_invalidIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        Model model \u003d TypicalModel.getModelManagerWithMenu();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "duckmoon99"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        ObservableList\u003cFood\u003e menu \u003d model.getFilteredFoodList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(menu.size() + 1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assertCommandFailure(addCommand, model, ParserUtil.MESSAGE_INVALID_ORDERITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        AddCommand addCommand1 \u003d new AddCommand(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        AddCommand addCommand2 \u003d new AddCommand(Index.fromOneBased(3));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assertTrue(addCommand1.equals(addCommand1));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        AddCommand addCommandCopy \u003d new AddCommand(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assertTrue(addCommandCopy.equals(addCommand1));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assertFalse(addCommand1.equals(1));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assertFalse(addCommand1.equals(null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        // different vendor -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assertFalse(addCommand1.equals(addCommand2));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 3,
      "MorningLit": 43,
      "Ebolaeater": 2,
      "duckmoon99": 4,
      "-": 42,
      "KendrewChan": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import static seedu.address.testutil.TypicalVendors.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.model.food.Food;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.model.order.OrderItem;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.model.order.OrderManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.testutil.TypicalVendors;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    private void setOrderManager(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        OrderItem item1 \u003d new OrderItem(new Food(\"Prata\", 1, new HashSet\u003c\u003e()), 1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        OrderItem item2 \u003d new OrderItem(new Food(\"Milo\", 1.50, new HashSet\u003c\u003e()), 2);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        OrderItem item3 \u003d new OrderItem(new Food(\"Cheese Prata\", 2, new HashSet\u003c\u003e()), 3);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        model.addOrderItem(item1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        model.addOrderItem(item2);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        model.addOrderItem(item3);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    private Model initialiseModel() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), TypicalVendors.getManagers(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                new OrderManager());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        model.selectVendor(0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        return model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void clear_emptyOrder_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        Model model \u003d initialiseModel();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        Model expectedModel \u003d initialiseModel();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        OrderItem orderItem \u003d new OrderItem(new Food(\"Prata\", 1, new HashSet\u003c\u003e()), 1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        model.addOrderItem(orderItem);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        model.clearOrder();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_EMPTY_ORDER, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void clear_nonEmptyOrder_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        Model model \u003d initialiseModel();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        setOrderManager(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        Model expectedModel \u003d initialiseModel();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        expectedModel.setOrderManager(new OrderManager());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 11,
      "MorningLit": 2,
      "Ebolaeater": 22,
      "-": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                false)));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                false, false)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                false, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                false, true).hashCode());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 8,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.model.vendor.Vendor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * - the address book, filtered vendor list and selected vendor in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        List\u003cVendor\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getObservableVendorList());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getObservableVendorList());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //     * Updates {@code model}\u0027s filtered list to show only the vendor at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //    public static void showVendorAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredVendorList().size());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //        Vendor vendor \u003d model.getFilteredVendorList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //        final String[] splitName \u003d vendor.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //        model.updateFilteredVendorList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //        assertEquals(1, model.getFilteredVendorList().size());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 17,
      "-": 94
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                true, false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 2,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import static seedu.address.testutil.TypicalVendors.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.model.vendor.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        // different vendor -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //        @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    //        public void execute_unknownKeyword_noFoodFound() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    //            NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"*\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //            FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    //            expectedModel.setVendorIndex(1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    ////            expectedModel.updateFilteredFoodList(predicate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    //            //            Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    //            String expectedMessage \u003d \"0 food listed!\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //            assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    ////            assertEquals(expectedModel.getMenuManager(1), Collections.EMPTY_LIST);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //    public void execute_multipleKeywords_multipleVendorsFound() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //        String expectedMessage \u003d String.format(MESSAGE_VENDORS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //        expectedModel.updateFilteredFoodList(predicate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredVendorList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 17,
      "Ebolaeater": 7,
      "-": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FoodCommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.model.food.Food;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.model.food.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "public class FoodCommandTestUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public static final double VALID_PRICE_MILO \u003d 1.50;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public static final String VALID_NAME_PRATA \u003d \"Prata\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public static final String VALID_NAME_MILO \u003d \"Milo\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    //    public static final String VALID_PRICE_PRATA \u003d \"$1.00\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    //    public static final String VALID_PRICE_STRING_MILO \u003d \"$1.50\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public static final String VALID_TAG_CLASSIC \u003d \"classic\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public static final String VALID_TAG_ICED \u003d \"ICED\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    //    public static final String NAME_DESC_PRATA \u003d \" \" + PREFIX_NAME + VALID_NAME_PRATA;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    //    public static final String NAME_DESC_MILO \u003d \" \" + PREFIX_NAME + VALID_NAME_MILO;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    //    public static final String TAG_DESC_CLASSIC\u003d \" \" + PREFIX_TAG + VALID_TAG_CLASSIC;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    //    public static final String TAG_DESC_ICED \u003d \" \" + PREFIX_TAG + VALID_TAG_ICED;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    //"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    //    public static final String INVALID_PRICE_DESC \u003d \" \" + PREFIX_PRICE + \"-$0.30\"; //negative price is not allowed"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    //    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"milo*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    //"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    //    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    //    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    //    public static final EditCommand.EditFoodDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    //    public static final EditCommand.EditFoodDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    //    static {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    //        DESC_AMY \u003d new EditFoodDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    //                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    //                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    //        DESC_BOB \u003d new EditFoodDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    //                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    //                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * - the address book, filtered food list and selected food in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        //check first filtered food list"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        List\u003cFood\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredFoodList());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredFoodList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the food at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public static void showFoodAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredFoodList().size());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        Food food \u003d model.getFilteredFoodList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        final String[] splitName \u003d food.getName().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        model.updateFilteredFoodList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assertEquals(1, model.getFilteredFoodList().size());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 106,
      "MorningLit": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                false, false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 2,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/OrderItemCommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "public class OrderItemCommandTestUtil {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrewChan": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/PriceCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import static seedu.address.testutil.TypicalVendors.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.logic.commands.enums.Inequality;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.model.food.Food;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.model.food.PriceWithinRangePredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.model.menu.MenuManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.model.order.OrderManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.testutil.TypicalVendors;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "public class PriceCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    private List\u003cMenuManager\u003e menuManagers \u003d TypicalVendors.getManagers();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    private Model initialiseModel() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), menuManagers, new OrderManager());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        model.selectVendor(0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        return model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void execute_validInequalityAndPrice_success() throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        Model model \u003d initialiseModel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        Inequality inequality \u003d ParserUtil.parseInequality(\"\u003c\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        PriceWithinRangePredicate predicate \u003d new PriceWithinRangePredicate(inequality, 2.2);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        PriceCommand priceCommand \u003d new PriceCommand(predicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        List\u003cFood\u003e list \u003d model.getFilteredFoodList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        //List\u003cFood\u003e filteredList \u003d list.stream().filter(x -\u003e x.getPrice() \u003c 2.2).collect(Collectors.toList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), menuManagers,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                new OrderManager());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        expectedModel.selectVendor(0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_FOOD_LISTED_PRICE_CONTEXT,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "               2 , predicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertCommandSuccess(priceCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ebolaeater": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RemoveCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import static seedu.address.testutil.TypicalOrderItems.NUGGETS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import static seedu.address.testutil.TypicalVendors.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.model.order.OrderItem;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.model.order.OrderManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.testutil.OrderItemBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.testutil.TypicalVendors;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": " * {@code RemoveCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "public class RemoveCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    private Model initialiseModel() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), TypicalVendors.getManagers(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                new OrderManager());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        model.selectVendor(0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        model.addOrderItem(NUGGETS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public void execute_validIndex_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        Model model \u003d initialiseModel();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        Index first \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        RemoveCommand removeCommand \u003d new RemoveCommand(first);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        List\u003cOrderItem\u003e lastShownList \u003d model.getObservableOrderItemList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        OrderItem orderItemToRemove \u003d lastShownList.get(first.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        String expectedMessage \u003d String.format(RemoveCommand.MESSAGE_REMOVE_ORDERITEM_SUCCESS, orderItemToRemove);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), TypicalVendors.getManagers(),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                new OrderManager());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        expectedModel.selectVendor(0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertCommandSuccess(removeCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public void execute_validQuantity_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        Model model \u003d initialiseModel();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        Index first \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        RemoveCommand removeCommand \u003d new RemoveCommand(first, 1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        OrderItem itemRemoved \u003d new OrderItemBuilder(NUGGETS).withQuantity(1).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        OrderItem remainingItems \u003d new OrderItemBuilder(NUGGETS).withQuantity(4).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), TypicalVendors.getManagers(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                new OrderManager());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        expectedModel.selectVendor(0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        expectedModel.addOrderItem(remainingItems);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        String expectedMessage \u003d String.format(RemoveCommand.MESSAGE_REMOVE_ORDERITEM_SUCCESS, itemRemoved);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertCommandSuccess(removeCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public void execute_invalidIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        Model model \u003d initialiseModel();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getObservableVendorList().size() + 1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        RemoveCommand removeCommand \u003d new RemoveCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertCommandFailure(removeCommand, model, ParserUtil.MESSAGE_INVALID_ORDERITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        RemoveCommand removeFirstCommand \u003d new RemoveCommand(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        RemoveCommand removeSecondCommand \u003d new RemoveCommand(Index.fromOneBased(2));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertTrue(removeFirstCommand.equals(removeFirstCommand));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        RemoveCommand removeFirstCommandCopy \u003d new RemoveCommand(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertTrue(removeFirstCommand.equals(removeFirstCommandCopy));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertFalse(removeFirstCommand.equals(1));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertFalse(removeFirstCommand.equals(null));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        // different vendor -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertFalse(removeFirstCommand.equals(removeSecondCommand));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 3,
      "MorningLit": 30,
      "Ebolaeater": 25,
      "-": 45,
      "KendrewChan": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SubmitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.model.food.Food;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.model.order.OrderItem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.testutil.TypicalModel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "public class SubmitCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public void execute_submit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        Model model \u003d TypicalModel.getModelManagerWithMenu();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        Model expectedModel \u003d TypicalModel.getModelManagerWithMenu();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        ObservableList\u003cFood\u003e menu \u003d model.getFilteredFoodList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        StringBuilder expectedMessage \u003d new StringBuilder();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        double calculatedTotal \u003d 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        for (int i \u003d 0; i \u003c 5; i++) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            OrderItem orderItem \u003d new OrderItem(menu.get(i), i + 6);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            expectedMessage.append(String.format(\"%s x %d\\n\", orderItem.getName(), i + 6));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            calculatedTotal +\u003d orderItem.getPrice() * (i + 6);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            model.addOrderItem(orderItem);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            expectedModel.addOrderItem(orderItem);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        expectedMessage.append(String.format(\"Estimated total: $%.2f\", calculatedTotal));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assertCommandSuccess(new SubmitCommand(), model, expectedMessage.toString(), expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/TotalCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import static seedu.address.logic.commands.TotalCommand.MESSAGE_RESULT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.model.food.Food;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.model.order.OrderItem;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.testutil.TypicalModel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "public class TotalCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public void execute_orderTotal_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        Model model \u003d TypicalModel.getModelManagerWithMenu();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        Model expectedModel \u003d TypicalModel.getModelManagerWithMenu();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        ObservableList\u003cFood\u003e menu \u003d model.getFilteredFoodList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        double calculatedTotal \u003d 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        for (int i \u003d 0; i \u003c 5; i++) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            OrderItem orderItem \u003d new OrderItem(menu.get(i), i + 6);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            calculatedTotal +\u003d orderItem.getPrice() * (i + 6);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            model.addOrderItem(orderItem);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            expectedModel.addOrderItem(orderItem);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_RESULT, calculatedTotal);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assertCommandSuccess(new TotalCommand(), model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/VendorCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static seedu.address.logic.commands.VendorCommand.MESSAGE_RESET_VENDOR_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static seedu.address.testutil.TypicalVendors.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.model.order.OrderManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.testutil.TypicalVendors;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": " * {@code VendorCommand}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "public class VendorCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    private Model initialiseModel() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        return new ModelManager(getTypicalAddressBook(), new UserPrefs(), TypicalVendors.getManagers(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                new OrderManager());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void execute_validDefaultIndex_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        Model model \u003d initialiseModel();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        Index first \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        VendorCommand vendorCommand \u003d new SwitchVendorCommand(first);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        Model expectedModel \u003d initialiseModel();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        expectedModel.selectVendor(first.getZeroBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        String expectedMessage \u003d String.format(SwitchVendorCommand.MESSAGE_SELECT_VENDOR_SUCCESS, 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage, false,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                false, true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertCommandSuccess(vendorCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void execute_validIndex_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        Model model \u003d initialiseModel();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        Index third \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        VendorCommand vendorCommand \u003d new SwitchVendorCommand(third);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        Model expectedModel \u003d initialiseModel();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        expectedModel.selectVendor(third.getZeroBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        String expectedMessage \u003d String.format(SwitchVendorCommand.MESSAGE_SELECT_VENDOR_SUCCESS, 3);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage, false,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                false, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertCommandSuccess(vendorCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void execute_invalidIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        Model model \u003d initialiseModel();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getObservableVendorList().size() + 1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        VendorCommand vendorCommand \u003d new SwitchVendorCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertCommandFailure(vendorCommand, model, ParserUtil.MESSAGE_INVALID_VENDOR_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        VendorCommand switchFirstCommand \u003d new SwitchVendorCommand(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        VendorCommand switchSecondCommand \u003d new SwitchVendorCommand(Index.fromOneBased(2));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        VendorCommand firstVendorCommand \u003d new VendorCommand();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        VendorCommand secondVendorCommand \u003d new VendorCommand();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertTrue(switchFirstCommand.equals(switchFirstCommand));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertTrue(firstVendorCommand.equals(firstVendorCommand));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        VendorCommand removeFirstCommandCopy \u003d new SwitchVendorCommand(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertTrue(switchFirstCommand.equals(removeFirstCommandCopy));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertTrue(firstVendorCommand.equals(secondVendorCommand));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertFalse(switchFirstCommand.equals(1));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertFalse(firstVendorCommand.equals(1));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertFalse(switchFirstCommand.equals(null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertFalse(firstVendorCommand.equals(null));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        // different vendor -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertFalse(switchFirstCommand.equals(switchSecondCommand));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void execute_noIndexProvided_success() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        Model model \u003d initialiseModel();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        model.selectVendor(3);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        VendorCommand vendorCommand \u003d new VendorCommand();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        Model expectedModel \u003d initialiseModel();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_RESET_VENDOR_SUCCESS,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                false, false, true);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertCommandSuccess(vendorCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    //     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    //    private void showNoVendor(Model model) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    //        model.updateFilteredVendorList(p -\u003e false);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    //"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    //        assertTrue(model.getFilteredVendorList().isEmpty());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 114,
      "MorningLit": 2,
      "Ebolaeater": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INSUFFICENT_ARGUMENTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_QUANTITY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_TOO_MANY_ARGUMENTS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertParseSuccess(parser, \"1 10\", new AddCommand(Index.fromOneBased(1), 10));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertParseSuccess(parser, \"2 3\", new AddCommand(Index.fromOneBased(2), 3));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertParseSuccess(parser, \"1 1\", new AddCommand(Index.fromOneBased(1), 1));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void parse_optionalFieldMissing_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertParseSuccess(parser, \"2\", new AddCommand(Index.fromOneBased(2), 1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void parse_invalidValues_failure() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        // empty String"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                String.format(MESSAGE_INSUFFICENT_ARGUMENTS, AddCommand.COMMAND_WORD, 1, AddCommand.MESSAGE_USAGE)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        // More than 2 arguments"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertParseFailure(parser, \"1 2 3\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                String.format(MESSAGE_TOO_MANY_ARGUMENTS,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                AddCommand.COMMAND_WORD, 2, AddCommand.MESSAGE_USAGE)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        // Index passed is not a non-zero integer"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertParseFailure(parser, \"1.4\", String.format(MESSAGE_INVALID_INDEX, \"Menu Index\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assertParseFailure(parser, \"0\", String.format(MESSAGE_INVALID_INDEX, \"Menu Index\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assertParseFailure(parser, \"-1\", String.format(MESSAGE_INVALID_INDEX, \"Menu Index\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        // Quantity passed is not a non-zero integer"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertParseFailure(parser, \"1 1.2\", MESSAGE_INVALID_QUANTITY);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assertParseFailure(parser, \"1 0\", MESSAGE_INVALID_QUANTITY);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assertParseFailure(parser, \"1 -1\", MESSAGE_INVALID_QUANTITY);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 25,
      "MorningLit": 4,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_VENDOR;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.logic.commands.RemoveCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.model.vendor.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //TODO: make this pass"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //        Vendor vendor \u003d new VendorBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //        AddCommand command \u003d (AddCommand) parser.parseCommand(VendorUtil.getAddCommand(vendor));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //        assertEquals(new AddCommand(vendor), command);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parseCommand(ClearCommand.COMMAND_WORD + \"1 1 1\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void parseCommand_remove() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        RemoveCommand command \u003d (RemoveCommand) parser.parseCommand("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                RemoveCommand.COMMAND_WORD + \" \" + INDEX_FIRST_VENDOR.getOneBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertEquals(new RemoveCommand(INDEX_FIRST_VENDOR), command);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 9,
      "Ebolaeater": 6,
      "-": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ClearCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "public class ClearCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void parse_extraFields_throwsParseException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        String input \u003d ClearCommand.COMMAND_WORD + \" 1 2 3\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parseCommand(input));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void parse_noFields_present() throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ebolaeater": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.model.vendor.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_VENDOR;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.model.vendor.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.model.vendor.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.model.vendor.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.model.vendor.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assertEquals(INDEX_FIRST_VENDOR, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assertEquals(INDEX_FIRST_VENDOR, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 7,
      "-": 189
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/PriceCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.logic.commands.PriceCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.model.food.PriceWithinRangePredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "public class PriceCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    private PriceCommandParser parser \u003d new PriceCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void parse_allFieldsSpecified_success() throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertParseSuccess(parser, \"\u003c 2\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                new PriceCommand(new PriceWithinRangePredicate(ParserUtil.parseInequality(\"\u003c\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                        ParserUtil.parsePrice(\"2\"))));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertParseSuccess(parser, \"\u003c\u003d 3\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                new PriceCommand(new PriceWithinRangePredicate(ParserUtil.parseInequality(\"\u003c\u003d\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                        ParserUtil.parsePrice(\"3\"))));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertParseSuccess(parser, \"\u003e\u003d 4\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                new PriceCommand(new PriceWithinRangePredicate(ParserUtil.parseInequality(\"\u003e\u003d\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                        ParserUtil.parsePrice(\"4\"))));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void parse_fieldsMissing_failure() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        String format \u003d String.format(ParserUtil.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                String.format(ParserUtil.MESSAGE_INSUFFICENT_ARGUMENTS, PriceCommand.COMMAND_WORD, 2,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                        PriceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertParseFailure(parser, \"\", format);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertParseFailure(parser, \"1\", format);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertParseFailure(parser, \"\u003c\", format);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void parse_invalidValues_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        String illegalPrice \u003d ParserUtil.MESSAGE_INVALID_PRICE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertParseFailure(parser, \"\u003c -1\", String.format(illegalPrice, \"-1\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertParseFailure(parser, \"\u003e -1.5\", String.format(illegalPrice, \"-1.5\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        String illegalInequality \u003d ParserUtil.MESSAGE_INVALID_INEQUALITY;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertParseFailure(parser, \"\u003c\u003c 1\", String.format(illegalInequality, \"\u003c\u003c\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertParseFailure(parser, \"\u003e* 2\", String.format(illegalInequality, \"\u003e*\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ebolaeater": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/RemoveCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INSUFFICENT_ARGUMENTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_QUANTITY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_TOO_MANY_ARGUMENTS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.logic.commands.RemoveCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": " * outside of the RemoveCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": " * same path through the RemoveCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "public class RemoveCommandParserTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    private RemoveCommandParser parser \u003d new RemoveCommandParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assertParseSuccess(parser, \"1 10\", new RemoveCommand(Index.fromOneBased(1), 10));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assertParseSuccess(parser, \"2 3\", new RemoveCommand(Index.fromOneBased(2), 3));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assertParseSuccess(parser, \"1 1\", new RemoveCommand(Index.fromOneBased(1), 1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public void parse_optionalFieldMissing_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assertParseSuccess(parser, \"2\", new RemoveCommand(Index.fromOneBased(2), 1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assertParseSuccess(parser, \"5\", new RemoveCommand(Index.fromOneBased(5), 1));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public void parse_invalidValues_failure() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        // empty String"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                String.format(MESSAGE_INSUFFICENT_ARGUMENTS,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                        RemoveCommand.COMMAND_WORD, 1, RemoveCommand.MESSAGE_USAGE)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        // More than 2 arguments"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assertParseFailure(parser, \"1 2 3\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                String.format(MESSAGE_TOO_MANY_ARGUMENTS,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                        RemoveCommand.COMMAND_WORD, 2, RemoveCommand.MESSAGE_USAGE)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        // Index passed is not a non-zero integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assertParseFailure(parser, \"1.4\", String.format(MESSAGE_INVALID_INDEX, \"Menu Index\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assertParseFailure(parser, \"0\", String.format(MESSAGE_INVALID_INDEX, \"Menu Index\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assertParseFailure(parser, \"-1\", String.format(MESSAGE_INVALID_INDEX, \"Menu Index\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        // Quantity passed is not a non-zero integer"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assertParseFailure(parser, \"1 1.2\", MESSAGE_INVALID_QUANTITY);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assertParseFailure(parser, \"1 0\", MESSAGE_INVALID_QUANTITY);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assertParseFailure(parser, \"1 -1\", MESSAGE_INVALID_QUANTITY);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 36,
      "Ebolaeater": 5,
      "-": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/VendorCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_TOO_MANY_ARGUMENTS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.logic.commands.SwitchVendorCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.logic.commands.VendorCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "public class VendorCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    private VendorCommandParser parser \u003d new VendorCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertParseSuccess(parser, \"1\", new SwitchVendorCommand(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertParseSuccess(parser, \"2\", new SwitchVendorCommand(Index.fromOneBased(2)));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void parse_invalidValues_failure() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        //TODO: Refactor to VendorCommandTest"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        //        // empty String"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        //        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        //                String.format(MESSAGE_INSUFFICENT_ARGUMENTS, VendorCommand.COMMAND_WORD, 1,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        //                        VendorCommand.MESSAGE_USAGE)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        // More than 2 arguments"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertParseFailure(parser, \"1 2 3\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                String.format(MESSAGE_TOO_MANY_ARGUMENTS,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                VendorCommand.COMMAND_WORD, 1, SwitchVendorCommand.MESSAGE_USAGE)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        // Index passed is not a non-zero integer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertParseFailure(parser, \"1.4\", String.format(MESSAGE_INVALID_INDEX, \"Vendor Index\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static seedu.address.testutil.TypicalVendors.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static seedu.address.testutil.TypicalVendors.BENSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static seedu.address.testutil.TypicalVendors.ELLE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static seedu.address.testutil.TypicalVendors.getTypicalAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.model.vendor.Vendor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.model.vendor.exceptions.DuplicateVendorException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.testutil.VendorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getVendorList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void resetData_withDuplicateVendors_throwsDuplicateVendorException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        // Two vendors with the same identity fields"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        Vendor editedAlice \u003d new VendorBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        List\u003cVendor\u003e newVendors \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newVendors);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertThrows(DuplicateVendorException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void hasVendor_nullVendor_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasVendor(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void hasVendor_vendorNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertFalse(addressBook.hasVendor(ALICE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void hasVendor_vendorInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        addressBook.addVendor(ALICE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertTrue(addressBook.hasVendor(ALICE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void hasVendor_vendorWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        addressBook.setVendors(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        addressBook.addVendor(ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        Vendor editedAlice \u003d new VendorBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertTrue(addressBook.hasVendor(editedAlice));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void getVendorList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getVendorList().remove(0));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void selectVendorIndex_validIndex_success() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertEquals(addressBook.getVendorIndex(), -1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        AddressBook addressBook \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        addressBook.selectVendor(1);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertEquals(addressBook.getVendorIndex(), 1);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void selectVendor_validIndex_success() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        AddressBook addressBook1 \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        addressBook1.selectVendor(1);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertEquals(addressBook1.getSelectedVendor(), BENSON);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        AddressBook addressBook2 \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        addressBook2.selectVendor(4);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertEquals(addressBook2.getSelectedVendor(), ELLE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void setVendor_validVendor_success() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        AddressBook addressBook1 \u003d new AddressBook();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        addressBook1.addVendor(ELLE);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        addressBook1.setVendor(ELLE, ALICE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertFalse(addressBook1.hasVendor(ELLE));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertTrue(addressBook1.hasVendor(ALICE));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * A stub ReadOnlyAddressBook whose vendors list can violate interface constraints."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        private final ObservableList\u003cVendor\u003e vendors \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        AddressBookStub(Collection\u003cVendor\u003e vendors) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            this.vendors.setAll(vendors);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        public ObservableList\u003cVendor\u003e getVendorList() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            return vendors;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        public int getVendorIndex() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 60,
      "Ebolaeater": 8,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import static seedu.address.testutil.TypicalVendors.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import static seedu.address.testutil.TypicalVendors.BENSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public void hasVendor_nullVendor_throwsNullPointerException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasVendor(null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public void hasVendor_vendorNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assertFalse(modelManager.hasVendor(ALICE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //@Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //public void hasVendor_vendorInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //        modelManager.addVendor(ALICE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //        assertTrue(modelManager.hasVendor(ALICE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public void getFilteredVendorList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getObservableVendorList().remove(0));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withVendor(ALICE).withVendor(BENSON).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        //        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        //        modelManager.updateFilteredFoodList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        //        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 17,
      "-": 109
    }
  },
  {
    "path": "src/test/java/seedu/address/model/food/FoodTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "package seedu.address.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static seedu.address.testutil.TypicalFoods.CHEESE_PRATA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static seedu.address.testutil.TypicalFoods.PRATA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static seedu.address.testutil.TypicalFoods.getTypicalFoods;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "public class FoodTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        Food food \u003d new FoodBuilder().build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e food.getTags().remove(0));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        getTypicalFoods();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        Food prataCopy \u003d new FoodBuilder(PRATA).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertTrue(PRATA.equals(prataCopy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertTrue(PRATA.equals(PRATA));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertFalse(PRATA.equals(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertFalse(PRATA.equals(5));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        // different food -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertFalse(PRATA.equals(CHEESE_PRATA));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        Food editedPrata \u003d new FoodBuilder(PRATA).withName(\"Cheese Prata\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertFalse(PRATA.equals(editedPrata));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        // different price -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        editedPrata \u003d new FoodBuilder(PRATA).withPrice(2.3).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertFalse(PRATA.equals(editedPrata));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        editedPrata \u003d new FoodBuilder(PRATA).withTags(\"false\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertFalse(PRATA.equals(editedPrata));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void getPriceString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertEquals(PRATA.getPriceString(), \"$1.00\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertNotEquals(PRATA.getPriceString(), \"$1.20\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void invalidPriceTest() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertFalse(Food.isValidPrice(-2));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertTrue(Food.isValidPrice(2));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertTrue(Food.isValidPrice(2.54));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertTrue(Food.isValidPrice(1.2));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        // Price should have only 2 decimal points"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertFalse(Food.isValidPrice(2.555));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 73
    }
  },
  {
    "path": "src/test/java/seedu/address/model/food/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "package seedu.address.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Prata\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertTrue(predicate.test(new FoodBuilder().withName(\"Cheese Prata\").build()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Cheese\", \"Prata\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertTrue(predicate.test(new FoodBuilder().withName(\"Cheese Prata\").build()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Egg\", \"Prata\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertTrue(predicate.test(new FoodBuilder().withName(\"Egg Prata\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"cHeeSe\", \"pRAtA\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertTrue(predicate.test(new FoodBuilder().withName(\"Cheese Prata\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertFalse(predicate.test(new FoodBuilder().withName(\"Prata\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Milo\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertFalse(predicate.test(new FoodBuilder().withName(\"Cheese Prata\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        // Keywords match price, but does not match name"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"2.5\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertFalse(predicate.test(new FoodBuilder().withName(\"Prata\").withPrice(2.5).build()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                ));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/model/menu/MenuManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "package seedu.address.model.menu;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static seedu.address.logic.commands.FoodCommandTestUtil.VALID_TAG_CLASSIC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import static seedu.address.testutil.TypicalFoods.CHEESE_PRATA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import static seedu.address.testutil.TypicalFoods.MILO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static seedu.address.testutil.TypicalFoods.PRATA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static seedu.address.testutil.TypicalFoods.getTypicalMenuManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.model.food.Food;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.model.food.exceptions.DuplicateFoodException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.testutil.TypicalMenus;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "public class MenuManagerTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    private final MenuManager menuManager \u003d new MenuManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertEquals(Collections.emptyList(), menuManager.getFoodList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void constructor_menuToBeCopied() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        MenuManager menuManager2 \u003d new MenuManager(TypicalMenus.MENU);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertEquals(TypicalMenus.MENU.asUnmodifiableObservableList(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                menuManager2.getFoodList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e menuManager.resetData(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void resetData_withValidReadOnlyMenuManager_replacesData() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        MenuManager newData \u003d getTypicalMenuManager();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        menuManager.resetData(newData);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertEquals(newData, menuManager);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void resetData_withDuplicateFoods_throwsDuplicateFoodException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        // Two foods with the same identity fields"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        Food editedPrata \u003d new FoodBuilder(PRATA)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        List\u003cFood\u003e newFoods \u003d Arrays.asList(PRATA, editedPrata);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        MenuManager newData \u003d new MenuManager();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        assertThrows(DuplicateFoodException.class, () -\u003e {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "            newData.setMenu(newFoods);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "            menuManager.resetData(newData);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        });"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void hasFood_nullFood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e menuManager.hasFood(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void hasFood_foodNotInMenuManager_returnsFalse() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertFalse(menuManager.hasFood(PRATA));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void hasFood_foodInMenuManager_returnsTrue() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        menuManager.addFood(PRATA);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertTrue(menuManager.hasFood(PRATA));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void hasFood_foodWithSameIdentityFieldsInMenuManager_returnsTrue() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        menuManager.addFood(PRATA);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        Food editedPrata \u003d new FoodBuilder(PRATA).withTags(VALID_TAG_CLASSIC)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertTrue(menuManager.hasFood(editedPrata));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void getFoodList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e menuManager.getFoodList().remove(0));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void removeFood_hasFoodInMenuManager_returnsFalse() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        menuManager.addFood(PRATA);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        menuManager.removeFood(PRATA);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertFalse(menuManager.hasFood(PRATA));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void setFood_hasFoodInMenuManager_returnsTrue() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        menuManager.addFood(PRATA);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        menuManager.setFood(PRATA, MILO);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertTrue(menuManager.hasFood(MILO));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void sortFoodInAscendingByName_sortsMenu() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        menuManager.addFood(PRATA);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        menuManager.addFood(MILO);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        menuManager.addFood(CHEESE_PRATA);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        // Added in wrong order"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        menuManager.sortFoodByName(true);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        MenuManager sortedMenu \u003d new MenuManager();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        sortedMenu.addFood(CHEESE_PRATA);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        sortedMenu.addFood(MILO);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        sortedMenu.addFood(PRATA);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertEquals(menuManager.getFoodList(), sortedMenu.getFoodList());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void sortFoodInAscendingByPrice_sortsMenu() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        menuManager.addFood(PRATA);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        menuManager.addFood(MILO);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        menuManager.addFood(CHEESE_PRATA);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        //Added in wrong order"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        menuManager.sortFoodByPrice(true);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        MenuManager sortedMenu \u003d new MenuManager();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        sortedMenu.addFood(PRATA);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        sortedMenu.addFood(MILO);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        sortedMenu.addFood(CHEESE_PRATA);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertEquals(menuManager.getFoodList(), sortedMenu.getFoodList());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 94,
      "Ebolaeater": 37,
      "KendrewChan": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/model/menu/MenuTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "package seedu.address.model.menu;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static seedu.address.logic.commands.FoodCommandTestUtil.VALID_NAME_PRATA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static seedu.address.logic.commands.FoodCommandTestUtil.VALID_PRICE_MILO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static seedu.address.logic.commands.FoodCommandTestUtil.VALID_TAG_CLASSIC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static seedu.address.testutil.TypicalFoods.MILO;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static seedu.address.testutil.TypicalFoods.PRATA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.model.food.Food;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.model.food.exceptions.DuplicateFoodException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.model.food.exceptions.FoodNotFoundException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "public class MenuTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    private final Menu menu \u003d new Menu();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void contains_nullFood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e menu.contains(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void contains_foodNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertFalse(menu.contains(PRATA));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void contains_foodInList_returnsTrue() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        menu.add(PRATA);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertTrue(menu.contains(PRATA));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void contains_foodWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        menu.add(PRATA);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        Food editedPrata \u003d new FoodBuilder(PRATA).withName(VALID_NAME_PRATA).withTags(VALID_TAG_CLASSIC)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertTrue(menu.contains(editedPrata));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void add_nullFood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e menu.add(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void add_duplicateFood_throwsDuplicateFoodException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        menu.add(PRATA);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertThrows(DuplicateFoodException.class, () -\u003e menu.add(PRATA));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void setFood_nullTargetFood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e menu.setFood(null, PRATA));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void setFood_nullEditedFood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e menu.setFood(PRATA, null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void setFood_targetFoodNotInList_throwsFoodNotFoundException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertThrows(FoodNotFoundException.class, () -\u003e menu.setFood(PRATA, PRATA));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void setFood_editedFoodIsSameFood_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        menu.add(PRATA);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        menu.setFood(PRATA, PRATA);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        Menu expectedMenu \u003d new Menu();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        expectedMenu.add(PRATA);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertEquals(expectedMenu, menu);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void setFood_editedFoodHasSameIdentity_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        menu.add(PRATA);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        Food editedPrata \u003d new FoodBuilder(PRATA).withPrice(VALID_PRICE_MILO).withTags(VALID_TAG_CLASSIC)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        menu.setFood(PRATA, editedPrata);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        Menu expectedMenu \u003d new Menu();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        expectedMenu.add(editedPrata);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertEquals(expectedMenu, menu);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void setFood_editedFoodHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        menu.add(PRATA);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        menu.setFood(PRATA, MILO);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        Menu expectedMenu \u003d new Menu();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        expectedMenu.add(MILO);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertEquals(expectedMenu, menu);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void setFood_editedFoodHasNonUniqueIdentity_throwsDuplicateFoodException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        menu.add(PRATA);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        menu.add(MILO);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertThrows(DuplicateFoodException.class, () -\u003e menu.setFood(PRATA, MILO));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void remove_nullFood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e menu.remove(null));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void remove_foodDoesNotExist_throwsFoodNotFoundException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertThrows(FoodNotFoundException.class, () -\u003e menu.remove(PRATA));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void remove_existingFood_removesFood() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        menu.add(PRATA);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        menu.remove(PRATA);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        Menu expectedMenu \u003d new Menu();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertEquals(expectedMenu, menu);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void setFoods_nullMenu_throwsNullPointerException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e menu.setFoods((List\u003cFood\u003e) null));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void setFoods_menu_replacesOwnListWithProvidedMenu() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        menu.add(PRATA);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        Menu expectedMenu \u003d new Menu();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        expectedMenu.add(MILO);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        menu.setFoods(expectedMenu);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertEquals(expectedMenu, menu);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void setFoods_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e menu.setFoods((List\u003cFood\u003e) null));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void setFoods_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        menu.add(PRATA);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        List\u003cFood\u003e foodList \u003d Collections.singletonList(MILO);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        menu.setFoods(foodList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        Menu expectedMenu \u003d new Menu();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        expectedMenu.add(MILO);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertEquals(expectedMenu, menu);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void setFoods_listWithDuplicateFoods_throwsDuplicateFoodException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        List\u003cFood\u003e listWithDuplicateFoods \u003d Arrays.asList(PRATA, PRATA);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertThrows(DuplicateFoodException.class, () -\u003e menu.setFoods(listWithDuplicateFoods));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            -\u003e menu.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 172
    }
  },
  {
    "path": "src/test/java/seedu/address/model/order/OrderManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import static seedu.address.testutil.TypicalOrderItems.PRATA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import static seedu.address.testutil.TypicalOrderItems.VALID_TAG_CLASSIC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import static seedu.address.testutil.TypicalOrderItems.getTypicalOrderManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import seedu.address.model.order.exceptions.DuplicateOrderItemException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import seedu.address.testutil.OrderItemBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "public class OrderManagerTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    private final OrderManager orderManager \u003d new OrderManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        assertEquals(Collections.emptyList(), orderManager.getOrderItemList());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e orderManager.resetData(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public void resetData_withValidReadOnlyOrderManager_replacesData() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        OrderManager newData \u003d getTypicalOrderManager();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        orderManager.resetData(newData);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        assertEquals(newData, orderManager);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public void resetData_withDuplicateOrderItems_throwsDuplicateOrderItemException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        // Two orderItems with the same identity fields"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        OrderItem editedPrata \u003d new OrderItemBuilder(PRATA).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        List\u003cOrderItem\u003e newOrderItems \u003d Arrays.asList(PRATA, editedPrata);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        OrderManager newData \u003d new OrderManager();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        assertThrows(DuplicateOrderItemException.class, () -\u003e {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "            newData.setOrder(newOrderItems);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "            orderManager.resetData(newData);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        });"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public void hasOrderItem_nullOrderItem_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e orderManager.hasOrderItem(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public void hasOrderItem_orderItemNotInOrderManager_returnsFalse() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        assertFalse(orderManager.hasOrderItem(PRATA));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public void hasOrderItem_orderItemInOrderManager_returnsTrue() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        orderManager.addOrderItem(PRATA);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        assertTrue(orderManager.hasOrderItem(PRATA));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public void hasOrderItem_orderItemWithSameIdentityFieldsInOrderManager_returnsTrue() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        orderManager.addOrderItem(PRATA);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        OrderItem editedPrata \u003d new OrderItemBuilder(PRATA).withTags(VALID_TAG_CLASSIC)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        assertTrue(orderManager.hasOrderItem(editedPrata));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public void getOrderItemList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e orderManager.getOrderItemList().remove(0));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrewChan": 81
    }
  },
  {
    "path": "src/test/java/seedu/address/model/order/OrderTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import static seedu.address.testutil.TypicalOrderItems.CHEESE_PRATA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import static seedu.address.testutil.TypicalOrderItems.MILO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import static seedu.address.testutil.TypicalOrderItems.NASI_GORENG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import static seedu.address.testutil.TypicalOrderItems.NUGGETS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import static seedu.address.testutil.TypicalOrderItems.PRATA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import static seedu.address.testutil.TypicalOrderItems.VALID_NAME_PRATA;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import static seedu.address.testutil.TypicalOrderItems.VALID_PRICE_MILO;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import static seedu.address.testutil.TypicalOrderItems.VALID_TAG_CLASSIC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import seedu.address.model.order.exceptions.DuplicateOrderItemException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import seedu.address.model.order.exceptions.OrderItemNotFoundException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import seedu.address.testutil.OrderItemBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "public class OrderTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    private final Order order \u003d new Order();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public void contains_nullOrderItem_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e order.contains(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public void contains_orderItemNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        assertFalse(order.contains(PRATA));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public void contains_orderItemInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        order.add(PRATA);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        assertTrue(order.contains(PRATA));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public void contains_orderItemWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        order.add(PRATA);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        OrderItem editedPrata \u003d new OrderItemBuilder(PRATA).withName(VALID_NAME_PRATA).withTags(VALID_TAG_CLASSIC)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        assertTrue(order.contains(editedPrata));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public void add_nullOrderItem_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e order.add(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public void add_duplicateOrderItemTotalQuantity_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        int initialQty \u003d PRATA.getQuantity();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        int expectedFinalQty \u003d initialQty * 2;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        order.add(PRATA);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        order.add(PRATA);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        assertEquals(expectedFinalQty, order.getOrderItem(VALID_NAME_PRATA).getQuantity());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public void setOrderItem_nullTargetOrderItem_throwsNullPointerException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e order.setOrderItem(null, PRATA));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public void setOrderItem_nullEditedOrderItem_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e order.setOrderItem(PRATA, null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public void setOrderItem_targetOrderItemNotInList_throwsOrderItemNotFoundException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        assertThrows(OrderItemNotFoundException.class, () -\u003e order.setOrderItem(PRATA, PRATA));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public void setOrderItem_editedOrderItemIsSameOrderItem_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        order.add(PRATA);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        order.setOrderItem(PRATA, PRATA);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        Order expectedOrder \u003d new Order();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        expectedOrder.add(PRATA);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        assertEquals(expectedOrder, order);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public void setOrderItem_editedOrderItemHasSameIdentity_success() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        order.add(PRATA);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        OrderItem editedPrata \u003d new OrderItemBuilder(PRATA).withPrice(VALID_PRICE_MILO).withTags(VALID_TAG_CLASSIC)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        order.setOrderItem(PRATA, editedPrata);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        Order expectedOrder \u003d new Order();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        expectedOrder.add(editedPrata);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        assertEquals(expectedOrder, order);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public void setOrderItem_editedOrderItemHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        order.add(PRATA);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        order.setOrderItem(PRATA, MILO);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        Order expectedOrder \u003d new Order();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        expectedOrder.add(MILO);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        assertEquals(expectedOrder, order);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public void setOrderItem_editedOrderItemHasNonUniqueIdentity_throwsDuplicateOrderItemException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        order.add(PRATA);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        order.add(MILO);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        assertThrows(DuplicateOrderItemException.class, () -\u003e order.setOrderItem(PRATA, MILO));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public void remove_nullOrderItem_throwsNullPointerException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e order.remove(null));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public void remove_orderItemDoesNotExist_throwsOrderItemNotFoundException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        assertThrows(OrderItemNotFoundException.class, () -\u003e order.remove(PRATA));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public void remove_existingOrderItem_removesOrderItem() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        order.add(PRATA);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        order.remove(PRATA);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        Order expectedOrder \u003d new Order();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        assertEquals(expectedOrder, order);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public void setOrderItems_nullOrder_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e order.setOrderItems((List\u003cOrderItem\u003e) null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public void setOrderItems_order_replacesOwnListWithProvidedOrder() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        order.add(PRATA);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        Order expectedOrder \u003d new Order();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        expectedOrder.add(MILO);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        List\u003cOrderItem\u003e lst \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        expectedOrder.forEach(lst:: add);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        order.setOrderItems(lst);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        assertEquals(expectedOrder, order);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public void setOrderItems_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e order.setOrderItems((List\u003cOrderItem\u003e) null));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public void setOrderItems_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        order.add(PRATA);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        List\u003cOrderItem\u003e orderItemList \u003d Collections.singletonList(MILO);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        order.setOrderItems(orderItemList);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        Order expectedOrder \u003d new Order();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        expectedOrder.add(MILO);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        assertEquals(expectedOrder, order);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public void setOrderItems_listWithDuplicateOrderItems_throwsDuplicateOrderItemException() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        List\u003cOrderItem\u003e listWithDuplicateOrderItems \u003d Arrays.asList(PRATA, PRATA);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        assertThrows(DuplicateOrderItemException.class, () -\u003e order.setOrderItems(listWithDuplicateOrderItems));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e order.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public void getOrderItem_emptyList_throwsOrderItemNotFoundException() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assertThrows(OrderItemNotFoundException.class, () -\u003e order.getOrderItem(VALID_NAME_PRATA));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public void getOrderItem_listWithoutSpecifiedItem_throwsOrderItemNotFoundException() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        order.add(CHEESE_PRATA);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        order.add(NUGGETS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        order.add(NASI_GORENG);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assertThrows(OrderItemNotFoundException.class, () -\u003e order.getOrderItem(VALID_NAME_PRATA));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public void setOrder_nullOrder_throwsNullPointerException() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e order.setOrder(null));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public void setOrder_replaceList_success() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        order.add(NASI_GORENG);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        order.add(MILO);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        Order replacementOrder \u003d new Order();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        replacementOrder.add(CHEESE_PRATA);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        replacementOrder.add(PRATA);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        replacementOrder.add(NUGGETS);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        order.setOrder(replacementOrder);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assertEquals(order, replacementOrder);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public void toString_emptyOrder_success() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assertEquals(order.toString(), \"\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public void toString_properOrder_success() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        order.add(MILO);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        order.add(PRATA);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        order.add(CHEESE_PRATA);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        StringBuilder text \u003d new StringBuilder();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        text.append(MILO.toString() + \u0027\\n\u0027).append(PRATA.toString() + \u0027\\n\u0027).append(CHEESE_PRATA.toString() + \u0027\\n\u0027);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assertEquals(order.toString(), text.toString());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 48,
      "KendrewChan": 176
    }
  },
  {
    "path": "src/test/java/seedu/address/model/orderitem/OrderItemTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "package seedu.address.model.orderitem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import static seedu.address.testutil.TypicalOrderItems.CHEESE_PRATA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import static seedu.address.testutil.TypicalOrderItems.PRATA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import static seedu.address.testutil.TypicalOrderItems.getTypicalOrderItems;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import seedu.address.model.order.OrderItem;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import seedu.address.testutil.OrderItemBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "public class OrderItemTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        OrderItem orderItem \u003d new OrderItemBuilder().build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e orderItem.getTags().remove(0));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        getTypicalOrderItems();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        OrderItem prataCopy \u003d new OrderItemBuilder(PRATA).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        assertTrue(PRATA.equals(prataCopy));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        assertTrue(PRATA.equals(PRATA));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        assertFalse(PRATA.equals(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        assertFalse(PRATA.equals(5));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        // different orderItem -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        assertFalse(PRATA.equals(CHEESE_PRATA));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        OrderItem editedPrata \u003d new OrderItemBuilder(PRATA).withName(\"Cheese Prata\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        assertFalse(PRATA.equals(editedPrata));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        // different price -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        editedPrata \u003d new OrderItemBuilder(PRATA).withPrice(2.3).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        assertFalse(PRATA.equals(editedPrata));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        // different quantity, same name -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        editedPrata \u003d new OrderItemBuilder(PRATA).withQuantity(4).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        assertTrue(PRATA.equals(editedPrata));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        editedPrata \u003d new OrderItemBuilder(PRATA).withTags(\"false\").build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        assertFalse(PRATA.equals(editedPrata));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public void invalidQuantityTest() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        assertFalse(OrderItem.isValidQuantity(-2));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        assertFalse(OrderItem.isValidQuantity(0));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        assertTrue(OrderItem.isValidQuantity(1));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrewChan": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/model/vendor/AddressTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "package seedu.address.model.vendor;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new seedu.address.model.vendor.Address(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new seedu.address.model.vendor.Address(invalidAddress));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e seedu.address.model.vendor.Address.isValidAddress(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertFalse(seedu.address.model.vendor.Address.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertFalse(seedu.address.model.vendor.Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertTrue(seedu.address.model.vendor.Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertTrue(seedu.address.model.vendor.Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ebolaeater": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/model/vendor/EmailTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "package seedu.address.model.vendor;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new seedu.address.model.vendor.Email(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new seedu.address.model.vendor.Email(invalidEmail));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e seedu.address.model.vendor.Email.isValidEmail(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertFalse(seedu.address.model.vendor.Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertFalse(seedu.address.model.vendor.Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertFalse(seedu.address.model.vendor.Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertFalse(seedu.address.model.vendor.Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertFalse(seedu.address.model.vendor.Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertFalse(seedu.address.model.vendor.Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertFalse(seedu.address.model.vendor.Email.isValidEmail(\"peterjack@exam_ple.com\")); // _ in domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertFalse(seedu.address.model.vendor.Email.isValidEmail(\"peter jack@example.com\")); // \" \"in local part"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertFalse(seedu.address.model.vendor.Email.isValidEmail(\"peterjack@exam ple.com\")); // \" \" in domain name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertFalse(seedu.address.model.vendor.Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertFalse(seedu.address.model.vendor.Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertFalse(seedu.address.model.vendor.Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertFalse(seedu.address.model.vendor.Email.isValidEmail(\"peter@jack@example.com\")); // wrong \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertFalse(seedu.address.model.vendor.Email.isValidEmail(\"peterjack@example@com\")); // wrong\u0027@\u0027 symbol"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertFalse(seedu.address.model.vendor.Email.isValidEmail(\"peterjack@.example.com\")); // starts with \".\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertFalse(seedu.address.model.vendor.Email.isValidEmail(\"peterjack@example.com.\")); // starts with \".\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertFalse(seedu.address.model.vendor.Email.isValidEmail(\"peterjack@-example.com\")); // starts with \"-\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertFalse(seedu.address.model.vendor.Email.isValidEmail(\"peterjack@example.com-\")); // starts with \"-\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertTrue(seedu.address.model.vendor.Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertTrue(seedu.address.model.vendor.Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertTrue(seedu.address.model.vendor.Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertTrue(seedu.address.model.vendor.Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertTrue(seedu.address.model.vendor.Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertTrue(seedu.address.model.vendor.Email.isValidEmail(\"a1+be!@example1.com\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertTrue(seedu.address.model.vendor.Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        // long domain name"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ebolaeater": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/model/vendor/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "package seedu.address.model.vendor;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        // different vendor -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assertTrue(predicate.test(new FoodBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assertTrue(predicate.test(new FoodBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assertTrue(predicate.test(new FoodBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assertTrue(predicate.test(new FoodBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assertFalse(predicate.test(new FoodBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assertFalse(predicate.test(new FoodBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assertFalse(predicate.test(new FoodBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 8,
      "Ebolaeater": 2,
      "-": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/model/vendor/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "package seedu.address.model.vendor;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new seedu.address.model.vendor.Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new seedu.address.model.vendor.Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e seedu.address.model.vendor.Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertFalse(seedu.address.model.vendor.Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertFalse(seedu.address.model.vendor.Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertFalse(seedu.address.model.vendor.Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertFalse(seedu.address.model.vendor.Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertTrue(seedu.address.model.vendor.Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertTrue(seedu.address.model.vendor.Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertTrue(seedu.address.model.vendor.Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertTrue(seedu.address.model.vendor.Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ebolaeater": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/vendor/PhoneTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "package seedu.address.model.vendor;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new seedu.address.model.vendor.Phone(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new seedu.address.model.vendor.Phone(invalidPhone));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e seedu.address.model.vendor.Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertFalse(seedu.address.model.vendor.Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertFalse(seedu.address.model.vendor.Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertFalse(seedu.address.model.vendor.Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertFalse(seedu.address.model.vendor.Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertFalse(seedu.address.model.vendor.Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertFalse(seedu.address.model.vendor.Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertTrue(seedu.address.model.vendor.Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertTrue(seedu.address.model.vendor.Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ebolaeater": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/vendor/UniqueVendorListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "package seedu.address.model.vendor;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import static seedu.address.testutil.TypicalVendors.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import static seedu.address.testutil.TypicalVendors.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.model.vendor.exceptions.DuplicateVendorException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.model.vendor.exceptions.VendorNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.testutil.VendorBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "public class UniqueVendorListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    private final UniqueVendorList uniqueVendorList \u003d new UniqueVendorList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void contains_nullVendor_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueVendorList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void contains_vendorNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertFalse(uniqueVendorList.contains(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void contains_vendorInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        uniqueVendorList.add(ALICE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertTrue(uniqueVendorList.contains(ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void contains_vendorWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        uniqueVendorList.add(ALICE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        Vendor editedAlice \u003d new VendorBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertTrue(uniqueVendorList.contains(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void add_nullVendor_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueVendorList.add(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void add_duplicateVendor_throwsDuplicateVendorException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        uniqueVendorList.add(ALICE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertThrows(DuplicateVendorException.class, () -\u003e uniqueVendorList.add(ALICE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void setVendor_nullTargetVendor_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueVendorList.setVendor(null, ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void setVendor_nullEditedVendor_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueVendorList.setVendor(ALICE, null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void setVendor_targetVendorNotInList_throwsVendorNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertThrows(VendorNotFoundException.class, () -\u003e uniqueVendorList.setVendor(ALICE, ALICE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void setVendor_editedVendorIsSameVendor_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        uniqueVendorList.add(ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        uniqueVendorList.setVendor(ALICE, ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        UniqueVendorList expectedUniqueVendorList \u003d new UniqueVendorList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        expectedUniqueVendorList.add(ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertEquals(expectedUniqueVendorList, uniqueVendorList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void setVendor_editedVendorHasSameIdentity_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        uniqueVendorList.add(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        Vendor editedAlice \u003d new VendorBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        uniqueVendorList.setVendor(ALICE, editedAlice);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        UniqueVendorList expectedUniqueVendorList \u003d new UniqueVendorList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        expectedUniqueVendorList.add(editedAlice);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertEquals(expectedUniqueVendorList, uniqueVendorList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void setVendor_editedVendorHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        uniqueVendorList.add(ALICE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        uniqueVendorList.setVendor(ALICE, BOB);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        UniqueVendorList expectedUniqueVendorList \u003d new UniqueVendorList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        expectedUniqueVendorList.add(BOB);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertEquals(expectedUniqueVendorList, uniqueVendorList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void setVendor_editedVendorHasNonUniqueIdentity_throwsDuplicateVendorException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        uniqueVendorList.add(ALICE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        uniqueVendorList.add(BOB);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertThrows(DuplicateVendorException.class, () -\u003e uniqueVendorList.setVendor(ALICE, BOB));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void remove_nullVendor_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueVendorList.remove(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void remove_vendorDoesNotExist_throwsVendorNotFoundException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertThrows(VendorNotFoundException.class, () -\u003e uniqueVendorList.remove(ALICE));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void remove_existingVendor_removesVendor() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        uniqueVendorList.add(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        uniqueVendorList.remove(ALICE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        UniqueVendorList expectedUniqueVendorList \u003d new UniqueVendorList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertEquals(expectedUniqueVendorList, uniqueVendorList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void setVendors_nullUniqueVendorList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueVendorList.setVendors((UniqueVendorList) null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void setVendors_uniqueVendorList_replacesOwnListWithProvidedUniqueVendorList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        uniqueVendorList.add(ALICE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        UniqueVendorList expectedUniqueVendorList \u003d new UniqueVendorList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        expectedUniqueVendorList.add(BOB);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        uniqueVendorList.setVendors(expectedUniqueVendorList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertEquals(expectedUniqueVendorList, uniqueVendorList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void setVendors_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueVendorList.setVendors((List\u003cVendor\u003e) null));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void setVendors_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        uniqueVendorList.add(ALICE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        List\u003cVendor\u003e vendorList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        uniqueVendorList.setVendors(vendorList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        UniqueVendorList expectedUniqueVendorList \u003d new UniqueVendorList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        expectedUniqueVendorList.add(BOB);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertEquals(expectedUniqueVendorList, uniqueVendorList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void setVendors_listWithDuplicateVendors_throwsDuplicateVendorException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        List\u003cVendor\u003e listWithDuplicateVendors \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertThrows(DuplicateVendorException.class, () -\u003e uniqueVendorList.setVendors(listWithDuplicateVendors));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            -\u003e uniqueVendorList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ebolaeater": 170
    }
  },
  {
    "path": "src/test/java/seedu/address/model/vendor/VendorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "package seedu.address.model.vendor;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import static seedu.address.testutil.TypicalVendors.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static seedu.address.testutil.TypicalVendors.BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.testutil.VendorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "public class VendorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        Vendor vendor \u003d new VendorBuilder().build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e vendor.getTags().remove(0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void isSameVendor() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertTrue(ALICE.isSameVendor(ALICE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertFalse(ALICE.isSameVendor(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        Vendor editedAlice \u003d new VendorBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertFalse(ALICE.isSameVendor(editedAlice));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        editedAlice \u003d new VendorBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertFalse(ALICE.isSameVendor(editedAlice));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        editedAlice \u003d new VendorBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertTrue(ALICE.isSameVendor(editedAlice));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        editedAlice \u003d new VendorBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertTrue(ALICE.isSameVendor(editedAlice));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        editedAlice \u003d new VendorBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertTrue(ALICE.isSameVendor(editedAlice));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //TODO: pass"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        Vendor aliceCopy \u003d new VendorBuilder(ALICE).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        // different vendor -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        Vendor editedAlice \u003d new VendorBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        editedAlice \u003d new VendorBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        editedAlice \u003d new VendorBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        editedAlice \u003d new VendorBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        editedAlice \u003d new VendorBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 8,
      "MorningLit": 2,
      "Ebolaeater": 18,
      "-": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/FoodStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.model.food.Food;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.model.menu.ReadOnlyMenuManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.model.vendor.Vendor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.testutil.TypicalVendors;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "public class FoodStorageTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void readValidMenuFromFile_equalsTypicalAddressBook() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        ObservableList\u003cVendor\u003e vendors \u003d FXCollections.observableArrayList(TypicalVendors.getTypicalVendors());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        List\u003cObservableList\u003cFood\u003e\u003e managers \u003d TypicalVendors.getMenus();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        FoodStorage storage \u003d new FoodStorage();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        List\u003cOptional\u003cReadOnlyMenuManager\u003e\u003e expectedManager \u003d storage.readMenuManagers(vendors);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        List\u003cObservableList\u003cFood\u003e\u003e expectedMenus \u003d expectedManager.stream().map(x -\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                x.get().getFoodList()).collect(Collectors.toList());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertEquals(managers, expectedMenus);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ebolaeater": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedFoodTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static seedu.address.storage.JsonAdaptedFood.INVALID_PRICE_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static seedu.address.storage.JsonAdaptedFood.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.model.food.Food;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.model.vendor.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "public class JsonAdaptedFoodTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public static final Food EGG_PRATA \u003d new FoodBuilder().withName(\"Egg Prata\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            .withPrice(1.2).withTags(\"bestseller\").build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    private static final String VALID_NAME \u003d \"Egg Prata\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    private static final double VALID_PRICE \u003d 1.20;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    private static final double INVALID_PRICE \u003d -1.20;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#tasty\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d EGG_PRATA.getTags().stream()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void toModelType_validFoodDetails_returnsFood() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        JsonAdaptedFood food \u003d new JsonAdaptedFood(EGG_PRATA);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertEquals(EGG_PRATA, food.toModelType());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        JsonAdaptedFood food \u003d new JsonAdaptedFood(null, VALID_PRICE, VALID_TAGS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void toModelType_invalidPrice_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        JsonAdaptedFood food \u003d new JsonAdaptedFood(VALID_NAME, INVALID_PRICE, VALID_TAGS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertThrows(IllegalValueException.class, INVALID_PRICE_FORMAT, food::toModelType);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        JsonAdaptedFood food \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                new JsonAdaptedFood(VALID_NAME, VALID_PRICE, invalidTags);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertThrows(IllegalValueException.class, food::toModelType);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 61,
      "MorningLit": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedOrderItemTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static seedu.address.storage.JsonAdaptedFood.INVALID_PRICE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static seedu.address.storage.JsonAdaptedOrderItem.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.model.order.OrderItem;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.model.vendor.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.testutil.OrderItemBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "public class JsonAdaptedOrderItemTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public static final OrderItem EGG_PRATA \u003d new OrderItemBuilder().withName(\"Egg Prata\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            .withPrice(1.2).withTags(\"bestseller\").withQuantity(3).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    private static final String VALID_NAME \u003d \"Egg Prata\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    private static final double VALID_PRICE \u003d 1.20;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    private static final double INVALID_PRICE \u003d -1.20;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#tasty\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d EGG_PRATA.getTags().stream()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void toModelType_validOrderItemDetails_returnsOrderItem() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        JsonAdaptedOrderItem orderItem \u003d new JsonAdaptedOrderItem(EGG_PRATA);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertEquals(EGG_PRATA, orderItem.toModelType());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        JsonAdaptedOrderItem orderItem \u003d new JsonAdaptedOrderItem(null, VALID_PRICE, VALID_TAGS, 3);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, orderItem::toModelType);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void toModelType_invalidPrice_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        JsonAdaptedOrderItem orderItem \u003d new JsonAdaptedOrderItem(VALID_NAME, INVALID_PRICE, VALID_TAGS, 3);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertThrows(IllegalValueException.class, INVALID_PRICE_FORMAT, orderItem::toModelType);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        JsonAdaptedOrderItem orderItem \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                new JsonAdaptedOrderItem(VALID_NAME, VALID_PRICE, invalidTags, 3);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertThrows(IllegalValueException.class, orderItem::toModelType);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void toModelType_invalidQuantity_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        JsonAdaptedOrderItem orderItem \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                new JsonAdaptedOrderItem(VALID_NAME, VALID_PRICE, VALID_TAGS, -1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertThrows(IllegalValueException.class, orderItem::toModelType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedVendorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import static seedu.address.storage.JsonAdaptedVendor.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import static seedu.address.testutil.TypicalVendors.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.model.vendor.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.model.vendor.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.model.vendor.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.model.vendor.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "public class JsonAdaptedVendorTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    private static final String INVALID_MENU \u003d \"fatass\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    private static final List\u003cJsonAdaptedFood\u003e VALID_MENU \u003d BENSON.getMenu().getFoods();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void toModelType_validVendorDetails_returnsVendor() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        JsonAdaptedVendor vendor \u003d new JsonAdaptedVendor(BENSON);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertEquals(BENSON, vendor.toModelType());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        JsonAdaptedVendor vendor \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                new JsonAdaptedVendor(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_MENU);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, vendor::toModelType);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        JsonAdaptedVendor vendor \u003d new JsonAdaptedVendor(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                VALID_TAGS, VALID_MENU);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, vendor::toModelType);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        JsonAdaptedVendor vendor \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                new JsonAdaptedVendor(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_MENU);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, vendor::toModelType);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        JsonAdaptedVendor vendor \u003d new JsonAdaptedVendor(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                VALID_TAGS, VALID_MENU);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, vendor::toModelType);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        JsonAdaptedVendor vendor \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                new JsonAdaptedVendor(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_MENU);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, vendor::toModelType);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        JsonAdaptedVendor vendor \u003d new JsonAdaptedVendor(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                VALID_TAGS, VALID_MENU);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, vendor::toModelType);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        JsonAdaptedVendor vendor \u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                new JsonAdaptedVendor(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS, VALID_MENU);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, vendor::toModelType);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        JsonAdaptedVendor vendor \u003d new JsonAdaptedVendor(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                VALID_MENU);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, vendor::toModelType);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        JsonAdaptedVendor vendor \u003d"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                new JsonAdaptedVendor(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags, VALID_MENU);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assertThrows(IllegalValueException.class, vendor::toModelType);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 3,
      "MorningLit": 21,
      "Ebolaeater": 15,
      "-": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.testutil.TypicalVendors;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorageTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(addressBook);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public void readAddressBook_invalidVendorAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidVendorAddressBook.json\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public void readAddressBook_invalidAndValidVendorAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                \"invalidAndValidVendorAddressBook.json\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        AddressBook original \u003d TypicalVendors.getTypicalAddressBook();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        original.addVendor(TypicalVendors.HOON);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        original.removeVendor(TypicalVendors.ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        original.addVendor(TypicalVendors.IDA);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    //     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    //    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    //        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    //            new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    //                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    //        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    //            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    //        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 3,
      "Ebolaeater": 26,
      "-": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonMenuManagerStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.model.food.Food;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.model.menu.MenuManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.model.menu.ReadOnlyMenuManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "public class JsonMenuManagerStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public List\u003cFood\u003e getExpectedFood() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        ArrayList\u003cFood\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        list.add(new Food(\"Prata\", 1, new HashSet\u003c\u003e()));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        list.add(new Food(\"Milo\", 1.5, new HashSet\u003c\u003e()));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        list.add(new Food(\"Nasi Goreng\", 4.5, new HashSet\u003c\u003e()));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void readMenuManager_equalsExpectedMenu() throws DataConversionException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        JsonMenuManagerStorage storage \u003d new JsonMenuManagerStorage(Paths"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                .get(\"src/test/data/JsonMenuManagerStorageTest/typicalMenuManager.json\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        ReadOnlyMenuManager jsonMenuManager \u003d storage.readMenuManager().get();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        MenuManager manager \u003d new MenuManager();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        manager.setMenu(getExpectedFood());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertEquals(jsonMenuManager.getFoodList(), manager.getFoodList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void readMenuManager_invalidMenuManager_throwsDataConversionException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        JsonMenuManagerStorage storage \u003d new JsonMenuManagerStorage(Paths"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                .get(\"src/test/data/JsonMenuManagerStorageTest/invalidMenuManager.json\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertThrows(DataConversionException.class, storage::readMenuManager);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void getFilePath_equalsInputtedFilePath() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        Path filePath \u003d Paths.get(\"src/test/data/JsonMenuManagerStorageTest/typicalMenuManager.json\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        JsonMenuManagerStorage storage \u003d new JsonMenuManagerStorage(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertEquals(filePath, storage.getMenuManagerFilePath());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ebolaeater": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableAddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.testutil.TypicalVendors;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    private static final Path TYPICAL_VENDORS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalVendorsAddressBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    private static final Path STORAGE_FILE \u003d TEST_DATA_FOLDER.resolve(\"storageAddressBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    private static final Path INVALID_VENDOR_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidVendorAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    private static final Path DUPLICATE_VENDOR_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateVendorAddressBook.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void toModelType_typicalVendorsFile_success() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        AddressBook book \u003d TypicalVendors.getTypicalAddressBook();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(STORAGE_FILE,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        AddressBook dataBook \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertEquals(dataBook, book);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void toModelType_invalidVendorFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_VENDOR_FILE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void toModelType_duplicateVendors_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_VENDOR_FILE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 3,
      "Ebolaeater": 14,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableMenuManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.model.menu.MenuManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.testutil.TypicalFoods;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "public class JsonSerializableMenuManagerTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableMenuManagerTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    private static final Path TYPICAL_FOODS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalMenuManager.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    private static final Path INVALID_FOOD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidMenuManager.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    private static final Path DUPLICATE_FOOD_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateFoods.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void toModelType_typicalMenuFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        JsonSerializableMenuManager dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_FOODS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                JsonSerializableMenuManager.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        MenuManager menuManagerFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        MenuManager typicalVendorsMenuManager \u003d TypicalFoods.getTypicalMenuManager();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertEquals(menuManagerFromFile, typicalVendorsMenuManager);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void toModelType_invalidMenuManagerFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        JsonSerializableMenuManager dataFromFile \u003d JsonUtil.readJsonFile(INVALID_FOOD_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                JsonSerializableMenuManager.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public void toModelType_duplicateVendors_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        JsonSerializableMenuManager dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_FOOD_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                JsonSerializableMenuManager.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableMenuManager.MESSAGE_DUPLICATE_FOOD,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableOrderManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import seedu.address.model.order.OrderManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import seedu.address.testutil.TypicalOrderItems;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "public class JsonSerializableOrderManagerTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableOrderManagerTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    private static final Path TYPICAL_ORDERITEMS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalOrderManager.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    private static final Path INVALID_ORDERITEM_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidOrderManager.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    private static final Path DUPLICATE_ORDERITEM_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateOrderItems.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public void toModelType_typicalOrderFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        JsonSerializableOrderManager dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_ORDERITEMS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "                JsonSerializableOrderManager.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        OrderManager orderManagerFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        OrderManager typicalVendorsOrderManager \u003d TypicalOrderItems.getTypicalOrderManager();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        assertEquals(orderManagerFromFile, typicalVendorsOrderManager);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public void toModelType_invalidOrderManagerFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        JsonSerializableOrderManager dataFromFile \u003d JsonUtil.readJsonFile(INVALID_ORDERITEM_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "                JsonSerializableOrderManager.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public void toModelType_duplicateVendors_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        JsonSerializableOrderManager dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_ORDERITEM_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "                JsonSerializableOrderManager.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableOrderManager.MESSAGE_DUPLICATE_ORDERITEM,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrewChan": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //TODO: pass"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //        /*"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //         */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 13,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.model.vendor.Vendor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MorningLit"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withVendor(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder(AddressBook addressBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * Adds a new {@code Vendor} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public AddressBookBuilder withVendor(Vendor vendor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        addressBook.addVendor(vendor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 5,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditFoodDescriptor.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "public class EditFoodDescriptor {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /* TODO */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/FoodBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.model.food.Food;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": " * A utility class to help with building Food objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "public class FoodBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Plain Prata\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public static final double DEFAULT_PRICE \u003d 1.20;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public static final String DEFAULT_PRICE_STRING \u003d \"1.20\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    private double price;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Creates a {@code FoodBuilder} with the default details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public FoodBuilder() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        this.name \u003d DEFAULT_NAME;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        this.price \u003d DEFAULT_PRICE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        this.tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Initializes the FoodBuilder with the data of {@code foodToCopy}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public FoodBuilder(Food foodToCopy) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        name \u003d foodToCopy.getName();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        price \u003d foodToCopy.getPrice();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(foodToCopy.getTags());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Sets the {@code Name} of the {@code Food} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public FoodBuilder withName(String name) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Sets the {@code Price} of the {@code Food} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public FoodBuilder withPrice(double price) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Food} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public FoodBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public Food build() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        return new Food(name, price, tags);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/FoodUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.model.food.Food;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": " * A utility class for Food."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "public class FoodUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Returns an add command string for adding the {@code food}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public static String getAddCommand(Food food) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getFoodDetails(food);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Returns the part of command string for the given {@code food}\u0027s details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public static String getFoodDetails(Food food) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        sb.append(PREFIX_NAME + food.getName() + \" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        sb.append(PREFIX_PRICE + food.getPriceString() + \"\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        food.getTags().stream().forEach("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        );"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Returns the part of command string for the given {@code EditFoodDescriptor}\u0027s details."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditFoodDescriptor descriptor) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        return \"TODO\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/MenuBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.model.food.Food;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.model.menu.Menu;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "public class MenuBuilder {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    private final Menu menu;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Creates a {@code MenuBuilder} with a default Menu."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public MenuBuilder() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        this.menu \u003d new Menu();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Initializes the MenuBuilder with the data of {@code menuToCopy}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public MenuBuilder(Menu menuToCopy) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        this.menu \u003d menuToCopy;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Adds a food to the MenuBuilder."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public MenuBuilder add(Food food) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        this.menu.add(food);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public Menu build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        return menu;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/OrderItemBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import seedu.address.model.order.OrderItem;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": " * A utility class to help with building OrderItem objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "public class OrderItemBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Plain Prata\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public static final double DEFAULT_PRICE \u003d 1.20;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public static final String DEFAULT_PRICE_STRING \u003d \"1.20\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public static final int DEFAULT_QUANTITY \u003d 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    private double price;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    private int quantity;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     * Creates a {@code OrderItemBuilder} with the default details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public OrderItemBuilder() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        this.name \u003d DEFAULT_NAME;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        this.price \u003d DEFAULT_PRICE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        this.quantity \u003d DEFAULT_QUANTITY;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        this.tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     * Initializes the OrderItemBuilder with the data of {@code orderItemToCopy}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public OrderItemBuilder(OrderItem orderItemToCopy) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        name \u003d orderItemToCopy.getName();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        price \u003d orderItemToCopy.getPrice();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        quantity \u003d orderItemToCopy.getQuantity();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(orderItemToCopy.getTags());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     * Sets the {@code Name} of the {@code OrderItem} that we are building."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public OrderItemBuilder withName(String name) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     * Sets the {@code Price} of the {@code OrderItem} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public OrderItemBuilder withPrice(double price) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     * Sets the {@code Quantity} of the {@code OrderItem} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public OrderItemBuilder withQuantity(int quantity) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code OrderItem} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public OrderItemBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public OrderItem build() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        return new OrderItem(name, price, tags, quantity);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrewChan": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/SerializableTestClass.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            + \"}\\n\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ebolaeater": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.model.vendor.Vendor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * Returns the middle index of the vendor in the {@code model}\u0027s vendor list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return Index.fromOneBased(model.getObservableVendorList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * Returns the last index of the vendor in the {@code model}\u0027s vendor list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return Index.fromOneBased(model.getObservableVendorList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * Returns the vendor in the {@code model}\u0027s vendor list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public static Vendor getVendor(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return model.getObservableVendorList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 8,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalFoods.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.model.food.Food;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.model.menu.MenuManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "public class TypicalFoods {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public static final Food PRATA \u003d new FoodBuilder().withName(\"Prata\").withPrice(1.00).withTags(\"classic\").build();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public static final Food MILO \u003d new FoodBuilder().withName(\"Milo\").withPrice(1.50).withTags(\"Iced\").build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public static final Food NASI_GORENG \u003d new FoodBuilder().withName(\"Nasi Goreng\").withPrice(4.50)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            .withTags(\"Bestseller\").build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public static final Food NUGGETS \u003d new FoodBuilder().withName(\"Nuggets\").withPrice(3.20).withTags(\"six\").build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public static final Food CHEESE_PRATA \u003d new FoodBuilder().withName(\"Cheese Prata\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            .withPrice(1.60).withTags(\"cheesy\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    private TypicalFoods() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     * Returns an {@code MenuManager} with all the typical foods."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public static MenuManager getTypicalMenuManager() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        MenuManager menuManager \u003d new MenuManager();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        for (Food food : getTypicalFoods()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "            menuManager.addFood(food);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        return menuManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public static List\u003cFood\u003e getTypicalFoods() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(PRATA, MILO, NASI_GORENG, NUGGETS, CHEESE_PRATA));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public static final Index INDEX_FIRST_VENDOR \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public static final Index INDEX_SECOND_VENDOR \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public static final Index INDEX_THIRD_VENDOR \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 3,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalMenus.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static seedu.address.testutil.TypicalFoods.MILO;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static seedu.address.testutil.TypicalFoods.NUGGETS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import static seedu.address.testutil.TypicalFoods.PRATA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "import seedu.address.model.menu.Menu;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "public class TypicalMenus {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    public static final Menu MENU \u003d new MenuBuilder().add(PRATA).add(MILO).add(NUGGETS).build();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    private TypicalMenus() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "        //prevents instantiation"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalModel.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.model.menu.MenuManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.model.order.OrderManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "public class TypicalModel {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    private TypicalModel() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * Returns a {@code ModelManager} with the typical menu."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public static ModelManager getModelManagerWithMenu() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        List\u003cMenuManager\u003e menuManagers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        menuManagers.add(TypicalFoods.getTypicalMenuManager());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        ModelManager model \u003d new ModelManager(addressBook, new UserPrefs(), menuManagers, new OrderManager());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        model.selectVendor(0);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 27,
      "Ebolaeater": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalOrderItems.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import seedu.address.model.order.OrderItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "import seedu.address.model.order.OrderManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": " * A utility class containing a list of {@code OrderItem} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "public class TypicalOrderItems {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public static final double VALID_PRICE_MILO \u003d 1.50;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public static final String VALID_NAME_PRATA \u003d \"Prata\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public static final String VALID_TAG_CLASSIC \u003d \"classic\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    // These data are the same as those found in `typicalOrderManager.json`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public static final OrderItem PRATA \u003d new OrderItemBuilder()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "                                            .withName(\"Prata\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "                                            .withPrice(1.00)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "                                            .withQuantity(3)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "                                            .withTags(VALID_TAG_CLASSIC)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "                                            .build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public static final OrderItem MILO \u003d new OrderItemBuilder()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "                                            .withName(\"Milo\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "                                            .withPrice(1.50)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "                                            .withQuantity(2)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "                                            .withTags(\"Iced\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "                                            .build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public static final OrderItem NASI_GORENG \u003d new OrderItemBuilder()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "                                                    .withName(\"Nasi Goreng\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "                                                    .withPrice(4.50)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "                                                    .withQuantity(1)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "                                                    .withTags(\"Bestseller\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "                                                    .build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public static final OrderItem NUGGETS \u003d new OrderItemBuilder()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "                                                .withName(\"Nuggets\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "                                                .withPrice(3.20)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "                                                .withQuantity(5)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "                                                .withTags(\"six\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "                                                .build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    // Manually added - OrderItem\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public static final OrderItem CHEESE_PRATA \u003d new OrderItemBuilder()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "                                                    .withName(\"Cheese Prata\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "                                                    .withPrice(1.60)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "                                                    .withQuantity(2)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "                                                    .withTags(\"cheesy\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "                                                    .build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    private TypicalOrderItems() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     * Returns an {@code OrderManager} with all the typical foods."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public static OrderManager getTypicalOrderManager() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        OrderManager orderManager \u003d new OrderManager();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        for (OrderItem orderItem : getTypicalOrderItems()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "            orderManager.addOrderItem(orderItem);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        return orderManager;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    public static List\u003cOrderItem\u003e getTypicalOrderItems() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(PRATA, MILO, NASI_GORENG, NUGGETS, CHEESE_PRATA));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrewChan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrewChan": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalVendors.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.model.food.Food;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.model.menu.Menu;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.model.menu.MenuManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.model.vendor.Vendor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MorningLit"
        },
        "content": " * A utility class containing a list of {@code Vendor} objects to be used in tests."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "public class TypicalVendors {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestlim8"
        },
        "content": "    private static final Menu menu \u003d TypicalMenus.MENU;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public static final Vendor ALICE \u003d new VendorBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            .withTags(\"friends\").withMenu(menu).build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public static final Vendor BENSON \u003d new VendorBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").withMenu(menu).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public static final Vendor CARL \u003d new VendorBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withMenu(menu).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public static final Vendor DANIEL \u003d new VendorBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").withMenu(menu).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public static final Vendor ELLE \u003d new VendorBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").withMenu(menu).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public static final Vendor FIONA \u003d new VendorBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").withMenu(menu).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public static final Vendor GEORGE \u003d new VendorBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").withMenu(menu).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public static final Vendor HOON \u003d new VendorBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                .withEmail(\"stefan@example.com\").withAddress(\"little india\").withMenu(menu).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public static final Vendor IDA \u003d new VendorBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").withMenu(menu).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    // Manually added - Vendor\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    //    public static final Vendor AMY \u003d new VendorBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    //            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public static final Vendor BOB \u003d new VendorBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            .withMenu(menu).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    //    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    private TypicalVendors() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        List\u003cFood\u003e foodList \u003d Arrays.asList(new Food(\"Prata\", 1, new HashSet\u003c\u003e()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        menu.setFoods(foodList);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical Vendors."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        for (Vendor vendor : getTypicalVendors()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            ab.addVendor(vendor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public static List\u003cObservableList\u003cFood\u003e\u003e getMenus() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        List\u003cObservableList\u003cFood\u003e\u003e menus \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        List\u003cVendor\u003e vendors \u003d getTypicalVendors();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        for (Vendor v : vendors) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            menus.add(v.getMenu().asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        return menus;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public static List\u003cMenuManager\u003e getManagers() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        List\u003cMenuManager\u003e menus \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        List\u003cVendor\u003e vendors \u003d getTypicalVendors();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        for (Vendor v : vendors) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            menus.add(new MenuManager(v.getMenu()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        return menus;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public static List\u003cVendor\u003e getTypicalVendors() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestlim8": 1,
      "MorningLit": 1,
      "Ebolaeater": 97
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/VendorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.model.menu.Menu;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.model.vendor.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.model.vendor.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.model.vendor.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.model.vendor.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import seedu.address.model.vendor.Vendor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MorningLit"
        },
        "content": " * A utility class to help with building Vendor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "public class VendorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    private Menu menu;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * Creates a {@code VendorBuilder} with the default details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public VendorBuilder() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        menu \u003d new Menu();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * Initializes the VendorBuilder with the data of {@code vendorToCopy}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public VendorBuilder(Vendor vendorToCopy) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        name \u003d vendorToCopy.getName();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        phone \u003d vendorToCopy.getPhone();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        email \u003d vendorToCopy.getEmail();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        address \u003d vendorToCopy.getAddress();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(vendorToCopy.getTags());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        menu \u003d vendorToCopy.getMenu();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * Sets the {@code Name} of the {@code Vendor} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public VendorBuilder withName(String name) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Vendor} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public VendorBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * Sets the {@code Address} of the {@code Vendor} that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public VendorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * Sets the {@code Phone} of the {@code Vendor} that we are building."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public VendorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * Sets the {@code Email} of the {@code Vendor} that we are building."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public VendorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * Sets the {@code Name} of the {@code Vendor} that we are building."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public VendorBuilder withMenu(Menu menu) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        this.menu \u003d menu;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public Vendor build() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        return new Vendor(name, phone, email, address, tags, menu);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 3,
      "Ebolaeater": 105
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/VendorUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import seedu.address.model.vendor.Vendor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MorningLit"
        },
        "content": " * A utility class for Vendor."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "public class VendorUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * Returns an add command string for adding the {@code vendor}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public static String getAddCommand(Vendor vendor) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getVendorDetails(vendor);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * Returns the part of command string for the given {@code vendor}\u0027s details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public static String getVendorDetails(Vendor vendor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        sb.append(PREFIX_NAME + vendor.getName().fullName + \" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        sb.append(PREFIX_PHONE + vendor.getPhone().value + \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        sb.append(PREFIX_EMAIL + vendor.getEmail().value + \" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        sb.append(PREFIX_ADDRESS + vendor.getAddress().value + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        vendor.getTags().stream().forEach("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 13,
      "-": 26
    }
  }
]
