[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003ch1 align\u003d\"center\"\u003eInternHunter\u003c/h1\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    \u003ca href\u003d\"https://github.com/AY2021S1-CS2103T-T15-4/tp/actions\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        \u003cimg src\u003d\"https://github.com/AY2021S1-CS2103T-T15-4/tp/workflows/Java%20CI/badge.svg\" /\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    \u003c/a\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    \u003ca href\u003d\"https://codecov.io/gh/AY2021S1-CS2103T-T15-4/tp\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        \u003cimg src\u003d\"https://codecov.io/gh/AY2021S1-CS2103T-T15-4/tp/branch/master/graph/badge.svg\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    \u003c/a\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003cp align\u003d\"center\"\u003e\u003cimg src\u003d\"docs/images/Ui.png\" width\u003d\"100%\"/\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Welcome to **InternHunter**, a CLI-centric desktop application which aids university students in applying for tech"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "internships. It tracks and leverages on key metrics and information to create an optimal internship hunting experience."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "## Site Map"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- [User Guide](https://github.com/AY2021S1-CS2103T-T15-4/tp/blob/master/docs/UserGuide.md)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- [Developer Guide](https://github.com/AY2021S1-CS2103T-T15-4/tp/blob/master/docs/DeveloperGuide.md)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- [About Us](https://github.com/AY2021S1-CS2103T-T15-4/tp/blob/master/docs/AboutUs.md)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " ## Acknowledgements"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- This project was extended from AddressBook-Level3 project created by [SE-EDU initiative](https://se-education.org)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- Libraries Used: [JavaFX](https://github.com/openjdk/jfx), [Jackson](https://github.com/FasterXML/jackson),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "[JUnit5](https://github.com/junit-team/junit5)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "## Licence : [MIT](https://github.com/AY2021S1-CS2103T-T15-4/tp/blob/master/LICENSE)"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 27,
      "-": 1
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "AddressBook - Level 3 was developed by the [SE-EDU](https://se-education.org/docs/team.html) team. Our team was tasked"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "to build on top of this project to morph it to something new! We chose to build a internship hunting application,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "InternHunter, to help university students like us!"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "### Keane Chan Jun Yu"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003cimg src\u003d\"images/keanecjy.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "[[github](https://github.com/keanecjy)]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "[[portfolio](team/keanecjy.md)]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "* Responsibilities: Logic"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "### Sean Lum"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003cimg src\u003d\"images/seanjyjy.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "[[github](http://github.com/seanjyjy)]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "[[portfolio](team/seanjyjy.md)]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: UI"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "### Gan Wan Cheng Isaac"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "\u003cimg src\u003d\"images/orzymandias.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "[[github](http://github.com/orzymandias)] [[portfolio](team/orzymandias.md)]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "* Role: Team lead"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "* Responsibilities: Commons"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "### Shawn Ng Yong Kwang"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "\u003cimg src\u003d\"images/shawn-nyk.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "[[github](http://github.com/shawn-nyk)]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "[[portfolio](team/shawn-nyk.md)]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "* Responsibilities: Model"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "### Fidella Widjojo"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "\u003cimg src\u003d\"images/zoroarkdarkrai.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "[[github](http://github.com/zoroarkdarkrai)]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "[[portfolio](team/zoroarkdarkrai.md)]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "* Responsibilities: Storage"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 10,
      "orzymandias": 5,
      "ZoroarkDarkrai": 5,
      "-": 31,
      "seanjyjy": 5,
      "shawn-nyk": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "## Appendix A: Product Scope"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "* university students applying for tech internships"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "**Value proposition**: Improves your planning, confidence and readiness for tech-related internship applications by"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " improving your interview skills and search strategy."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "## Appendix B: User Stories"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "| Priority | As a …​    | I want to …​                                                   | So that I can…​                                                                   |"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "| -------- | ---------- | -------------------------------------------------------------- | --------------------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "| `* * *`  | new user   | see usage instructions                                         | refer to instructions when I forget how to use the app                            |"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "| `* * *`  | user       | get error feedback when a command fails                        | know what went wrong                                                              |"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "| `* * *`  | user       | maintain a list of company profiles                            | keep track of companies that I\u0027m interested in                                    |"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "| `* * *`  | user       | add a company profile                                          | keep track of companies that I\u0027m interested in                                    |"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "| `* * *`  | user       | delete a company profile                                       | remove company profiles that I no longer need / am no longer interested in        |"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "| `* * *`  | user       | edit a company profile                                         | keep my company profiles updated and accurate                                     |"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "| `* * *`  | user       | view a company profile                                         | see its details                                                                   |"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "| `* * *`  | user       | add an internship to a company profile                         | keep track of the internships that that company is offering                       |"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "| `* * *`  | user       | delete an internship from a company profile                    | remove erroneous / outdated entries                                               |"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "| `* * *`  | user       | edit an internship from a company profile                      | keep the list of internships that a company offers updated and accurate           |"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "| `* * *`  | user       | view a company’s internships when I view their profile         | see what internships they are offering                                            |"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "| `* * *`  | user       | maintain a list of my internship applications                  | keep track of them                                                                |"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "| `* * *`  | user       | add an internship application                                  | keep track of the internships that I have applied for                             |"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "| `* * *`  | user       | delete an internship application                               | remove internship applications that I no longer need / am no longer interested in |"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "| `* * *`  | user       | edit an internship application                                 | keep my internship applications updated and accurate                              |"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "| `* * *`  | user       | view an internship application                                 | see its details                                                                   |"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "| `* * *`  | user       | record and see an internship application\u0027s status              | keep track of them                                                                |"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "| `* * *`  | user       | save the dates of my upcoming interviews                       | keep track of them                                                                |"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "| `* * *`  | user       | maintain a user profile                                        | have an overview of my experience, skills and achievements                        |"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "| `* * *`  | user       | add information to my user profile                             | keep my user profile updated and accurate                                         |"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "| `* * *`  | user       | delete information from my user profile                        | keep my user profile updated and accurate                                         |"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "| `* * *`  | user       | edit information in my user profile                            | keep my user profile updated and accurate                                         |"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "| `* * *`  | user       | view information in my user profile                            | see its details                                                                   |"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "| `* *`    | user       | navigate the application easily through a clear user interface |                                                                                   |"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "| `* *`    | user       | get fast feedback from the app                                 |                                                                                   |"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "## Appendix C: Use Cases"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "(For all use cases below, the **System** is `InternHunter` and the **Actor** is the `user`)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "### Use case: UC01 - Add a company"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "#### MSS"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Precondition: User is on the Companies tab \u003cbr/\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "Guarantees: Addition of company is successful"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "1. User requests to add a company and provides details."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "2. InternHunter adds the company to the list of companies.\u003cbr/\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "#### Extensions"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " 1a. InternHunter detects an error in the input format. \u003cbr/\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "  1a1. InternHunter displays an error message and informs the user of the valid input format. \u003cbr/\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "  Use case resumes from step 1."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    \t\t"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "### Use case: UC02 - Delete a company"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "#### MSS"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Precondition: User is on the Companies tab and already has an existing list of companies \u003cbr/\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "Guarantees: Deletion of company is successful"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "1. User requests to delete a company."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "2. InternHunter removes the company from the list of companies.\u003cbr/\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "#### Extensions"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " 1a. InternHunter detects an error in the input format. \u003cbr/\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "  1a1. InternHunter displays an error message and informs the user of the valid input format. \u003cbr/\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "  Use case resumes from step 1."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " 1b. InternHunter detects an invalid index. \u003cbr/\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "  1b1. InternHunter displays an error message and informs the user that the index is out of bounds. \u003cbr/\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "  Use case resumes from step 1."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "### Use case: UC03 - Edit a company"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "##### MSS"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Precondition: User is on the Companies tab and already has an existing list of companies \u003cbr/\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "Guarantees: Editing of company is successful"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "1. User requests to edit the details of a company and provides details."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "2. InternHunter updates the details of the company. \u003cbr/\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "####  Extensions"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " 1a. InternHunter detects an error in the input format. \u003cbr/\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "  1a1. InternHunter displays an error message and informs the user of the valid input format. \u003cbr/\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "  Use case resumes from step 1."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " 1b. InternHunter detects an invalid index. \u003cbr/\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "  1b1. InternHunter displays an error message and informs the user that the index is out of bounds. \u003cbr/\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "  Use case resumes from step 1."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "### Use case: UC04 - View a company"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "##### MSS"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Precondition: User is on the Companies tab and already has an existing list of companies \u003cbr/\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "Guarantees: Viewing of company is successful"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "1. User requests to view a company."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "2. InternHunter displays the company.\u003cbr/\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "####  Extensions"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " 1a. InternHunter detects an error in the input format. \u003cbr/\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "  1a1. InternHunter displays an error message and informs the user of the valid input format. \u003cbr/\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "  Use case resumes from step 1."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " 1b. InternHunter detects an invalid index. \u003cbr/\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "  1b1. InternHunter displays an error message and informs the user that the index is out of bounds. \u003cbr/\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "  Use case resumes from step 1."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "### Use case: UC05 - Add an internship"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "#### MSS"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Precondition: User is on the Companies tab and already has an existing list of companies \u003cbr/\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "Guarantees: Addition of internship is successful"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "1.  User requests to add an internship to a company and provides the index and relevant details."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "2.  InternHunter adds the internship to the list of internships of the company. \u003cbr/\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "#### Extensions"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " 1a. InternHunter detects an error in the input format. \u003cbr/\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "  1a1. InternHunter displays an error message and informs the user of the valid input format. \u003cbr/\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "  Use case resumes from step 1."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " 1b. InternHunter detects an invalid index. \u003cbr/\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  1b1. InternHunter displays an error message and informs the user that the index is out of bounds. \u003cbr/\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  Use case resumes from step 1."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "### Use case: UC06 - Delete an internship"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "#### MSS"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Precondition: User is on the Companies tab and already has an existing list of internships in a company \u003cbr/\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "Guarantees: Deletion of internship is successful"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "1.  User requests to delete an internship of a company and provides the index."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "2.  InternHunter removes the internship from the list of internships in a company. \u003cbr /\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "#### Extensions"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " 1a. InternHunter detects an error in the input format. \u003cbr/\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "  1a1. InternHunter displays an error message and informs the user of the valid input format. \u003cbr/\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "  Use case resumes from step 1."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " 1b. InternHunter detects an invalid index. \u003cbr/\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "  1b1. InternHunter displays an error message and informs the user that the index is out of bounds. \u003cbr/\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "  Use case resumes from step 1."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "  "
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "### Use case: UC07 - Edit an internship"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "#### MSS"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Precondition: User is on the Companies tab and already has an existing list of internships in a company \u003cbr/\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "Guarantees: Editing of internship is successful"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "1.  User requests to edit the details of an internship and inputs the index and details."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "2.  InternHunter edits the details of the internship, and updates the list. \u003cbr /\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "#### Extensions"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " 1a. InternHunter detects an error in the input format. \u003cbr/\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "  1a1. InternHunter displays an error message and informs the user of the valid input format. \u003cbr/\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "  Use case resumes from step 1."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " 1b. InternHunter detects an invalid index. \u003cbr/\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "  1b1. InternHunter displays an error message and informs the user that the index is out of bounds. \u003cbr/\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "  Use case resumes from step 1."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "### Use case: UC08 - Add an application"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "#### MSS"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Precondition: User is on the Companies tab and already has an existing list of internships in a company \u003cbr/\u003e"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Guarantees: Adding of application is successful"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "1.  User requests to apply for an internship and provides the index and relevant details."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "2.  InternHunter adds the application to the list of applications and prompts the user to switch to the Applications"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "tab to view the newly added application. \u003cbr/\u003e"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "#### Extensions"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " 1a. InternHunter detects an error in the input format. \u003cbr /\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  1a1. InternHunter displays an error message and informs the user of the valid input format. \u003cbr /\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  Use case resumes from step 1."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " 1b. InternHunter detects an invalid index. \u003cbr /\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  1b1. InternHunter displays an error message and informs the user that the index is out of bounds. \u003cbr /\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  Use case resumes from step 1."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "### Use case: UC09 - Delete an application"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "#### MSS"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Precondition: User is on the Applications tab and already has an existing list of applications \u003cbr /\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Guarantees: Deletion of application is successful"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "1.  User requests to delete an application and provides the index."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "2.  InternHunter removes the application from the list of applications. \u003cbr /\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "#### Extensions"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " 1a. InternHunter detects an error in the input format. \u003cbr /\u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  1a1. InternHunter displays an error message and informs the user of the valid input format. \u003cbr /\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  Use case resumes from step 1."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " 1b. InternHunter detects an invalid index. \u003cbr /\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  1b1. InternHunter displays an error message and informs the user that the index is out of bounds. \u003cbr /\u003e"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "  Use case resumes from step 1."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "### Use case: UC10 - Edit an application"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "#### MSS"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Precondition: User is on the Applications tab and already has an existing list of applications \u003cbr /\u003e"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Guarantees: Editing of application is successful"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "1.  User requests to edit the details of an application and inputs the index and details."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "2.  InternHunter edits the details of this application and the list is updated accordingly. \u003cbr /\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "#### Extensions"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " 1a. InternHunter detects an error in the input format. \u003cbr /\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  1a1. InternHunter displays an error message and informs the user of the valid input format. \u003cbr /\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  Use case resumes from step 1."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " 1b. InternHunter detects an invalid index. \u003cbr /\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  1b1. InternHunter displays an error message and informs the user that the index is out of bounds. \u003cbr /\u003e"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "  Use case resumes from step 1."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "### Use case: UC11 - View an application"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "#### MSS"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Precondition: User is on the Applications tab and already has an existing list of applications \u003cbr /\u003e"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Guarantees: Viewing of application is successful"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "1.  User requests to view the details of an application and provides the index."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "2.  InternHunter shows the details of this application. \u003cbr /\u003e"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "#### Extensions"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " 1a. InternHunter detects an error in the input format. \u003cbr /\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  1a1. InternHunter displays an error message and informs the user of the valid input format. \u003cbr /\u003e"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  Use case resumes from step 1."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  "
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " 1b. InternHunter detects an invalid index. \u003cbr /\u003e"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  1b1. InternHunter displays an error message and informs the user that the index is out of bounds. \u003cbr /\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  Use case resumes from step 1."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "### Use case: UC12 - Add user profile item"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "#### MSS"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Precondition: User is on the Profile tab"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "Guarantees: Addition of user profile item is successful"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "1.  User requests to add a user profile item to the user profile and provides details."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "2.  InternHunter adds the user profile item to the user profile. \u003cbr /\u003e"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "#### Extensions"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " 1a. InternHunter detects an error in the input format. \u003cbr /\u003e"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  1a1. InternHunter displays an error message and informs the user of the valid input format. \u003cbr /\u003e"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  Use case resumes from step 1."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "### Use case: UC13 - Delete a user profile item "
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "#### MSS"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Precondition: User is on the Profile tab and already has an existing list of user profile items \u003cbr/\u003e"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "Guarantees: Deletion of user profile item is successful"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "1.  User requests to delete a user profile item from the user profile."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "2.  InternHunter removes the user profile item from the user profile. \u003cbr/\u003e"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "#### Extensions"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " 1a. InternHunter detects an error in the input format. \u003cbr/\u003e"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  1a1. InternHunter displays an error message and informs the user of the valid input format. \u003cbr/\u003e"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  Use case resumes from step 1."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " 1b. InternHunter detects an invalid index. \u003cbr/\u003e"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  1b1. InternHunter displays an error message and informs the user that the index is out of bounds. \u003cbr/\u003e"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  Use case resumes from step 1."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "### Use case: UC14 - Edit a user profile item"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "#### MSS"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Precondition: User is on the Profile tab and already has an existing list of user profile items \u003cbr/\u003e"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "Guarantees: Editing of user profile item is successful"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "1.  User requests to edit the details of a user profile item and provides details."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "2.  InternHunter edits the user profile item in the user profile. \u003cbr/\u003e"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "#### Extensions"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " 1a. InternHunter detects an error in the input format. \u003cbr/\u003e"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  1a1. InternHunter displays an error message and informs the user of the valid input format. \u003cbr/\u003e"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  Use case resumes from step 1."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " 1b. InternHunter detects an invalid index. \u003cbr/\u003e"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  1b1. InternHunter displays an error message and informs the user that the index is out of bounds. \u003cbr/\u003e"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  Use case resumes from step 1."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "### Use case: UC15 - View a user profile item"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "#### MSS"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Precondition: User is on the Profile tab and already has an existing list of user profile items \u003cbr/\u003e"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "Guarantees: Viewing of user profile item is successful"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "1.  User requests to view the details of a user profile item."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "2.  InternHunter shows the details of this user profile item. \u003cbr/\u003e"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    "
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "#### Extensions"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " 1a. InternHunter detects an error in the input format. \u003cbr/\u003e"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  1a1. InternHunter displays an error message and informs the user of the valid input format. \u003cbr/\u003e"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  Use case resumes from step 1."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " 1b. InternHunter detects an invalid index. \u003cbr/\u003e"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  1b1. InternHunter displays an error message and informs the user that the index is out of bounds. \u003cbr/\u003e"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  Use case resumes from step 1."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "### Use case: UC16 - Switch tabs"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "#### MSS"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "1.  User requests to switch the tab of the screen."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "2.  InternHunter switches to the requested tab. \u003cbr/\u003e"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "#### Extensions"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " 1a. InternHunter detects an error in the input format. \u003cbr/\u003e"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  1a1. InternHunter displays an error message and informs the user of the valid input format. \u003cbr/\u003e"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  Use case resumes from step 1."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "### Use case: UC17 - Get help"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "#### MSS"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "Guarantees: User will get directions to the user guide"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "1.  User requests to see the help window."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "2.  InternHunter displays help message directing user to user guide. \u003cbr/\u003e"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "### Use case: UC18 - Exit "
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "#### MSS"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "1.  User requests to exit InternHunter."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "2.  InternHunter prompts for confirmation."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "3.  User confirms intention to exit."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "4.  InternHunter exits. \u003cbr/\u003e"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "#### Extensions"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " 2a. User chooses to cancel the confirmation. \u003cbr/\u003e"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    "
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "## Appendix D: Non-Functional Requirements"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "* Should be for a single user i.e. (not a multi-user product)."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "* The data should be stored locally and should be in a human editable text file."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "* The software should work without requiring an installer."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "* Should work on any mainstream OS as long as it has Java 11 or above installed."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "* Should work on both 32-bit and 64-bit environment."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "* Should only use third-party frameworks or libraries which are free, open-source and have permissive license term and "
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "do not require installation by user of the software."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "* A user with above average typing speed for regular English text should be able to accomplish most of the tasks faster "
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "using commands than using the mouse."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "* Should be a result of evolving and morphing the given code base."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "* Should be developed in a breadth-first incremental manner over the project duration."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "## Appendix E: Glossary"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "* **OS**: Operating System"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 104,
      "ZoroarkDarkrai": 63,
      "orzymandias": 43,
      "-": 134,
      "shawn-nyk": 71,
      "seanjyjy": 9
    }
  },
  {
    "path": "docs/SettingUp.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Setting up and getting started"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up the project in your computer"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "First, **fork** this repo, and **clone** the fork into your computer."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to use Intellij IDEA (highly recommended):"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Verify the setup**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Run the `seedu.address.Main` and try a few commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   1. [Run the tests](Testing.md) to ensure they all pass."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "## Before writing code"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the coding style**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/intellijCodeStyle.html) to set up IDEA\u0027s coding style to match ours."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Set up CI**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Learn the design**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [AddressBook’s architecture](DeveloperGuide.md#architecture)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Do the tutorials**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   These tutorials will help you get acquainted with the codebase."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Tracing code](tutorials/TracingCode.md)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Removing fields](tutorials/RemovingFields.md)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Adding a new command](tutorials/AddRemark.md)"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 1,
      "-": 54
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "# InternHunter User Guide"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "## Table Of Contents"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "[1. Introduction](#introduction) \u003cbr /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " [1.1. What our app manages](#what-our-app-manages) \u003cbr /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "[2. Quick start](#quick-start) \u003cbr /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "[3. Features](#features) \u003cbr /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " [3.1. Company](#company) \u003cbr /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  [3.1.1. Adding a company: `add com`](#adding-a-company-add-com) \u003cbr /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  [3.1.2. Deleting a company: `delete com`](#deleting-a-company-delete-com) \u003cbr /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  [3.1.3. Editing a company: `edit com`](#editing-a-company-edit-com) \u003cbr /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  [3.1.4. Viewing a company: `view com`](#viewing-a-company-view-com) \u003cbr /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " [3.2. Internship](#internship) \u003cbr /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  [3.2.1. Adding an internship: `add int`](#adding-an-internship-add-int) \u003cbr /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  [3.2.2. Deleting an internship: `delete int`](#deleting-an-internship-delete-int) \u003cbr /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  [3.2.3. Editing an internship: `edit int`](#editing-an-internship-edit-int) \u003cbr /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " [3.3. Application](#application) \u003cbr /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  [3.3.1. Adding an application: `add app`](#adding-an-application-add-app) \u003cbr /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  [3.3.2. Deleting an application: `delete app`](#deleting-an-application-delete-app) \u003cbr /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  [3.3.3. Editing an application: `edit app`](#editing-an-application-edit-app) \u003cbr /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  [3.3.4. Viewing an application: `view app`](#viewing-an-application-view-app) \u003cbr /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " [3.4. Profile](#profile) \u003cbr /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  [3.4.1. Adding item to profile: `add me`](#adding-item-to-profile-add-me) \u003cbr /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  [3.4.2. Deleting item in profile: `delete me`](#deleting-item-in-profile-delete-me) \u003cbr /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  [3.4.3. Editing item in profile: `edit me`](#editing-item-in-profile-edit-me) \u003cbr /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  [3.4.4. Viewing item in profile: `view me`](#viewing-item-in-profile-view-me) \u003cbr /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " [3.5 General](#general) \u003cbr /\u003e "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  [3.5.1. Switching Tabs: `switch`](#switching-tabs-switch) \u003cbr /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  [3.5.2. Viewing Help: `help`](#viewing-help-help) \u003cbr /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  [3.5.3. Exiting the program: `exit`](#exiting-the-program-exit) \u003cbr /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "[4. Command Summary](#command-summary) \u003cbr /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "---"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "InternHunter is a CLI-centric desktop application which aids university students in applying for tech internships."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "It tracks and leverages on key metrics and information to create an optimal internship hunting experience."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "#### What our app manages"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "InternHunter allows the management of four data types:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Data type | Alias | Attributes | What it represents"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "----------|-------|------------|-------------------"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Company | com | company name, phone number, email, address, industry types, internships | A company offering internships"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Internship | int | company name, job title, period, wage, requirements | An internship offered by a company"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Application | app | internship, status, status date | An internship application that you applied for"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Profile Item | me | category, title, descriptors | An item in your profile"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "## Quick start"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "1. Download the latest `InternHunter.jar` from here."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "1. Copy the file to the folder you want to use as the _home folder_ for your AddressBook."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "1. Double-click the file to start the app or run `java -jar InternHunter.jar` from the terminal."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "1. The [Features](#features) available in the current version of InternHunter are listed below."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "* Commands that deal with Company, Internship, Application, and Profile can only be executed when you are on the appropriate tab in the app."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "The tab you must be on to execute a certain command is stated under each relevant section header in this guide."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  e.g. in `add com n/COMPANY_NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/INDUSTRY]...`, `COMPANY_NAME`, `PHONE_NUMBER`, `EMAIL`, `ADDRESS`, `INDUSTRY`,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  are parameters which can be used as `add com n/Google p/65218000 e/GoogleHire@gmail.com a/70 Pasir Panjang Rd, #03-71 t/Cloud Computing t/Artificial Industry`."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  e.g `add int INDEX j/JOB_TITLE [p/PERIOD] [w/WAGE] [r/REQUIREMENT]...` can be used as \u003cbr/\u003e `add int 1 j/Software Engineer` or"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  `add int 3 j/Web Developer r/React w/3000 r/HTML5`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "* Items with `...`​ after them can be used multiple times including zero times.\u003cbr\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  e.g. `[r/REQUIREMENT]...` can be used as `r/Rust`, `r/React native r/JavaScript` etc."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  e.g. if the command specifies `p/PERIOD w/WAGE`, `w/WAGE p/PERIOD` is also acceptable."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "* `INDEX` refers to the index of the item (Company, Application, or Profile Item) in its respective displayed list of items (follows one-based indexing) unless stated otherwise. \u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "### Company"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Note: You must be on the **Company** tab in order to execute these commands."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "#### Adding a company: `add com`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "Adds a company to your list of companies."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "Format: `add com n/COMPANY_NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/INDUSTRY]...`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "- `add com n/Google p/65218000 e/GoogleHires@gmail.com a/70 Pasir Panjang Rd, #03-71 t/Cloud Computing t/Artificial Intelligence`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "- `add com n/Garena a/201 Victoria St e/GarenaHires@gmail.com p/65093545`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "#### Deleting a company: `delete com`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "Deletes a company from your list of companies. All internships and applications associated with this company will also be deleted."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "Format: `delete com INDEX`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "- `delete com 5`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "#### Editing a company: `edit com`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "Edits a company in your list of companies."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "Format: `edit com INDEX [n/COMPANY_NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/INDUSTRY]...`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "- At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "- `edit com 1 n/Google Singapore e/GoogleIsHiring@gmail.com`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "- `edit com 2 p/61234567`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "#### Viewing a company: `view com`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "Selects a company in your list of companies to show in detail."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "Format: `view com INDEX`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "- `view com 3`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "### Internship"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Note: You must be on the **Company** tab in order to execute these commands."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "#### Adding an internship: `add int`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Adds an internship to a company."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Format: `add int INDEX j/JOB_TITLE [p/PERIOD] [w/WAGE] [r/REQUIREMENT]...`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- `add int 1 j/Software Engineer`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- `add int 3 j/Web Developer r/React w/3000 r/HTML5`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "#### Deleting an internship: `delete int`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Deletes an internship from a company. The application (if any) made with this internship will also be deleted."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Format: `delete int INDEX i/INDEX` "
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- `INDEX` refers to the index of the company in the company list, and `i/INDEX` refers to the index of the"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "internship in the company’s list of internships."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- `delete int 3 i/2`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "#### Editing an internship: `edit int`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Edits an internship from a company."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Format:  `edit int INDEX i/INDEX [j/JOB_TITLE] [p/PERIOD] [w/WAGE] [r/REQUIREMENT]...`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- `INDEX` refers to the index of the company in the company list, and `i/INDEX` refers to the index of the"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "internship in the company’s list of internships."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- `edit int 7 i/1 r/Java r/Python w/2000`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- `edit int 4 i/4 j/ML Engineer`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "### Application"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Note: You must be on the **Company** tab in order to execute the add app command. To execute all other commands of type Application, you"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "must be on the **Application** tab."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Each application comes with a `STATUS` and `STATUS_DATE` field that indicates the date that the status was set/changed."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Valid `STATUS` specifiers:"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- `applied`"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- `interview`"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- `waiting`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- `rejected`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- `offered`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- `accepted`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Valid `STATUS_DATE` formats:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- d-M-yy HHmm"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    - e.g. `23-12-19 2230`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- d-M-yy"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    - e.g. `23-12-19`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    - Time will be taken as 2359"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "#### Adding an application: `add app`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Selects an internship from a company and adds it to your list of applications. If unspecified, the application’s"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "`STATUS` will be `Applied`, and it’s `STATUS_DATE` will be set as today’s date."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Format: `add app INDEX i/INDEX [s/STATUS] [d/STATUS_DATE]`"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- Where `INDEX` refers to the index of the company in the company list, and `i/INDEX` refers to the index of the"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "internship in the company’s list of internships."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- `add app 1 i/2`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- `add app 1 i/2 s/waiting d/23-12-20`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "#### Deleting an application: `delete app`"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Deletes an application from your list of applications."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " "
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Format: `delete app INDEX` "
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- `delete app 3`"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "#### Editing an application: `edit app`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Edits an application in your list of applications."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Format:  `edit app INDEX [s/STATUS] [d/STATUS_DATE]`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- `edit app 5 s/offered`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- `edit app 2 s/waiting d/10-11-20`"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "#### Viewing an application: `view app`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Selects an application in the list of applications to show in detail."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " "
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Format: `view app INDEX`"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- `view app 3`"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "### Profile"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Note: You must be on the **Profile** tab in order to execute these commands."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Your profile can contain 3 categories of information."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "Valid `CATEGORY` specifiers:"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "- `achievement`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "- `experience`"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "- `skill`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "Each profile item (bit of information) also contains a `TITLE` that describes the item, and you can optionally "
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "add additional `DESCRIPTOR`s to further describe the item in point form."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "#### Adding item to profile: `add me`"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Adds experience, skills or achievements descriptors to your profile."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "Format: `add me c/CATEGORY t/TITLE [d/DESCRIPTOR]...`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "* Category specifies a category which can be either experience, skills or achievement."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "* `add me c/experience t/Internship at Govtech d/Implemented automate testing "
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "using TravisCI d/Implemented dashboard to track code coverage`"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "* `add me c/achievement t/special recognition in Hack n Roll!`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "* `add me c/skill t/HTML d/Learn how to create divs`"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "#### Deleting item in profile: `delete me`"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Deletes experience, skills or achievements descriptors from your profile."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "Format: `delete me INDEX`"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "* `delete me 2`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "#### Editing item in profile: `edit me`"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Edit the experience, skills or achievements descriptors of your profile."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "Format: `edit me INDEX [c/CATEGORY] [t/TITLE] [d/DESCRIPTORS]`"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "* `edit me 2 c/skill t/CSS d/learnt how to use flexbox`"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "* `edit me 4 c/achievement`"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "#### Viewing item in profile: `view me`"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Selects an item in the profile to show in detail."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "Format: `view me INDEX`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "* `view me 3`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "### General"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "#### Switching Tabs: `switch`"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "Switches between tabs."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "Format: `switch TYPE`"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "There are three `TYPE`s:"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "* `com`"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "* `app`"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "* `me`"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "`com` refers to Company tab, `app` refers to Application tab, `me` refers to Profile tab."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "Example: "
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "* `switch me`"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "#### Viewing Help: `help`"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "Displays a link to the InternHunter user guide."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "#### Exiting the Program: `exit`"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "Shows an exit confirmation dialog."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "## Command summary"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "Type            | Action     | Format"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "----------------|------------|------------------"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "**Company**     | **Add**    | `add com n/COMPANY_NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/INDUSTRY]...`"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "\u0026nbsp;          | **Delete** | `delete com INDEX`"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "\u0026nbsp;          | **Edit**   | `edit com INDEX [n/COMPANY_NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/INDUSTRY]...`"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "\u0026nbsp;          | **View**   | `view com INDEX`"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "**Internship**  | **Add**    | `add int INDEX j/JOB_TITLE [p/PERIOD] [w/WAGE] [r/REQUIREMENT]...`"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u0026nbsp;          | **Delete** | `delete int INDEX i/INDEX`"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "\u0026nbsp;          | **Edit**   | `edit int INDEX i/INDEX [j/JOB_TITLE] [p/PERIOD] [w/WAGE] [r/REQUIREMENT]...`"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "**Application** | **Add**    | `add app INDEX i/INDEX [s/STATUS] [d/STATUS_DATE]`"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "\u0026nbsp;          | **Delete** | `delete app INDEX`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "\u0026nbsp;          | **Edit**   | `edit app INDEX [s/STATUS] [d/STATUS_DATE]`"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "\u0026nbsp;          | **View**   | `view app INDEX`"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "**Profile**     | **Add**    | `add me c/CATEGORY t/TITLE [d/DESCRIPTOR]...`"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "\u0026nbsp;          | **Delete** | `delete me INDEX`"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u0026nbsp;          | **Edit**   | `edit me INDEX [c/CATEGORY] [t/TITLE] [d/DESCRIPTOR]...`"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "\u0026nbsp;          | **View**   | `view me INDEX`"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "**General**     | **Switch** | `switch TYPE`"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "\u0026nbsp;          | **Help**   | `help`"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "\u0026nbsp;          | **Exit**   | `exit`"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 69,
      "orzymandias": 25,
      "ZoroarkDarkrai": 31,
      "-": 110,
      "seanjyjy": 82,
      "shawn-nyk": 35
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "[Readme link](../README.md)"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 1
    }
  },
  {
    "path": "docs/team/keanecjy.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "title: Keane Chan Jun Yu - Project Portfolio"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "## Project: InternHunter"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "InternHunter is a CLI-centric desktop application which aids university students in applying for tech internships."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "It tracks and leverages on key metrics and information to create an optimal internship hunting experience."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "## Summary of contributions"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "* **New Feature**: "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "* **New Feature**:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "## Other contributions"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  * PRs reviewed (with non-trivial review comments):"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  * Contributed to forum discussions: [#236](https://github.com/nus-cs2103-AY2021S1/forum/issues/236),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  * Questions on forum: [#173](https://github.com/nus-cs2103-AY2021S1/forum/issues/173)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "## Contributions to the User Guide"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "## Contributions to the Developer Guide"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "   "
      }
    ],
    "authorContributionMap": {
      "keanecjy": 38,
      "ZoroarkDarkrai": 4
    }
  },
  {
    "path": "docs/team/orzymandias.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "title: Gan Wan Cheng Isaac - Project Portfolio"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "## Project: InternHunter"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "InternHunter is a CLI-centric desktop application which aids university students in applying for tech internships."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "It tracks and leverages on key metrics and information to create an optimal internship hunting experience."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "## Summary of contributions"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "* New Feature:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "* New Feature:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "* Code contributed: [RepoSense link]()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "  * PRs reviewed (with non-trivial review comments):"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "  * Contributed to forum discussions:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "## Contributions to the User Guide"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "## Contributions to the Developer Guide"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 4,
      "orzymandias": 38
    }
  },
  {
    "path": "docs/team/seanjyjy.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "title: Lum Jian Yang Sean - Project Portfolio"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "## Project: InternHunter"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "InternHunter is a CLI-centric desktop application which aids university students in applying for tech internships."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "It tracks and leverages on key metrics and information to create an optimal internship hunting experience."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "## Summary of contributions"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "* New Feature: "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "* New Feature:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "* Code contributed: [RepoSense link]()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "## Other contributions"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "* Project management:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "* Enhancements to existing features:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "* Community:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  * Contributed to forum discussions:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "* Tools:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "## Contributions to the User Guide"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "## Contributions to the Developer Guide"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 4,
      "seanjyjy": 37
    }
  },
  {
    "path": "docs/team/shawn-nyk.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "title: Shawn Ng Yong Kwang - Project Portfolio"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "## Project: InternHunter"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "InternHunter is a CLI-centric desktop application which aids university students in applying for tech internships."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "It tracks and leverages on key metrics and information to create an optimal internship hunting experience."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "## Summary of contributions"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "_(to be filled in along the course of the project)_"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 4,
      "shawn-nyk": 13
    }
  },
  {
    "path": "docs/team/zoroarkdarkrai.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "title: Fidella Widjojo - Project Portfolio"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "## Project: InternHunter"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "InternHunter is a CLI-centric desktop application which aids university students in applying for tech internships."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "It tracks and leverages on key metrics and information to create an optimal internship hunting experience."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "## Summary of contributions"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "* **New Feature**: "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "* **New Feature**:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "## Other contributions"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " * Setup the team organization and repository."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "  * Contributed to forum discussions: "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "  * Questions on forum:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "## Contributions to the User Guide"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "## Contributions to the Developer Guide"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 43
    }
  },
  {
    "path": "docs/tutorials/AddRemark.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Adding a command\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s walk you through the implementation of a new command — `remark`."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Create a new `remark` command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Changes the remark of an existing person in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "### Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "### Run the application"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "![Output displayed](../images/add-remark/RemarkHello.png)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "## Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "## Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` to parse input from the user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "### Make the command accept parameters"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param remark of the person to be updated to"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "### Parse user input"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package. The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentTokenizer.java`:**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentMultimap.java`:**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "**`DeleteCommandParser.java`:**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommandParser.java`:**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508)."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## Add `Remark` to the model"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of person data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "### Add a new `Remark` class"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "Create a new `Remark` in `seedu.address.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "validation."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "### Make use of `Remark`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "## Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each person."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Simply add the following to [`seedu.address.ui.cards.Card`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe)."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonListCard.fxml`:**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "That’s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "![$remark shows up in each entry](../images/add-remark/$Remark.png)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "## Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "### Modify `Person`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "### Update other usages of `Person`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "## Updating Storage"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "to see what the changes entail."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "## Finalizing the UI"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    remark.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "![The remark label is bound properly!](../images/add-remark/RemarkBound.png)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "## Putting everything together"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "### Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "                personToEdit.getAddress(), remark, personToEdit.getTags());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "![Congratulations!](../images/add-remark/RemarkComplete.png)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing tests"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "### Automatically generating tests"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is `methodName_testScenario_expectedResult`. An example would be"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "`execute_filteredList_success`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "![Creating a test for `execute`.](../images/add-remark/CreateTest.png)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9)."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      }
    ],
    "authorContributionMap": {
      "-": 393,
      "seanjyjy": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.application.ApplicationItem;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.company.CompanyItem;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.profile.ProfileItem;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.JsonItemListStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.ListStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.application.JsonAdaptedApplicationItem;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.company.JsonAdaptedCompanyItem;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.person.JsonAdaptedPerson;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.profile.JsonAdaptedProfileItem;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing InternHunter ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        config \u003d MainAppUtil.initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        UserPrefs userPrefs \u003d MainAppUtil.initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        ListStorage\u003cPerson, JsonAdaptedPerson\u003e addressBookStorage \u003d new JsonItemListStorage\u003c\u003e("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                userPrefs.getAddressBookFilePath(), Person.class, JsonAdaptedPerson.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        ListStorage\u003cApplicationItem, JsonAdaptedApplicationItem\u003e applicationItemListStorage \u003d new JsonItemListStorage\u003c\u003e("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                userPrefs.getApplicationItemListFilePath(), ApplicationItem.class, JsonAdaptedApplicationItem.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        ListStorage\u003cCompanyItem, JsonAdaptedCompanyItem\u003e companyItemListStorage \u003d new JsonItemListStorage\u003c\u003e("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                userPrefs.getCompanyItemListFilePath(), CompanyItem.class, JsonAdaptedCompanyItem.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        ListStorage\u003cProfileItem, JsonAdaptedProfileItem\u003e profileItemListStorage \u003d new JsonItemListStorage\u003c\u003e("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                userPrefs.getProfileItemListFilePath(), ProfileItem.class, JsonAdaptedProfileItem.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, applicationItemListStorage,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                companyItemListStorage, profileItemListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        MainAppUtil.initLogging(config);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        model \u003d MainAppUtil.initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        logger.info(\"Starting InternHunter \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping InternHunter ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 27,
      "-": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/MainAppUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.application.ApplicationItem;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.company.CompanyItem;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.internship.InternshipItem;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.internship.exceptions.InconsistentInternshipException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ItemList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ReadOnlyItemList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.profile.ProfileItem;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.ListStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.item.JsonAdaptedItem;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " * A collection of utility functions for the MainApp."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "public class MainAppUtil {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainAppUtil.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Gets the initial item list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @param itemListStorage storage of the item list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @param \u003cT\u003e             type of the item."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @param \u003cU\u003e             type of the json adapted item."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @return initial item list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public static \u003cT extends Item, U extends JsonAdaptedItem\u003e ReadOnlyItemList\u003cT\u003e initItemList("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            ListStorage\u003cT, U\u003e itemListStorage) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        Optional\u003cReadOnlyItemList\u003cT\u003e\u003e itemListOptional;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        ReadOnlyItemList\u003cT\u003e initialItemListData;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            itemListOptional \u003d itemListStorage.readItemList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            if (itemListOptional.isEmpty()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                //to do more specific logging"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample item list\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            //to do sample data"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            initialItemListData \u003d itemListOptional.orElse(new ItemList\u003c\u003e());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty item list\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            initialItemListData \u003d new ItemList\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty item list\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            initialItemListData \u003d new ItemList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return initialItemListData;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Matches internships in the application list with the ones in the company list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @param applicationItemList list of application items."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @param companyItemList     list of company items."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @throws InconsistentInternshipException an application has an internship"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *                                         that does not exist in any company\u0027s list of internships."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private static void matchInternships(ReadOnlyItemList\u003cApplicationItem\u003e applicationItemList,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            ReadOnlyItemList\u003cCompanyItem\u003e companyItemList) throws InconsistentInternshipException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        for (ApplicationItem applicationItem : applicationItemList.getItemList()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            final InternshipItem applicationInternshipItem \u003d applicationItem.getInternshipItem();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            final Optional\u003cInternshipItem\u003e correctInternshipItem \u003d companyItemList.getItemList().stream()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                    .map(CompanyItem::getInternships).reduce(new ArrayList\u003c\u003e(), (x, y) -\u003e {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                        x.addAll(y);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                        return x;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                    }).stream().filter(companyInternshipItem -\u003e companyInternshipItem.equals(applicationInternshipItem))"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                    .findAny();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            if (correctInternshipItem.isEmpty()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                applicationItemList.getItemList().removeAll();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                companyItemList.getItemList().removeAll();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                throw new InconsistentInternshipException();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            //Changes the current application item with the one with the correct internship object."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            applicationItemList.getItemList().remove(applicationItem);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            applicationItemList.getItemList().add(new ApplicationItem(correctInternshipItem.get(),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                    applicationItem.getStatus(), applicationItem.getStatusDate()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public static Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        ReadOnlyItemList\u003cPerson\u003e addressBook \u003d initItemList(storage.getAddressBookStorage());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        ReadOnlyItemList\u003cCompanyItem\u003e companyItemList \u003d initItemList(storage.getCompanyItemListStorage());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        ReadOnlyItemList\u003cApplicationItem\u003e applicationItemList \u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                initItemList(storage.getApplicationItemListStorage());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        ReadOnlyItemList\u003cProfileItem\u003e profileItemList \u003d initItemList(storage.getProfileItemListStorage());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            matchInternships(applicationItemList, companyItemList);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        } catch (InconsistentInternshipException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            logger.warning(\"Applications\u0027 internships are not matched with the ones in the companies\u0027 lists.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return new ModelManager(addressBook, companyItemList, applicationItemList, profileItemList, userPrefs);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public static void initLogging(Config config) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public static Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public static UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 196
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 743;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 932;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the default height, width and position."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the specified height, width and position."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 77,
      "seanjyjy": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /** AB3 messages */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // To remove"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /** Shared messages */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String MESSAGE_INVALID_ITEM_DISPLAYED_INDEX \u003d \"The %s index provided is invalid!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String MESSAGE_WRONG_TAB \u003d \"You must be on the %s tab in order to execute this command!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ITEM \u003d \"This %s already exists in InternHunter\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String MESSAGE_DELETED_ITEM \u003d \"Deleted %1$s: %2$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static final String MESSAGE_INVALID_ITEM_TYPE \u003d \"Item type has to be either \u0027com\u0027, \u0027int\u0027, \u0027app\u0027 or \u0027me\u0027\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 7,
      "-": 13,
      "shawn-nyk": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final int zeroBasedIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 3,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.JsonSerializableItemList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.item.JsonAdaptedItem;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    static \u003cT extends Item, U extends JsonAdaptedItem\u003e JsonSerializableItemList\u003cT, U\u003e deserializeObjectFromJsonFile("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            Path jsonFile, Class\u003cT\u003e contentClass,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            Class\u003cU\u003e jsonClass)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), contentClass, jsonClass);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath                   cannot be null."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * This method is used to circumvent Classnot allowing parameterized type."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @param filePath     cannot be null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @param contentClass Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @param jsonClass    the json class of contentClass."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public static \u003cT extends Item, U extends JsonAdaptedItem\u003e Optional\u003cJsonSerializableItemList\u003cT, U\u003e\u003e readJsonFile("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            Path filePath, Class\u003cT\u003e contentClass, Class\u003cU\u003e jsonClass) throws DataConversionException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        JsonSerializableItemList\u003cT, U\u003e jsonFile;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, contentClass, jsonClass);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public static \u003cT extends Item, U extends JsonAdaptedItem\u003e JsonSerializableItemList\u003cT, U\u003e fromJsonString("
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            String json, Class\u003cT\u003e contentClass, Class\u003cU\u003e jsonClass) throws IOException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return objectMapper.readValue(json, objectMapper.getTypeFactory().constructParametricType("
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                JsonSerializableItemList.class, contentClass, jsonClass));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e      The generic type to create an instance of"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 57,
      "-": 142
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Converts a string to title case."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param string String input."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Title case representation of string."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static String toTitleCase(String string) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assert string.length() \u003e 1;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        char firstLetter \u003d string.charAt(0);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String remaining \u003d string.substring(1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return Character.toUpperCase(firstLetter) + remaining.toLowerCase();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 16,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/TabUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.APPLICATION_ALIAS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.COMPANY_ALIAS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.PROFILE_ALIAS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * todo javadocs"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class TabUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String MESSAGE_INVALID_TAB \u003d \"Tab name should be either com, app or me\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Takes in a {@code tab} and converts the {@code tab} into it\u0027s {@code TabName}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static TabName getSwitchTabName(String tab) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        TabName tabName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        switch (tab) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case COMPANY_ALIAS:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            tabName \u003d TabName.COMPANY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case APPLICATION_ALIAS:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            tabName \u003d TabName.APPLICATION;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case PROFILE_ALIAS:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            tabName \u003d TabName.PROFILE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_TAB);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return tabName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Takes in a {@code tab} and checks if there is a tab."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static boolean isEmptyTab(String tab) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return tab.length() \u003c\u003d 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ReadOnlyItemList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    ReadOnlyItemList\u003cPerson\u003e getAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Returns the current tab of InternHunter."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    TabName getTabName();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets the current tab of InternHunter."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    void setTabName(TabName tabName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 2,
      "-": 48,
      "seanjyjy": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.parser.MainParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ReadOnlyItemList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final MainParser mainParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        mainParser \u003d new MainParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        Command command \u003d mainParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            storage.getAddressBookStorage().saveItemList(model.getAddressBook().getUnfilteredItemList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public ReadOnlyItemList\u003cPerson\u003e getAddressBook() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return model.getAddressBook().getUnfilteredItemList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return model.getAddressBook().getFilteredItemList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return model.getInternHunterFilePath();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public TabName getTabName() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return model.getTabName();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void setTabName(TabName tabName) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        model.setTabName(tabName);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 4,
      "ZoroarkDarkrai": 6,
      "orzymandias": 1,
      "-": 71,
      "seanjyjy": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ItemList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        model.getAddressBook().setItemList(new ItemList\u003c\u003e());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 2,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private final boolean isShowHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private final boolean isExit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /** The application should switch tab. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private final boolean isSwitchTab;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean isShowHelp, boolean isExit, boolean isSwitchTab) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.isShowHelp \u003d isShowHelp;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.isExit \u003d isExit;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.isSwitchTab \u003d isSwitchTab;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this(feedbackToUser, false, false, false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return isShowHelp;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public boolean isSwitchTab() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return isSwitchTab;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \u0026\u0026 isShowHelp \u003d\u003d otherCommandResult.isShowHelp"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \u0026\u0026 isExit \u003d\u003d otherCommandResult.isExit"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \u0026\u0026 isSwitchTab \u003d\u003d otherCommandResult.isSwitchTab;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return Objects.hash(feedbackToUser, isShowHelp, isExit, isSwitchTab);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 60,
      "seanjyjy": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting InternHunter as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 16,
      "seanjyjy": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        model.getAddressBook().updateFilteredItemList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                        model.getAddressBook().getFilteredItemList().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 3,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "seanjyjy": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import static seedu.address.model.FilterableItemList.PREDICATE_SHOW_ALL_ITEMS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        model.getAddressBook().updateFilteredItemList(PREDICATE_SHOW_ALL_ITEMS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 2,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SwitchCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Switch the screen to a a certain tab."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class SwitchCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"switch\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        + \": Switch to the desired tab.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        + \"Parameters: Tab name.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" com\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public final String sameScreenText;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public final String switchedScreenText;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private final TabName tabName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates a SwitchCommand to switch {@code tabName}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public SwitchCommand(TabName tabName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.tabName \u003d tabName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        sameScreenText \u003d String.format(\"Already in %s tab\", capitalizeFirstLetterOnly(tabName.toString()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        switchedScreenText \u003d String.format(\"Switching to %s tab\", capitalizeFirstLetterOnly(tabName.toString()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        TabName currentTab \u003d model.getTabName();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String resultMessage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (tabName.equals(currentTab)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            resultMessage \u003d sameScreenText;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            resultMessage \u003d switchedScreenText;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            model.setTabName(tabName);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return new CommandResult(resultMessage, false, false, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Capitalize only the first letter of {@code string}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private String capitalizeFirstLetterOnly(String string) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String firstLetter \u003d string.substring(0, 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String rest \u003d string.substring(1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return firstLetter + rest.toLowerCase();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            || (other instanceof SwitchCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u0026\u0026 tabName.equals(((SwitchCommand) other).tabName)); // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/add/AddApplicationCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.logic.commands.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_ITEM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.commands.util.CommandUtil.getCommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.commands.util.CommandUtil.getInternshipFromCompany;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ApplicationCliSyntax.PREFIX_STATUS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ApplicationCliSyntax.PREFIX_STATUS_DATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ItemCliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.util.ItemUtil.APPLICATION_ALIAS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.APPLICATION_NAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.FilterableItemList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.application.ApplicationItem;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.application.Status;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.application.StatusDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.internship.InternshipItem;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Adds an application to the Application list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class AddApplicationCommand extends AddCommandAbstract {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + APPLICATION_ALIAS + \": Adds an application to \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"InternHunter.\\nParameters: \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"INDEX \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            + PREFIX_INDEX + \"INDEX \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            + \"[\" + PREFIX_STATUS + \"STATUS] \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            + \"[\" + PREFIX_STATUS_DATE + \"STATUS_DATE]\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            + PREFIX_INDEX + \"2 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            + PREFIX_STATUS + \"waiting \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            + PREFIX_STATUS_DATE + \"23-12-20\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New application added: %s\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"Type in \u0027switch app\u0027 to see the newly added application!\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final Index companyIndex;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final Index internshipIndex;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final Status status;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final StatusDate statusDate;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Creates an AddApplicationCommand to add the specified {@code ApplicationItem}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public AddApplicationCommand(Index companyIndex, Index internshipIndex, Status status, StatusDate statusDate) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireAllNonNull(companyIndex, internshipIndex, status, statusDate);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.companyIndex \u003d companyIndex;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.internshipIndex \u003d internshipIndex;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.statusDate \u003d statusDate;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @return feedback message of the operation result for display."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        InternshipItem internshipItem \u003d getInternshipFromCompany(model, companyIndex, internshipIndex);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        ApplicationItem applicationItem \u003d new ApplicationItem(internshipItem, status, statusDate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        FilterableItemList\u003cApplicationItem\u003e applicationList \u003d model.getApplicationList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (applicationList.hasItem(applicationItem)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DUPLICATE_ITEM, APPLICATION_NAME));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        applicationList.addItem(applicationItem);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return getCommandResult(model, String.format(MESSAGE_SUCCESS, applicationItem),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                TabName.APPLICATION);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String getItemType() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return APPLICATION_NAME;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (!(other instanceof AddApplicationCommand)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        AddApplicationCommand otherAddApplicationCommand \u003d (AddApplicationCommand) other;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return companyIndex.equals(otherAddApplicationCommand.companyIndex)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                \u0026\u0026 internshipIndex.equals(otherAddApplicationCommand.internshipIndex)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                \u0026\u0026 status.equals(otherAddApplicationCommand.status)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                \u0026\u0026 statusDate.equals(otherAddApplicationCommand.statusDate);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 95,
      "shawn-nyk": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/add/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "package seedu.address.logic.commands.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ItemCliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ItemCliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ItemCliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ItemCliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ItemCliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "public class AddCommand extends AddCommandAbstract {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (model.getAddressBook().hasItem(toAdd)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        model.getAddressBook().addItem(toAdd);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public String getItemType() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return \"person\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 13,
      "ZoroarkDarkrai": 2,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/add/AddCommandAbstract.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "package seedu.address.logic.commands.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " * Represents an Add Command for Items."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "public abstract class AddCommandAbstract extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    //todo Update Message Usage to standardised format"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \": Adds a company, internship, application or profile item to InternHunter.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"Parameters: ITEM_TYPE DETAILS\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"Note: Valid ITEM_TYPEs are \u0027com\u0027, \u0027int\u0027, \u0027app\u0027 or \u0027me\u0027. \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"Each ITEM_TYPE requires its own set of details.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            + \"int \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"DETAILS\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Obtains the name of item associated with Add Command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @return Item name."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public abstract String getItemType();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 22,
      "shawn-nyk": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/add/AddCompanyCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package seedu.address.logic.commands.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_ITEM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.commands.util.CommandUtil.getCommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.CompanyCliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.CompanyCliSyntax.PREFIX_COMPANY_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.CompanyCliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.CompanyCliSyntax.PREFIX_INDUSTRY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.CompanyCliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.util.ItemUtil.COMPANY_ALIAS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.util.ItemUtil.COMPANY_NAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.company.CompanyItem;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * Adds a Company to the Model\u0027s Company list. todo javadocs (shawn)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class AddCompanyCommand extends AddCommandAbstract {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + COMPANY_ALIAS + \": Adds a company to \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"InternHunter.\\nParameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + PREFIX_COMPANY_NAME + \"NAME \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"[\" + PREFIX_INDUSTRY + \"INDUSTRY_TYPE]...\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + COMPANY_ALIAS + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + PREFIX_COMPANY_NAME + \"Google \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + PREFIX_PHONE + \"65218000 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + PREFIX_EMAIL + \"GoogleHires@gmail.com \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + PREFIX_ADDRESS + \"70 Pasir Panjang Rd, #03-71 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + PREFIX_INDUSTRY + \"Cloud Computing \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + PREFIX_INDUSTRY + \"Artificial Intelligence\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New company added: %1$s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private final CompanyItem toAdd;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Creates an AddCompanyCommand to add the specified {@code CompanyItem}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public AddCompanyCommand(CompanyItem company) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        requireNonNull(company);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        toAdd \u003d company;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (model.getCompanyList().hasItem(toAdd)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DUPLICATE_ITEM, COMPANY_NAME));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        model.getCompanyList().addItem(toAdd);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return getCommandResult(model, String.format(MESSAGE_SUCCESS, toAdd), TabName.COMPANY);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                || (other instanceof AddCompanyCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCompanyCommand) other).toAdd));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String getItemType() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return COMPANY_NAME;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/add/AddInternshipCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "package seedu.address.logic.commands.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.InternshipCliSyntax.PREFIX_JOB_TITLE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.InternshipCliSyntax.PREFIX_PERIOD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.InternshipCliSyntax.PREFIX_REQUIREMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.InternshipCliSyntax.PREFIX_WAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.INTERNSHIP_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "public class AddInternshipCommand extends AddCommandAbstract {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New internship added: %1$s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    // Todo: Fill Message Usage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an internship to Internhunter. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            + PREFIX_JOB_TITLE + \"TITLE \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            + \"[\" + PREFIX_PERIOD + \"WAGE]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            + \"[\" + PREFIX_WAGE + \"WAGE]...\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            + \"[\" + PREFIX_REQUIREMENT + \"REQUIREMENT]...\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            + PREFIX_JOB_TITLE + \"Software Engineer\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            + PREFIX_REQUIREMENT + \"React\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            + PREFIX_REQUIREMENT + \"Vue\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_INTERNSHIP \u003d \"This internship already exists in Internhunter\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    private final String toAdd;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Internship}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public AddInternshipCommand(String internshipItem) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        requireNonNull(internshipItem);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        toAdd \u003d internshipItem;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public String getItemType() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return INTERNSHIP_NAME;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 2,
      "orzymandias": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/add/AddProfileCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "package seedu.address.logic.commands.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_ITEM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.commands.util.CommandUtil.getCommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ProfileCliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ProfileCliSyntax.PREFIX_DESCRIPTORS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ProfileCliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.model.util.ItemUtil.PROFILE_ALIAS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.model.util.ItemUtil.PROFILE_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.profile.ProfileItem;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " * Adds a Profile Item to the Model\u0027s Profile list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "public class AddProfileCommand extends AddCommandAbstract {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + PROFILE_ALIAS"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            + \": Adds a profile item to \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            + \"InternHunter.\\nParameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            + PREFIX_TITLE + \"TITLE \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            + PREFIX_CATEGORY + \"CATEGORY \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTORS + \"DESCRIPTOR]...\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + PROFILE_ALIAS + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            + PREFIX_TITLE + \"Learn HTML \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            + PREFIX_CATEGORY + \"skill \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            + PREFIX_DESCRIPTORS + \"Learn how to use div and classes. \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            + PREFIX_DESCRIPTORS + \"Learn how to inject javascript. \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New profileItem added: %1$s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    private final ProfileItem toAdd;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Creates an AddCommand to add the specified {@code ProfileItem}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public AddProfileCommand(ProfileItem profileItem) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        requireNonNull(profileItem);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        toAdd \u003d profileItem;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        if (model.getProfileList().hasItem(toAdd)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DUPLICATE_ITEM, PROFILE_NAME));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        model.getProfileList().addItem(toAdd);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return getCommandResult(model, String.format(MESSAGE_SUCCESS, toAdd), TabName.PROFILE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                || (other instanceof AddProfileCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddProfileCommand) other).toAdd));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public String getItemType() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return PROFILE_NAME;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/delete/DeleteApplicationCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.logic.commands.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.APPLICATION_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.application.ApplicationItem;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Deletes the application from the Application list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class DeleteApplicationCommand extends DeleteCommandAbstract {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public DeleteApplicationCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        List\u003cApplicationItem\u003e lastShownList \u003d model.getApplicationList().getFilteredItemList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throw new CommandException(String.format(Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX, APPLICATION_NAME));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        ApplicationItem applicationToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        model.getApplicationList().deleteItem(applicationToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        model.setTabName(TabName.APPLICATION);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return new CommandResult(String.format(Messages.MESSAGE_DELETED_ITEM, APPLICATION_NAME, applicationToDelete));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String getItemType() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return APPLICATION_NAME;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                || (other instanceof DeleteApplicationCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteApplicationCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/delete/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "package seedu.address.logic.commands.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "public class DeleteCommand extends DeleteCommandAbstract {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getAddressBook().getFilteredItemList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        model.getAddressBook().deleteItem(personToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public String getItemType() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return \"person\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 8,
      "ZoroarkDarkrai": 2,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/delete/DeleteCommandAbstract.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "package seedu.address.logic.commands.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "public abstract class DeleteCommandAbstract extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": deletes an item from Internhunter. \""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            + \"ITEM TYPE (must be \u0027com\u0027 or \u0027int\u0027 or \u0027app\u0027 or \u0027me\u0027) \""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            + \"INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            + \"com \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            + \"PREFIX ARGUMENTS\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Obtains the name of item associated with Delete Command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @return Item name."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public abstract String getItemType();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 3,
      "orzymandias": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/delete/DeleteInternshipCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.logic.commands.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.commands.util.CommandUtil.getCommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.commands.util.CommandUtil.getInternshipFromCompany;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ItemCliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.INTERNSHIP_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.application.ApplicationItem;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.internship.InternshipItem;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Deletes an internship from the internship list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class DeleteInternshipCommand extends DeleteCommandAbstract {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes the internship identified by the\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            + \"index number used in the displayed internship list in a company.\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            + \"The application (if any) made with this internship will also be deleted. \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            + PREFIX_INDEX + \"INDEX\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            + PREFIX_INDEX + \"2\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final Index companyIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final Index internshipIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Creates an DeleteInternshipCommand to delete the specified {@code InternshipItem}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public DeleteInternshipCommand(Index companyIndex, Index internshipIndex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireAllNonNull(companyIndex, internshipIndex);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.companyIndex \u003d companyIndex;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.internshipIndex \u003d internshipIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @return feedback message of the operation result for display."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        InternshipItem internshipItem \u003d getInternshipFromCompany(model, companyIndex, internshipIndex);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // Delete applications for this deleted internship"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        ApplicationItem applicationItemToDelete \u003d new ApplicationItem(internshipItem);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        model.getApplicationList().deleteSameItem(applicationItemToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return getCommandResult(model, String.format(Messages.MESSAGE_DELETED_ITEM, INTERNSHIP_NAME, internshipItem),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                TabName.COMPANY);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String getItemType() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return INTERNSHIP_NAME;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (!(other instanceof DeleteInternshipCommand)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        DeleteInternshipCommand otherDeleteInternshipCommand \u003d (DeleteInternshipCommand) other;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return companyIndex.equals(otherDeleteInternshipCommand.companyIndex)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                \u0026\u0026 internshipIndex.equals(otherDeleteInternshipCommand.internshipIndex);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 80,
      "shawn-nyk": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/edit/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "package seedu.address.logic.commands.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ItemCliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ItemCliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ItemCliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ItemCliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ItemCliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import static seedu.address.model.FilterableItemList.PREDICATE_SHOW_ALL_ITEMS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getAddressBook().getFilteredItemList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (!personToEdit.isSameItem(editedPerson) \u0026\u0026 model.getAddressBook().hasItem(editedPerson)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        model.getAddressBook().setItem(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        model.getAddressBook().updateFilteredItemList(PREDICATE_SHOW_ALL_ITEMS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 8,
      "ZoroarkDarkrai": 5,
      "-": 215
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/util/CommandUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package seedu.address.logic.commands.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.model.util.ItemUtil.COMPANY_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.company.CompanyItem;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.internship.InternshipItem;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * Encapsulates common / shared execution processes between commands."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class CommandUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Gets a specified internship from a specified company, checking the indexes\u0027 validity while doing so."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param model Model of application."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param companyIndex Company index referenced."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param internshipIndex Internship index referenced."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @return InternshipItem corresponding to the 2 indexes."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @throws CommandException If indexes are out of bounds."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static InternshipItem getInternshipFromCompany(Model model, Index companyIndex, Index internshipIndex)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        List\u003cCompanyItem\u003e lastShownCompanyList \u003d model.getCompanyList().getFilteredItemList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (companyIndex.getZeroBased() \u003e\u003d lastShownCompanyList.size()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            throw new CommandException(String.format(Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX, COMPANY_NAME));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        CompanyItem companyItem \u003d lastShownCompanyList.get(companyIndex.getZeroBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return companyItem.getInternship(internshipIndex);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Gets the feedback message of the operation result for display and indicates whether tabs need to be switched or"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * not."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param model Model of application."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param messageSuccess Feedback message of the operation result for display (indicates operation success)."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @return Feedback message of the operation result for display."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static CommandResult getCommandResult(Model model, String messageSuccess, TabName tabName) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (model.getTabName() !\u003d tabName) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            model.setTabName(tabName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            return new CommandResult(messageSuccess, false, false, true);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            return new CommandResult(messageSuccess);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ApplicationParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.StatusUtil.ACCEPTED_KEYWORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.StatusUtil.APPLIED_KEYWORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.StatusUtil.INTERVIEW_KEYWORD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.StatusUtil.OFFERED_KEYWORD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.StatusUtil.REJECTED_KEYWORD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.StatusUtil.WAITING_KEYWORD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.application.Status;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.application.StatusDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.util.DateUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * ApplicationParserUtil class which parses all the fields in an ApplicationItem."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class ApplicationParserUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"Checks for status validity failed\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Parses a {@code String status} into a {@code Status}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws ParseException if the given {@code status} is invalid."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static Status parseStatus(String status) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireNonNull(status);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String trimmedStatus \u003d StringUtil.toTitleCase(status.trim());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (!Status.isValidStatus(trimmedStatus)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throw new ParseException(Status.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        switch (trimmedStatus) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        case APPLIED_KEYWORD:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return Status.APPLIED;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        case INTERVIEW_KEYWORD:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return Status.INTERVIEW;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        case WAITING_KEYWORD:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return Status.WAITING;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        case REJECTED_KEYWORD:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return Status.REJECTED;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        case OFFERED_KEYWORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return Status.OFFERED;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        case ACCEPTED_KEYWORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return Status.ACCEPTED;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assert false : ERROR_MESSAGE;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Parses a {@code String statusDate} into a {@code StatusDate}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws ParseException if the given {@code StatusDate} is invalid."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static StatusDate parseStatusDate(String statusDate) throws ParseException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireNonNull(statusDate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String trimmedStatusDate \u003d statusDate.trim();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (!StatusDate.isValidDate(statusDate)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throw new ParseException(StatusDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        LocalDateTime localDateTime \u003d DateUtil.convertToDateTime(trimmedStatusDate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return new StatusDate(localDateTime);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CompanyParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.company.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.company.CompanyName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.company.Email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.company.Industry;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.company.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes. todo javadocs (shawn)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class CompanyParserUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static CompanyName parseCompanyName(String companyName) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        requireNonNull(companyName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        String trimmedName \u003d companyName.trim();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (!CompanyName.isValidCompanyName(trimmedName)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            throw new ParseException(CompanyName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return new CompanyName(trimmedName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /** todo javadocs (shawn)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static Industry parseIndustry(String industry) throws ParseException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        requireNonNull(industry);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        String trimmedIndustry \u003d industry.trim();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (!Industry.isValidIndustryName(trimmedIndustry)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            throw new ParseException(Industry.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return new Industry(trimmedIndustry);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /** todo javadocs (shawn)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static Set\u003cIndustry\u003e parseIndustries(Collection\u003cString\u003e industries) throws ParseException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        requireNonNull(industries);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        final Set\u003cIndustry\u003e industrySet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        for (String industryName : industries) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            industrySet.add(parseIndustry(industryName));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return industrySet;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 107
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ItemCliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ItemCliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ItemCliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ItemCliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ItemCliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.edit.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.edit.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 7,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/MainParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.logic.commands.SwitchCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.add.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.delete.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.edit.EditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.parser.add.AddCommandParserWrapper;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.parser.delete.DeleteCommandParser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class MainParser {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            return new AddCommandParserWrapper().parse(arguments);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case SwitchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return new SwitchCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 2,
      "orzymandias": 5,
      "-": 62,
      "seanjyjy": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param userInput User input string."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Command of type T."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform to the expected format."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 4,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.commons.util.TabUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String MESSAGE_MISSING_TAB_NAME \u003d \"Switch requires a tab name as well.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Parses {@code selectedTab} into a {@code TabName} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @throws ParseException if the specified selectedTab is invalid (not com or int or me)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static TabName parseTab(String selectedTab) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        requireNonNull(selectedTab);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String tab \u003d selectedTab.trim();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (TabUtil.isEmptyTab(tab)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            throw new ParseException(MESSAGE_MISSING_TAB_NAME);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return TabUtil.getSwitchTabName(tab);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 1,
      "-": 124,
      "seanjyjy": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SwitchCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.logic.commands.SwitchCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Parses input arguments and creates a new SwitchCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class SwitchCommandParser implements Parser\u003cSwitchCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SwitchCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * and returns a SwitchCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public SwitchCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            TabName tabName \u003d ParserUtil.parseTab(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return new SwitchCommand(tabName);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SwitchCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/add/AddApplicationCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.logic.parser.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ApplicationCliSyntax.PREFIX_STATUS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ApplicationCliSyntax.PREFIX_STATUS_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ItemCliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.parser.util.Util.arePrefixesPresent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.commands.add.AddApplicationCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.parser.ApplicationParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.application.Status;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.application.StatusDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Parses input arguments and creates a new AddApplicationCommand object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class AddApplicationCommandParser implements Parser\u003cAddApplicationCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final int INDEX_FIRST \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final int INDEX_SECOND \u003d 1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final int NUMBER_OF_ARGUMENTS_TYPES \u003d 2;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public AddApplicationCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String[] argumentArr \u003d args.strip().split(\" \", NUMBER_OF_ARGUMENTS_TYPES);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        checkArgumentTypeSufficiency(argumentArr);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        Index companyIndex \u003d ParserUtil.parseIndex(argumentArr[INDEX_FIRST]);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String remainingTokens \u003d \" \" + argumentArr[INDEX_SECOND];"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                ArgumentTokenizer.tokenize(remainingTokens, PREFIX_INDEX, PREFIX_STATUS, PREFIX_STATUS_DATE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_INDEX) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                    AddApplicationCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        Index internshipIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_INDEX).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        Status status \u003d getStatus(argMultimap);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        StatusDate statusDate \u003d getStatusDate(argMultimap);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return new AddApplicationCommand(companyIndex, internshipIndex, status, statusDate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Obtains the status from the user input. Returns default applied status if not provided by user."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param argMultimap ArgumentMultimap."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Status for this application."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws ParseException if the given {@code status} is invalid."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private Status getStatus(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (argMultimap.getValue(PREFIX_STATUS).isPresent()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return ApplicationParserUtil.parseStatus(argMultimap.getValue(PREFIX_STATUS).get());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return Status.APPLIED;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Obtains the status from the user input. Returns default today\u0027s date if not provided by user."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param argMultimap ArgumentMultimap."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return StatusDate for this application."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws ParseException if the given {@code StatusDate} is invalid."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private StatusDate getStatusDate(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (argMultimap.getValue(PREFIX_STATUS_DATE).isPresent()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return ApplicationParserUtil.parseStatusDate(argMultimap.getValue(PREFIX_STATUS_DATE).get());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return new StatusDate(LocalDateTime.now());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Checks if number of argument types are sufficient."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param argumentTypes is a list of arguments delimited by the"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * first space in the user argument after stripping wrapping spaces."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private void checkArgumentTypeSufficiency(String[] argumentTypes) throws ParseException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (argumentTypes.length \u003c NUMBER_OF_ARGUMENTS_TYPES) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throw new ParseException(String.format("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT, AddApplicationCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/add/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "package seedu.address.logic.parser.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ItemCliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ItemCliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ItemCliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ItemCliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ItemCliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.add.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " * Parses input arguments and creates a new AddCommand object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new Person(name, phone, email, address, tagList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 15,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/add/AddCommandParserWrapper.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "package seedu.address.logic.parser.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_ITEM_TYPE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.model.util.ItemUtil.APPLICATION_ALIAS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.model.util.ItemUtil.COMPANY_ALIAS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.model.util.ItemUtil.INTERNSHIP_ALIAS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.model.util.ItemUtil.PROFILE_ALIAS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.add.AddCommandAbstract;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.add.AddInternshipCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Parses input arguments for item type and returns AddCommandAbstract Object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "public class AddCommandParserWrapper implements Parser\u003cAddCommandAbstract\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    private static final int ITEM_TYPE_INDEX \u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private static final int COMMAND_DETAILS_INDEX \u003d 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    private static final int NUMBER_OF_ARGUMENTS_TYPES \u003d 2;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Parses the given {@code String} of arguments for the item type"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public AddCommandAbstract parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        String[] argumentTypes \u003d args.strip().split(\" \", NUMBER_OF_ARGUMENTS_TYPES);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        String itemType \u003d argumentTypes[ITEM_TYPE_INDEX];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        checkItemTypePresent(itemType);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        String commandDetails \u003d getCommandDetails(argumentTypes);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        switch (itemType) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        case COMPANY_ALIAS:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            return new AddCompanyCommandParser().parse(commandDetails);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        case INTERNSHIP_ALIAS:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            return new AddInternshipCommand(\"Not an internship added\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        case APPLICATION_ALIAS:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            return new AddApplicationCommandParser().parse(commandDetails);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        case PROFILE_ALIAS:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            return new AddProfileCommandParser().parse(commandDetails);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_ITEM_TYPE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private void checkItemTypePresent(String itemType) throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (itemType.trim().isEmpty()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            throw new ParseException(String.format("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT, AddCommandAbstract.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private String getCommandDetails(String[] argumentTypes) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        String dummy \u003d \"\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (argumentTypes.length \u003c NUMBER_OF_ARGUMENTS_TYPES) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            return dummy; // if the user only entered the command word and the item type (did not enter details),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            // then provide this dummy string so that the relevant parser will show its error message."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            return \" \" + argumentTypes[COMMAND_DETAILS_INDEX];"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 4,
      "orzymandias": 48,
      "shawn-nyk": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/add/AddCompanyCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package seedu.address.logic.parser.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.CompanyCliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.CompanyCliSyntax.PREFIX_COMPANY_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.CompanyCliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.CompanyCliSyntax.PREFIX_INDUSTRY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.CompanyCliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.logic.parser.util.Util.arePrefixesPresent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.logic.commands.add.AddCompanyCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.logic.parser.CompanyParserUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.company.Address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.company.CompanyItem;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.company.CompanyName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.company.Email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.company.Industry;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.company.Phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * Parses input arguments and creates a new AddCompanyCommand object. todo javadocs (shawn)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class AddCompanyCommandParser implements Parser\u003cAddCompanyCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCompanyCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * and returns an AddCompanyCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public AddCompanyCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_COMPANY_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                        PREFIX_INDUSTRY);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_COMPANY_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCompanyCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        CompanyName companyName \u003d CompanyParserUtil.parseCompanyName(argMultimap.getValue(PREFIX_COMPANY_NAME).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        Phone phone \u003d CompanyParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        Email email \u003d CompanyParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        Address address \u003d CompanyParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        Set\u003cIndustry\u003e industryList \u003d CompanyParserUtil.parseIndustries(argMultimap.getAllValues(PREFIX_INDUSTRY));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        CompanyItem company \u003d new CompanyItem(companyName, phone, email, address, industryList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return new AddCompanyCommand(company);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/add/AddProfileCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "package seedu.address.logic.parser.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ProfileCliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ProfileCliSyntax.PREFIX_DESCRIPTORS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ProfileCliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.util.Util.arePrefixesPresent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.add.AddProfileCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.parser.util.ProfileParserUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.profile.Descriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.profile.ProfileItem;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.profile.ProfileItemCategory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.profile.Title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " * Parses input arguments and creates a new AddProfileCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "public class AddProfileCommandParser implements Parser\u003cAddProfileCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddProfileCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * and returns an AddProfileCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public AddProfileCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_CATEGORY, PREFIX_DESCRIPTORS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        boolean areProfilePrefixPresent \u003d arePrefixesPresent(argMultimap, PREFIX_TITLE, PREFIX_CATEGORY);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        if (!areProfilePrefixPresent || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddProfileCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        Title title \u003d ProfileParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        ProfileItemCategory category \u003d ProfileParserUtil.parseCategory(argMultimap.getValue(PREFIX_CATEGORY).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        Set\u003cDescriptor\u003e descriptorSet \u003d ProfileParserUtil"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                                            .parseDescriptors(argMultimap.getAllValues(PREFIX_DESCRIPTORS));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        ProfileItem profileItem \u003d new ProfileItem(title, category, descriptorSet);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return new AddProfileCommand(profileItem);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "orzymandias": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/clisyntax/ApplicationCliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.logic.parser.clisyntax;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class ApplicationCliSyntax {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final Prefix PREFIX_STATUS \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final Prefix PREFIX_STATUS_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/clisyntax/CompanyCliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package seedu.address.logic.parser.clisyntax;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class CompanyCliSyntax {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static final Prefix PREFIX_COMPANY_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static final Prefix PREFIX_INDUSTRY \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/clisyntax/InternshipCliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "package seedu.address.logic.parser.clisyntax;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "public class InternshipCliSyntax {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final Prefix PREFIX_JOB_TITLE \u003d new Prefix(\"j/\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final Prefix PREFIX_PERIOD \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final Prefix PREFIX_WAGE \u003d new Prefix(\"w/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final Prefix PREFIX_REQUIREMENT \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/clisyntax/ItemCliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "package seedu.address.logic.parser.clisyntax;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "public class ItemCliSyntax {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /* Todo: delete Prefix definitions */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /* Common Prefix definitions */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final Prefix PREFIX_INDEX \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 2,
      "orzymandias": 6,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/clisyntax/ProfileCliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "package seedu.address.logic.parser.clisyntax;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "public class ProfileCliSyntax {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final Prefix PREFIX_CATEGORY \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final Prefix PREFIX_TITLE \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTORS \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/delete/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.logic.parser.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_ITEM_TYPE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.model.util.ItemUtil.APPLICATION_ALIAS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.model.util.ItemUtil.COMPANY_ALIAS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.model.util.ItemUtil.INTERNSHIP_ALIAS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.model.util.ItemUtil.PROFILE_ALIAS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.commands.delete.DeleteApplicationCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.delete.DeleteCommandAbstract;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommandAbstract\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    private static final int ITEM_TYPE_INDEX \u003d 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final int ITEM_PREFIX_INDEX \u003d 1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    private static final int NUMBER_OF_ARGUMENTS_TYPES \u003d 2;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * todo:Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public DeleteCommandAbstract parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        String[] argumentTypes \u003d args.strip().split(\" \", NUMBER_OF_ARGUMENTS_TYPES);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        String itemType \u003d argumentTypes[ITEM_TYPE_INDEX];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        checkArgumentTypeSufficiency(argumentTypes);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String itemPrefixes \u003d argumentTypes[ITEM_PREFIX_INDEX];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // Internship has a different parse requirement"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        if (itemType.equals(INTERNSHIP_ALIAS)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return new DeleteInternshipCommandParser().parse(itemPrefixes);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        Index index \u003d ParserUtil.parseIndex(itemPrefixes);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        switch (itemType) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        case COMPANY_ALIAS:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            //todo: return own delete command"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        case APPLICATION_ALIAS:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return new DeleteApplicationCommand(index);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        case PROFILE_ALIAS:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            //todo: return own delete command"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            // Invalid item type"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_ITEM_TYPE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Checks if number of argument types are sufficient."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @param argumentTypes is a list of arguments delimited by the"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * first space in the user argument after stripping wrapping spaces."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    private void checkArgumentTypeSufficiency(String[] argumentTypes) throws ParseException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        if (argumentTypes.length \u003c NUMBER_OF_ARGUMENTS_TYPES) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            throw new ParseException(String.format("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommandAbstract.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 20,
      "orzymandias": 39,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/delete/DeleteInternshipCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.logic.parser.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ItemCliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.logic.parser.util.Util.arePrefixesPresent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.commands.delete.DeleteInternshipCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Parses input arguments and creates a new DeleteInternshipCommand object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class DeleteInternshipCommandParser implements Parser\u003cDeleteInternshipCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final int INDEX_FIRST \u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final int INDEX_SECOND \u003d 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final int NUMBER_OF_ARGUMENTS_TYPES \u003d 2;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public DeleteInternshipCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String[] argumentArr \u003d args.split(\" \", NUMBER_OF_ARGUMENTS_TYPES);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (argumentArr.length \u003c NUMBER_OF_ARGUMENTS_TYPES) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throw new ParseException(String.format("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT, DeleteInternshipCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        Index companyIndex \u003d ParserUtil.parseIndex(argumentArr[INDEX_FIRST]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String remainingTokens \u003d \" \" + argumentArr[INDEX_SECOND];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(remainingTokens, PREFIX_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_INDEX) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                    DeleteInternshipCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        Index internshipIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_INDEX).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return new DeleteInternshipCommand(companyIndex, internshipIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/util/ProfileParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "package seedu.address.logic.parser.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.model.util.ProfileItemCategoryUtil.ACHIEVEMENT_KEYWORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.model.util.ProfileItemCategoryUtil.EXPERIENCE_KEYWORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.model.util.ProfileItemCategoryUtil.SKILL_KEYWORD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.profile.Descriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.profile.ProfileItemCategory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.profile.Title;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " * Contains utility methods used for parsing fields in a ProfileItem."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "public class ProfileParserUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    private static final String INVALID_PROFILE_CATEGORY_MESSAGE \u003d \"Invalid profile item category\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static Title parseTitle(String name) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        String trimmedTitle \u003d name.trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        if (!Title.isValidAlphaNumericWord(trimmedTitle)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            throw new ParseException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return new Title(trimmedTitle);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Parses a {@code String category} into a {@code ProfileItemCategory}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @param category category in String form."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @return ProfileItemCategory Object parsed from String."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @throws ParseException if not a valid profileItemCategory."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static ProfileItemCategory parseCategory(String category) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        requireNonNull(category);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        String trimmedCategory \u003d category.trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        String trimmedLowerCaseCategory \u003d trimmedCategory.toLowerCase();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        if (!ProfileItemCategory.isValidProfileItemCategory(trimmedLowerCaseCategory)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            throw new ParseException(ProfileItemCategory.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        switch (trimmedLowerCaseCategory) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        case ACHIEVEMENT_KEYWORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            return ProfileItemCategory.ACHIEVEMENT;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        case EXPERIENCE_KEYWORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            return ProfileItemCategory.EXPERIENCE;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        case SKILL_KEYWORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            return ProfileItemCategory.SKILL;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            assert false : INVALID_PROFILE_CATEGORY_MESSAGE;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Parses a {@code String descriptor} into a {@code Descriptor}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @throws ParseException if the given {@code descriptor} is invalid."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static Descriptor parseDescriptor(String descriptor) throws ParseException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        requireNonNull(descriptor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        String trimmedDescriptor \u003d descriptor.trim();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        if (!Descriptor.isValidDescriptor(trimmedDescriptor)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            throw new ParseException(Descriptor.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return new Descriptor(descriptor);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e descriptor} into a {@code Set\u003cDescriptor\u003e}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @throws ParseException for invalid descriptors in descriptorSet."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static Set\u003cDescriptor\u003e parseDescriptors(Collection\u003cString\u003e descriptors) throws ParseException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        requireNonNull(descriptors);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        final Set\u003cDescriptor\u003e descriptorSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        for (String descriptor : descriptors) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            descriptorSet.add(parseDescriptor(descriptor));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return descriptorSet;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 96
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/util/Util.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.logic.parser.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class Util {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/FilterableItemList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ItemList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "public interface FilterableItemList\u003cT extends Item\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    Predicate\u003cItem\u003e PREDICATE_SHOW_ALL_ITEMS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Replaces item list data with the data in {@code itemList}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    void setItemList(ItemList\u003cT\u003e itemList);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /** Returns the ItemList */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    ItemList\u003cT\u003e getUnfilteredItemList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Returns true if a Item with the same identity as {@code Item} exists in the item list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    boolean hasItem(T item);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Deletes the given Item."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * The Item must exist in the item list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    void deleteItem(T target);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Deletes the given Item according to the weaker notion of equality."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * The Item may not necessarily exist in the item list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    void deleteSameItem(T target);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Adds the given Item."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * {@code Item} must not already exist in the item list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    void addItem(T item);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Replaces the given Item {@code target} with {@code editedItem}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * {@code target} must exist in the item list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * The Item identity of {@code editedItem} must not be the same as another existing Item in the item list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    void setItem(T target, T editedItem);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /** Returns an unmodifiable view of the filtered Item list */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    ObservableList\u003cT\u003e getFilteredItemList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Updates the filter of the filtered Item list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    void updateFilteredItemList(Predicate\u003c? super T \u003e predicate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 6,
      "ZoroarkDarkrai": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ItemListManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ItemList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "public class ItemListManager\u003cT extends Item\u003e implements FilterableItemList\u003cT\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private ItemList\u003cT\u003e itemList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final FilteredList\u003cT\u003e filteredItems;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Initializes ItemListManager with the given itemList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @param itemList initial item list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public ItemListManager(ItemList\u003cT\u003e itemList) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.itemList \u003d itemList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        filteredItems \u003d new FilteredList\u003c\u003e(this.itemList.getItemList());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Creates an empty item list manager."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public ItemListManager() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.itemList \u003d new ItemList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        filteredItems \u003d new FilteredList\u003c\u003e(this.itemList.getItemList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void setItemList(ItemList\u003cT\u003e itemList) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.itemList.resetData(itemList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public ItemList\u003cT\u003e getUnfilteredItemList() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return itemList;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public boolean hasItem(T item) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        requireNonNull(item);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return itemList.hasItem(item);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void deleteItem(T target) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        itemList.removeItem(target);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void deleteSameItem(T target) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        itemList.removeSameItem(target);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void addItem(T item) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        itemList.addItem(item);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        updateFilteredItemList(PREDICATE_SHOW_ALL_ITEMS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void setItem(T target, T editedItem) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        requireAllNonNull(target, editedItem);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        itemList.setItem(target, editedItem);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Item List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Item} backed by the internal list of"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * {@code versionedItemList}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public ObservableList\u003cT\u003e getFilteredItemList() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return filteredItems;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void updateFilteredItemList(Predicate\u003c? super T\u003e predicate) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        filteredItems.setPredicate(predicate);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (!(obj instanceof ItemListManager)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        ItemListManager other \u003d (ItemListManager) obj;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return itemList.equals(other.itemList)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                \u0026\u0026 filteredItems.equals(other.filteredItems);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 5,
      "ZoroarkDarkrai": 103
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.application.ApplicationItem;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.company.CompanyItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.profile.ProfileItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    Path getInternHunterFilePath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    void setInternHunterFilePath(Path internHunterFilePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Gets the person list manager."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    FilterableItemList\u003cPerson\u003e getAddressBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Gets the company list manager."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    FilterableItemList\u003cCompanyItem\u003e getCompanyList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Gets the application list manager."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    FilterableItemList\u003cApplicationItem\u003e getApplicationList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Get profile list manager."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    FilterableItemList\u003cProfileItem\u003e getProfileList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Replaces the current tab name with {@code tabName}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    void setTabName(TabName tabName);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Retrieves the current tab name"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    TabName getTabName();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 5,
      "ZoroarkDarkrai": 6,
      "-": 58,
      "shawn-nyk": 2,
      "seanjyjy": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.application.ApplicationItem;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.company.CompanyItem;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ItemList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ReadOnlyItemList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.profile.ProfileItem;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.model.tab.Tab;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.model.tab.TabManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Represents the in-memory model of the InternHunter app data."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final FilterableItemList\u003cPerson\u003e addressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private final FilterableItemList\u003cCompanyItem\u003e companyList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final FilterableItemList\u003cApplicationItem\u003e applicationList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final FilterableItemList\u003cProfileItem\u003e profileList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private final Tab tabControl;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public ModelManager("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            ReadOnlyItemList\u003cPerson\u003e addressBook,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            ReadOnlyItemList\u003cCompanyItem\u003e companyList,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            ReadOnlyItemList\u003cApplicationItem\u003e applicationList,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            ReadOnlyItemList\u003cProfileItem\u003e profileList,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        requireAllNonNull(addressBook, companyList, applicationList, profileList, userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                + \" and company list \" + companyList"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                + \" and application list \" + applicationList"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                + \" and profile list \" + profileList"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.addressBook \u003d new ItemListManager\u003c\u003e(new ItemList\u003c\u003e(addressBook));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.companyList \u003d new ItemListManager\u003c\u003e(new ItemList\u003c\u003e(companyList));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.applicationList \u003d new ItemListManager\u003c\u003e(new ItemList\u003c\u003e(applicationList));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.profileList \u003d new ItemListManager\u003c\u003e(new ItemList\u003c\u003e(profileList));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.tabControl \u003d new TabManager();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this(new ItemList\u003c\u003e(), new ItemList\u003c\u003e(), new ItemList\u003c\u003e(), new ItemList\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Models Getters \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public FilterableItemList\u003cPerson\u003e getAddressBook() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public FilterableItemList\u003cCompanyItem\u003e getCompanyList() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return companyList;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public FilterableItemList\u003cApplicationItem\u003e getApplicationList() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return applicationList;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public FilterableItemList\u003cProfileItem\u003e getProfileList() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return profileList;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public Path getInternHunterFilePath() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void setInternHunterFilePath(Path internHunterFilePath) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        requireNonNull(internHunterFilePath);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        userPrefs.setAddressBookFilePath(internHunterFilePath);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Tab Control Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Retrieves the current tab name."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public TabName getTabName() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return tabControl.getTabName();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Sets the current tab name with {@code tabName}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void setTabName(TabName tabName) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        tabControl.setTabName(tabName);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                \u0026\u0026 companyList.equals(other.companyList)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                \u0026\u0026 applicationList.equals(other.applicationList)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                \u0026\u0026 profileList.equals(other.profileList)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 9,
      "ZoroarkDarkrai": 50,
      "-": 89,
      "shawn-nyk": 8,
      "seanjyjy": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\", \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private Path applicationItemListFilePath \u003d Paths.get(\"data\", \"applicationitemlist.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private Path companyItemListFilePath \u003d Paths.get(\"data\", \"companyitemlist.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private Path profileItemListFilePath \u003d Paths.get(\"data\", \"profileitemlist.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public Path getApplicationItemListFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return applicationItemListFilePath;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void setApplicationItemListFilePath(Path applicationItemListFilePath) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        requireNonNull(applicationItemListFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.applicationItemListFilePath \u003d applicationItemListFilePath;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public Path getCompanyItemListFilePath() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return companyItemListFilePath;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void setCompanyItemListFilePath(Path companyItemListFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        requireNonNull(companyItemListFilePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.companyItemListFilePath \u003d companyItemListFilePath;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public Path getProfileItemListFilePath() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return profileItemListFilePath;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void setProfileItemListFilePath(Path profileItemListFilePath) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        requireNonNull(companyItemListFilePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.profileItemListFilePath \u003d profileItemListFilePath;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return \"Gui Settings : \" + guiSettings"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                + \"\\nLocal data file location : \" + addressBookFilePath;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 36,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/model/application/ApplicationItem.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.model.application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.APPLICATION_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.ui.PanelDisplayKeyword.DATE_DISPLAY_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.ui.PanelDisplayKeyword.STATUS_DISPLAY_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.internship.InternshipItem;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.application.JsonAdaptedApplicationItem;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.item.JsonAdaptedItem;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Represents an ApplicationItem in the InternHunter application."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class ApplicationItem extends Item {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final InternshipItem internshipItem;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final Status status;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final StatusDate statusDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public ApplicationItem(InternshipItem internshipItem, Status status, StatusDate statusDate) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireAllNonNull(internshipItem, status, statusDate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.internshipItem \u003d internshipItem;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.statusDate \u003d statusDate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Creates an application item using the internship item."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Method is used to match internships with their application."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param internshipItem Internship item."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public ApplicationItem(InternshipItem internshipItem) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireNonNull(internshipItem);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.internshipItem \u003d internshipItem;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.status \u003d Status.APPLIED;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.statusDate \u003d new StatusDate(LocalDateTime.now());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public InternshipItem getInternshipItem() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return internshipItem;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public Status getStatus() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public StatusDate getStatusDate() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return statusDate;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Obtains the name of the item."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Item name."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String getItemName() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return APPLICATION_NAME;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Obtains the mapping of all field names to their corresponding fields."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Mapping of field names to fields for the ApplicationItem object."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public LinkedHashMap\u003cString, Object\u003e getMapping() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        LinkedHashMap\u003cString, Object\u003e mapping \u003d internshipItem.getMapping();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        mapping.put(STATUS_DISPLAY_NAME, status);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        mapping.put(DATE_DISPLAY_NAME, statusDate);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return mapping;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns true if both Applications have the {@code InternshipItem}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * This defines a weaker notion of equality between two ApplicationItem objects."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param otherItem Other ApplicationItem to compare to."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return True if and only if the 2 Applications have the same identity field."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public boolean isSameItem(Item otherItem) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (otherItem \u003d\u003d this) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (!(otherItem instanceof ApplicationItem)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        ApplicationItem otherApplication \u003d (ApplicationItem) otherItem;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return otherApplication.getInternshipItem().equals(getInternshipItem());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns true if both Applications have the same data fields."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * This defines a stronger notion of equality between two ApplicationItem objects."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (!(other instanceof ApplicationItem)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        ApplicationItem otherApplication \u003d (ApplicationItem) other;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return otherApplication.getInternshipItem().equals(getInternshipItem())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                \u0026\u0026 otherApplication.getStatus().equals(getStatus())"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                \u0026\u0026 otherApplication.getStatusDate().equals(getStatusDate());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return Objects.hash(internshipItem, status, statusDate);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        builder.append(getInternshipItem())"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .append(\" Status: \")"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .append(getStatus())"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .append(\" Date: \")"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .append(getStatusDate());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public JsonAdaptedItem getJsonAdaptedItem() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return new JsonAdaptedApplicationItem(this);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 146,
      "ZoroarkDarkrai": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/application/Status.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.model.application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.StatusUtil.ACCEPTED_KEYWORD;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.StatusUtil.APPLIED_KEYWORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.StatusUtil.INTERVIEW_KEYWORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.StatusUtil.OFFERED_KEYWORD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.StatusUtil.REJECTED_KEYWORD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.StatusUtil.WAITING_KEYWORD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Status class which contains the valid statuses for an internship application."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public enum Status {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    APPLIED,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    INTERVIEW,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    WAITING,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    REJECTED,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    OFFERED,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    ACCEPTED;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            \"Application status can only be applied, interview, waiting, rejected, offered or accepted.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns true if the given status is valid."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param status Input status."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return True if status is valid, false otherwise."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static boolean isValidStatus(String status) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return status.equals(APPLIED_KEYWORD)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                || status.equals(INTERVIEW_KEYWORD)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                || status.equals(WAITING_KEYWORD)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                || status.equals(OFFERED_KEYWORD)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                || status.equals(ACCEPTED_KEYWORD)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                || status.equals(REJECTED_KEYWORD);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns a string representation of the {@code Status}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return String representation of the {@code Status}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return StringUtil.toTitleCase(super.toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/application/StatusDate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.model.application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.DateUtil.DATE_TIME_LONG_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.DateUtil.DATE_TIME_SHORT_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.DateUtil.formatterDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.DateUtil.isDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.DateUtil.isDateTimeFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Represents the date of the Application status update."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class StatusDate {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Status date should be in the format of d-M-yy or d-M-yy HHmm\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final LocalDateTime statusDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Constructs an {@code StatusDate}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param statusDate A valid statusDate."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public StatusDate(LocalDateTime statusDate) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireNonNull(statusDate);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.statusDate \u003d statusDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns true if the given statusDate is valid."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param statusDate Input statusDate."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return True if statusDate has a valid input format, false otherwise."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static boolean isValidDate(String statusDate) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return isDateFormat(statusDate) || isDateTimeFormat(statusDate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Checks if the otherDate has the same statusDate as this Date object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Two LocalDateTime objects have ths same statusDate if they have the same year and statusDate."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param otherDate Date of the other task."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return True if the other task has the same statusDate."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private boolean sameDate(LocalDateTime otherDate) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        boolean sameYear \u003d statusDate.getYear() \u003d\u003d otherDate.getYear();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        boolean sameDay \u003d statusDate.getDayOfYear() \u003d\u003d otherDate.getDayOfYear();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return sameYear \u0026\u0026 sameDay;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns the short statusDate format for main screen view."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Short statusDate format."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String getShortDate() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return statusDate.format(formatterDateTime(DATE_TIME_SHORT_FORMAT));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                || (other instanceof StatusDate // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                \u0026\u0026 sameDate(((StatusDate) other).statusDate)); // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return statusDate.hashCode();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns the long statusDate format for right pane view."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Long statusDate format."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return statusDate.format(formatterDateTime(DATE_TIME_LONG_FORMAT));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/model/company/Address.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package seedu.address.model.company;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * Represents a Person\u0027s address in the address book. TODO: Javadocs (Shawn)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/company/CompanyItem.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package seedu.address.model.company;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.COMPANY_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import static seedu.address.model.util.ItemUtil.INTERNSHIP_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.internship.InternshipItem;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.company.JsonAdaptedCompanyItem;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * Represents a Person in the address book. todo javadocs (shawn)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class CompanyItem extends Item {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final CompanyName companyName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private final Set\u003cIndustry\u003e industries \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private final List\u003cInternshipItem\u003e internships \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public CompanyItem(CompanyName companyName, Phone phone, Email email, Address address, Set\u003cIndustry\u003e industries) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        requireAllNonNull(companyName, phone, email, address, industries);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.companyName \u003d companyName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.industries.addAll(industries);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public CompanyItem(CompanyName companyName, Phone phone, Email email, Address address, Set\u003cIndustry\u003e industries,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            List\u003cInternshipItem\u003e internships) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        requireAllNonNull(companyName, phone, email, address, industries, internships);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.companyName \u003d companyName;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.industries.addAll(industries);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.internships.addAll(internships);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public CompanyName getCompanyName() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return companyName;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public Set\u003cIndustry\u003e getIndustries() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return Collections.unmodifiableSet(industries);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * NOTE: May end up deleting this to prevent direct access to internship list. todo javadocs (shawn)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public List\u003cInternshipItem\u003e getInternships() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return Collections.unmodifiableList(internships);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * todo javadocs (shawn)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public InternshipItem getInternship(Index internshipIndex) throws CommandException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (internshipIndex.getZeroBased() \u003e\u003d internships.size()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_ITEM_DISPLAYED_INDEX, INTERNSHIP_NAME));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return internships.get(internshipIndex.getZeroBased());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * todo javadocs (shawn)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void addInternship(InternshipItem internship) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        internships.add(internship);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns true if both persons of the same companyName have at least one other identity field that is the same."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public boolean isSameItem(Item otherItem) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (this \u003d\u003d otherItem) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (!(otherItem instanceof CompanyItem)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        CompanyItem otherCompanyItem \u003d (CompanyItem) otherItem;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return otherCompanyItem !\u003d null"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                \u0026\u0026 otherCompanyItem.getCompanyName().equals(getCompanyName())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                \u0026\u0026 (otherCompanyItem.getPhone().equals(getPhone()) || otherCompanyItem.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (!(other instanceof CompanyItem)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        CompanyItem otherCompanyItem \u003d (CompanyItem) other;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return otherCompanyItem.getCompanyName().equals(getCompanyName())"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                \u0026\u0026 otherCompanyItem.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                \u0026\u0026 otherCompanyItem.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                \u0026\u0026 otherCompanyItem.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                \u0026\u0026 otherCompanyItem.getIndustries().equals(getIndustries())"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                \u0026\u0026 otherCompanyItem.getInternships().equals(getInternships());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return Objects.hash(companyName, phone, email, address, industries, internships);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        builder.append(getCompanyName())"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                .append(getAddress());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (!industries.isEmpty()) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            builder.append(\" Industries: \");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            getIndustries().forEach(industry -\u003e builder.append(industry + \" \"));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (!internships.isEmpty()) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            builder.append(\"Internships: \");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            getInternships().forEach(builder::append);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String getItemName() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return COMPANY_NAME;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public LinkedHashMap\u003cString, Object\u003e getMapping() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        LinkedHashMap\u003cString, Object\u003e mapping \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        mapping.put(\"Company name\", companyName);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        mapping.put(\"Phone\", phone);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        mapping.put(\"Email\", email);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        mapping.put(\"Address\", address);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        mapping.put(\"Industries\", industries);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        mapping.put(\"Internships\", internships);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return mapping;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public JsonAdaptedCompanyItem getJsonAdaptedItem() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return new JsonAdaptedCompanyItem(this);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 12,
      "ZoroarkDarkrai": 28,
      "shawn-nyk": 165
    }
  },
  {
    "path": "src/main/java/seedu/address/model/company/CompanyName.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.model.company;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.wrapper.AlphaNumericWord;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Represents a name of a field in an Item. TODO: Javadocs (Shawn)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAlphaNumericWord(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class CompanyName extends AlphaNumericWord {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            \"Company names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Constructs a {@code CompanyName}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param companyName A valid company name."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public CompanyName(String companyName) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(companyName, MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Returns true if a given string is a valid company name."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static boolean isValidCompanyName(String test) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return isValidAlphaNumericWord(test);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 23,
      "shawn-nyk": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/company/Email.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package seedu.address.model.company;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * Represents a Person\u0027s email in the address book. TODO: Javadocs (Shawn)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/model/company/Industry.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package seedu.address.model.company;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.wrapper.AlphaNumericWord;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * Represents a Tag in the address book. TODO: Javadocs (Shawn)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidAlphaNumericWord(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class Industry extends AlphaNumericWord {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Industry types should only contain alphanumeric characters and \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Constructs a {@code Industry}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param industryType A valid industry type."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public Industry(String industryType) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(industryType, MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Returns true if a given string is a valid industry name."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static boolean isValidIndustryName(String test) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return isValidAlphaNumericWord(test);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 5,
      "shawn-nyk": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/model/company/Phone.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package seedu.address.model.company;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * Represents a Person\u0027s phone number in the address book. TODO: Javadocs (Shawn)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/internship/InternshipItem.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.model.internship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.INTERNSHIP_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.ui.PanelDisplayKeyword.COMPANY_DISPLAY_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.ui.PanelDisplayKeyword.JOB_TITLE_DISPLAY_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.ui.PanelDisplayKeyword.PERIOD_DISPLAY_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.ui.PanelDisplayKeyword.REQUIREMENTS_DISPLAY_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.ui.PanelDisplayKeyword.WAGE_DISPLAY_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.company.CompanyName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.internship.JsonAdaptedInternshipItem;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Represents an InternshipItem in the InternHunter application."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class InternshipItem extends Item {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final CompanyName companyName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final JobTitle jobTitle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final Period period;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final Wage wage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final Set\u003cRequirement\u003e requirements \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public InternshipItem(CompanyName companyName, JobTitle jobTitle, Period period, Wage wage,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            Set\u003cRequirement\u003e requirements) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireAllNonNull(companyName, jobTitle, period, wage, requirements);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.companyName \u003d companyName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.jobTitle \u003d jobTitle;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.period \u003d period;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.wage \u003d wage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.requirements.addAll(requirements);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public CompanyName getCompanyName() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return companyName;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public JobTitle getJobTitle() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return jobTitle;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public Period getPeriod() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return period;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public Wage getWage() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return wage;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns an immutable requirement set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public Set\u003cRequirement\u003e getRequirements() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return Collections.unmodifiableSet(requirements);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Obtains the name of the item."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Item name."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String getItemName() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return INTERNSHIP_NAME;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Obtains the mapping of all field names to their corresponding fields in an InternshipItem object."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Mapping of field names to fields for the InternshipItem."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public LinkedHashMap\u003cString, Object\u003e getMapping() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        LinkedHashMap\u003cString, Object\u003e mapping \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        mapping.put(JOB_TITLE_DISPLAY_NAME, jobTitle);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        mapping.put(COMPANY_DISPLAY_NAME, companyName);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        mapping.put(PERIOD_DISPLAY_NAME, period);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        mapping.put(WAGE_DISPLAY_NAME, wage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        mapping.put(REQUIREMENTS_DISPLAY_NAME, requirements);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return mapping;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns true if both InternshipItems have the same jobTitle and period."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * This defines a weaker notion of equality between two InternshipItems."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param otherItem Other InternShipItem to compare to."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return True if and only if the 2 InternshipItems have the same identity fields."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public boolean isSameItem(Item otherItem) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (otherItem \u003d\u003d this) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (!(otherItem instanceof InternshipItem)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        InternshipItem otherInternshipItem \u003d (InternshipItem) otherItem;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return otherInternshipItem.getCompanyName().equals(getCompanyName())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                \u0026\u0026 otherInternshipItem.getJobTitle().equals(getJobTitle())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                \u0026\u0026 otherInternshipItem.getPeriod().equals(getPeriod());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns true if both InternshipItems have the same identity and data fields."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * This defines a stronger notion of equality between two InternshipItems."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (!(other instanceof InternshipItem)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        InternshipItem otherInternshipItem \u003d (InternshipItem) other;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return otherInternshipItem.getCompanyName().equals(getCompanyName())"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                \u0026\u0026 otherInternshipItem.getJobTitle().equals(getJobTitle())"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                \u0026\u0026 otherInternshipItem.getPeriod().equals(getPeriod())"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                \u0026\u0026 otherInternshipItem.getWage().equals(getWage())"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                \u0026\u0026 otherInternshipItem.getRequirements().equals(getRequirements());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return Objects.hash(companyName, jobTitle, period, wage, requirements);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        builder.append(getCompanyName())"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .append(\" Job title: \")"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .append(getJobTitle())"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .append(\" Period: \")"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .append(getPeriod())"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .append(\" Wage: \")"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .append(getWage())"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .append(\" Requirements: \");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        getRequirements().forEach(builder::append);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public JsonAdaptedInternshipItem getJsonAdaptedItem() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return new JsonAdaptedInternshipItem(this);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 163,
      "ZoroarkDarkrai": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/internship/JobTitle.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.model.internship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.wrapper.AlphaNumericWord;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class JobTitle extends AlphaNumericWord {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            \"Job titles should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Constructs a {@code JobTitle}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param jobTitle A valid job title."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public JobTitle(String jobTitle) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(jobTitle, MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/model/internship/Period.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.model.internship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.wrapper.NonEmptyString;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class Period extends NonEmptyString {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Periods should not be blank\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Constructs a {@code Period}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param period A valid period."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public Period(String period) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(period, MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/internship/Requirement.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.model.internship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.wrapper.NonEmptyString;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class Requirement extends NonEmptyString {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Requirements should not be blank\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Constructs a {@code JobTitle}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param requirement A valid job title."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public Requirement(String requirement) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(requirement, MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/internship/Wage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.model.internship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.wrapper.PositiveNumber;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Represents a Internship\u0027s wage."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPositiveNumber(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class Wage extends PositiveNumber {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Wage should only contain a positive number\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Constructs a {@code Wage}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param wage A valid wage number."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public Wage(String wage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(wage, MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return String.format(\"$%s\", value);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/model/internship/exceptions/InconsistentInternshipException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "package seedu.address.model.internship.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " * Signals that an application has an internship that does not exist in any company\u0027s list of internships."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "public class InconsistentInternshipException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public InconsistentInternshipException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        super(\"An application has an internship that does not exist in any company\u0027s list of internships\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/Item.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.APPLICATION_ALIAS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.COMPANY_ALIAS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.INTERNSHIP_ALIAS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.PROFILE_ALIAS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.item.JsonAdaptedItem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Represents an Item in the InternHunter application."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * There are 4 types of items, CompanyItem, InternshipItem, ApplicationItem, ProfileItem."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public abstract class Item {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns true if both items are the have the same identity fields."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * This defines a weaker notion of equality between two {@code Items}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param otherItem Other item to compare to."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return True if and only if the 2 items have the same identity fields."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public abstract boolean isSameItem(Item otherItem);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Obtains the name of the item."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Item name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public abstract String getItemName();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Obtains the mapping of all field names to their corresponding fields."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Mapping of field names to fields for the item."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public abstract LinkedHashMap\u003cString, Object\u003e getMapping();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns true if a given string is a valid item type."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param type Input type."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return True if given string is a valid item type, false otherwise."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static boolean isValidItem(String type) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return type.equals(COMPANY_ALIAS)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                || type.equals(INTERNSHIP_ALIAS)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                || type.equals(APPLICATION_ALIAS)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                || type.equals(PROFILE_ALIAS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Gets the json adapted version of item."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @return json adapted item."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public abstract JsonAdaptedItem getJsonAdaptedItem();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 52,
      "ZoroarkDarkrai": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/ItemList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Wraps all item data at the macro level."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Duplicates are not allowed (by .isSameItem comparison)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class ItemList\u003cT extends Item\u003e implements ReadOnlyItemList\u003cT\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final UniqueItemList\u003cT\u003e items;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        items \u003d new UniqueItemList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public ItemList() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Creates an ItemList using the Items in the {@code toBeCopied}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public ItemList(ReadOnlyItemList\u003cT\u003e toBeCopied) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Replaces the contents of the item list with {@code items}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * {@code items} must not contain duplicate items."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void setItems(List\u003cT\u003e items) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.items.setItems(items);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Resets the existing data of this {@code ItemList} with {@code newData}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void resetData(ReadOnlyItemList\u003cT\u003e newData) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        setItems(newData.getItemList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    //// item-level operations"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns true if an item with the same identity as {@code item} exists in the item list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public boolean hasItem(T item) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireNonNull(item);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return items.contains(item);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Adds an item to the item list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * The item must not already exist in the item list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void addItem(T p) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        items.add(p);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Replaces the given item {@code target} in the list with {@code editedItem}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * {@code target} must exist in the item list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * The item identity of {@code editedItem} must not be the same as another existing item in the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * item list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void setItem(T target, T editedItem) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireNonNull(editedItem);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        items.setItem(target, editedItem);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Removes {@code key} from this {@code ItemList}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * {@code key} must exist in the item list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void removeItem(T key) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        items.remove(key);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Removes {@code key} from this {@code ItemList}, removing the object based on the weaker notion of equality."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * {@code key} need not be in this item list."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void removeSameItem(T key) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        items.removeSameItem(key);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return items.asUnmodifiableObservableList().size() + \" items\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public ObservableList\u003cT\u003e getItemList() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return items.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                || (other instanceof ItemList // instanceof handles nulls"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                \u0026\u0026 items.equals(((ItemList) other).items));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return items.hashCode();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 128
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/ReadOnlyItemList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Unmodifiable view of a list of items."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public interface ReadOnlyItemList\u003cT\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns an unmodifiable view of the Item list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * This list will not contain any duplicate Items."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    ObservableList\u003cT\u003e getItemList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/UniqueItemList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.item.exceptions.DuplicateItemException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.item.exceptions.ItemNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * A list of items that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * A item is considered unique by comparing using {@code Item#isSameItem(Item)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * items uses Item#isSameItem(Item) for equality so as to ensure that the item being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * unique in terms of identity in the UniqueItemList. However, the removal of a item uses Item#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * as to ensure that the item with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * @see T#isSameItem(T)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class UniqueItemList\u003cT extends Item\u003e implements Iterable\u003cT\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final ObservableList\u003cT\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final ObservableList\u003cT\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns true if the list contains an equivalent item as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public boolean contains(T toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameItem);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Adds a item to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * The item must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void add(T toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throw new DuplicateItemException(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Replaces the item {@code target} in the list with {@code editedItem}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * The item identity of {@code editedItem} must not be the same as another existing item in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void setItem(T target, T editedItem) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireAllNonNull(target, editedItem);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throw new ItemNotFoundException(target);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (!target.isSameItem(editedItem) \u0026\u0026 contains(editedItem)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throw new DuplicateItemException(target);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        internalList.set(index, editedItem);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Removes the equivalent item from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * The item must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void remove(T toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throw new ItemNotFoundException(toRemove);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Removes the equivalent item from the list, based on the weaker notion of equality between 2 items."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void removeSameItem(T toRemove) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        for (T item : internalList) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            if (item.isSameItem(toRemove)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                internalList.remove(toRemove);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void setItems(UniqueItemList\u003cT\u003e replacement) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Replaces the contents of this list with {@code items}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * {@code items} must not contain duplicate items."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void setItems(List\u003cT\u003e items) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireAllNonNull(items);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (!itemsAreUnique(items)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throw new DuplicateItemException(items.get(0));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        internalList.setAll(items);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public ObservableList\u003cT\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public Iterator\u003cT\u003e iterator() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                || (other instanceof UniqueItemList // instanceof handles nulls"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueItemList) other).internalList));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns true if {@code items} contains only unique items."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private boolean itemsAreUnique(List\u003cT\u003e items) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        for (int i \u003d 0; i \u003c items.size() - 1; i++) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            for (int j \u003d i + 1; j \u003c items.size(); j++) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                if (items.get(i).isSameItem(items.get(j))) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 149
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/exceptions/DuplicateItemException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.model.item.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " * Signals that the operation will result in duplicate Items (Items are considered duplicates if they have the same"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class DuplicateItemException extends RuntimeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public DuplicateItemException(Item item) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(String.format(\"Operation would result in duplicate %s items\", item.getItemName()));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 12,
      "ZoroarkDarkrai": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/exceptions/ItemNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.model.item.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Signals that the operation is unable to find the specified item."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class ItemNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public ItemNotFoundException(Item item) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(String.format(\"Not able to find this %s item\", item.getItemName()));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Represents a name of a field in an Item."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 1,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.person.JsonAdaptedPerson;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "public class Person extends Item {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public boolean isSameItem(Item otherItem) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (this \u003d\u003d otherItem) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (!(otherItem instanceof Person)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        Person otherPerson \u003d (Person) otherItem;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public String getItemName() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return \"person\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public LinkedHashMap\u003cString, Object\u003e getMapping() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        LinkedHashMap\u003cString, Object\u003e mapping \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        mapping.put(\"Name\", name);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        mapping.put(\"Phone\", phone);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        mapping.put(\"Email\", email);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        mapping.put(\"Address\", address);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        mapping.put(\"Tags\", tags);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return mapping;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public JsonAdaptedPerson getJsonAdaptedItem() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return new JsonAdaptedPerson(this);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 34,
      "-": 117
    }
  },
  {
    "path": "src/main/java/seedu/address/model/profile/Descriptor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "package seedu.address.model.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "  * Represents a descriptor in the profile item."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "  * Guarantees: immutable; non-empty; descriptor is valid as declared in {@link #isValidDescriptor(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "public class Descriptor {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"descriptors should be alphanumeric,\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        + \"punctuations limited to .,?!:;+# and non-empty\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[A-Za-z0-9 .,!?:;+#]*+$\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public final String descriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Constructs a {@code Descriptor}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @param descriptor A valid descriptor."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public Descriptor(String descriptor) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        requireNonNull(descriptor);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        checkArgument(isValidDescriptor(descriptor), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        this.descriptor \u003d descriptor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Returns true if a given string is a valid descriptor."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static boolean isValidDescriptor(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                || (other instanceof Descriptor// instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                \u0026\u0026 descriptor.equals(((Descriptor) other).descriptor)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return descriptor.hashCode();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Format descriptor as text for viewing."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return \"\\u2022 \" + descriptor;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/profile/ProfileItem.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "package seedu.address.model.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.model.util.ItemUtil.PROFILE_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.item.JsonAdaptedItem;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.profile.JsonAdaptedProfileItem;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " * Represents a Profile Item in the UserProfile."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "public class ProfileItem extends Item {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final Title title;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    private final ProfileItemCategory type;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    private final Set\u003cDescriptor\u003e descriptors \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public ProfileItem(Title title, ProfileItemCategory type, Set\u003cDescriptor\u003e descriptors) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        requireAllNonNull(type, title, descriptors);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        this.descriptors.addAll(descriptors);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public Title getTitle() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public ProfileItemCategory getType() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public Set\u003cDescriptor\u003e getDescriptors() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return Collections.unmodifiableSet(descriptors);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Returns true if both items are the have the same name and type."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * This defines a weaker notion of equality between two ProfileItemObjects."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @param otherItem item to compare to."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @return True if and only if the 2 items have the same identity fields."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public boolean isSameItem(Item otherItem) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        if (otherItem \u003d\u003d this) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        if (!(otherItem instanceof ProfileItem)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        ProfileItem otherProfileItem \u003d (ProfileItem) otherItem;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return otherItem !\u003d null"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                \u0026\u0026 otherProfileItem.getType().equals(getType())"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                \u0026\u0026 (otherProfileItem.getTitle().equals(getTitle()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Returns true if both profile item have the same data fields and descriptors."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * This defines a stronger notion of equality between two ProfileItem objects."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        if (!(other instanceof ProfileItem)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        ProfileItem otherProfileItem \u003d (ProfileItem) other;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return otherProfileItem !\u003d null"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                \u0026\u0026 otherProfileItem.getType().equals(getType())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                \u0026\u0026 (otherProfileItem.getTitle().equals(getTitle()))"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                \u0026\u0026 (otherProfileItem.getDescriptors().equals(getDescriptors()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return Objects.hash(title, type, descriptors);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        builder.append(getTitle())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                .append(\" Type: \")"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                .append(getType())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                .append(\" Descriptors: \");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        getDescriptors().forEach(builder::append);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Obtains the name of the item."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @return Item name."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public String getItemName() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return PROFILE_NAME;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Obtains the mapping of all field names to their corresponding fields."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @return Mapping of field names to fields for the ProfileItem."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public LinkedHashMap\u003cString, Object\u003e getMapping() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        LinkedHashMap\u003cString, Object\u003e mapping \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        mapping.put(\"Title\", title);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        mapping.put(\"Type\", type);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        mapping.put(\"Descriptors\", descriptors);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return mapping;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public JsonAdaptedItem getJsonAdaptedItem() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return new JsonAdaptedProfileItem(this);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "keanecjy": 2,
      "orzymandias": 135,
      "ZoroarkDarkrai": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/profile/ProfileItemCategory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "package seedu.address.model.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.model.util.ProfileItemCategoryUtil.ACHIEVEMENT_KEYWORD;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.model.util.ProfileItemCategoryUtil.EXPERIENCE_KEYWORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.model.util.ProfileItemCategoryUtil.SKILL_KEYWORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " * UserProfileCategory class contains the valid category for user profile."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "public enum ProfileItemCategory {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    EXPERIENCE,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    ACHIEVEMENT,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    SKILL;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            \"ProfileItem category c/ can only be experience, achievement or skill\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Returns true if the profile item category is valid."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @param profileItemCategory Input status."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @return True if status is valid, false otherwise."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static boolean isValidProfileItemCategory(String profileItemCategory) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return profileItemCategory.equals(EXPERIENCE_KEYWORD)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                || profileItemCategory.equals(ACHIEVEMENT_KEYWORD)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                || profileItemCategory.equals(SKILL_KEYWORD);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Returns a string representation of the {@code ProfileItemCategory}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @return String representation of the {@code ProfileItemCategory} in lower case."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        return super.toString().toLowerCase();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/model/profile/Title.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "package seedu.address.model.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.model.wrapper.AlphaNumericWord;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " * Represents a title of a field in a {@code ProfileItem}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAlphaNumericWord(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "orzymandias"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "public class Title extends AlphaNumericWord {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "            \"Profile Item Titles should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * Constructs a {@code Title} for the {@code ProfileItem}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     * @param title A valid title for the profile item."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public Title(String title) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        super(title, MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tab/Tab.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.model.tab;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * The API of the Tab component."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public interface Tab {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Replaces the current tab name with {@code tabName}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    void setTabName(TabName tabName);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Retrieves the current tab name"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    TabName getTabName();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tab/TabManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.model.tab;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * todo javadoc"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class TabManager implements Tab {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private TabName tabName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Initializes TabManger which controls the current {@code tabName}. By default, it is always Company tab."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public TabManager() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        tabName \u003d TabName.COMPANY; // default tab that is displayed to user each time the app is opened."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Retrieves the current {@code tabName}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public TabName getTabName() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return tabName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Replaces {@code this.tabName} with {@code tabName}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void setTabName(TabName tabName) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.tabName \u003d tabName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 47,
      "seanjyjy": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/DateUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * DateUtil class which provides the input and output formats for all dates, as well as methods for date format"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * matching."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class DateUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // Output date formats"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String DATE_TIME_LONG_FORMAT \u003d \"d MMM yyyy @ h.mm a\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String DATE_TIME_SHORT_FORMAT \u003d \"d MMM\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // Input date formats"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String DATE_INPUT_FORMAT \u003d \"d-M-yy\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String DATE_TIME_INPUT_FORMAT \u003d \"d-M-yy HHmm\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // Default timing if user does not input a time"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final String DEFAULT_TIME \u003d \"23:59\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"Checks for status date validity failed\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Checks if the input given matches the d-M-yy HHmm format."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param input User input."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return True if input has the date and time format, false otherwise."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static boolean isDateTimeFormat(String input) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            LocalDateTime.parse(input, formatterDateTime(DATE_TIME_INPUT_FORMAT));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Checks if the input given matches the d-M-yy format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param input User input."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return True if input has the date format, false otherwise."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static boolean isDateFormat(String input) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            LocalDate.parse(input, formatterDateTime(DATE_INPUT_FORMAT));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Creates a LocalDateTime object with d MMM yyyy @ h.mm a format."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param date Input date from user."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return A LocalDate object."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static LocalDateTime formatDate(String date) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        LocalDate localDate \u003d LocalDate.parse(date, formatterDateTime(DATE_INPUT_FORMAT));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        LocalTime currentTime \u003d LocalTime.parse(DEFAULT_TIME);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return LocalDateTime.of(localDate, currentTime);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Creates a LocalDateTime object with d MMM yyyy @ h.mm a format."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param dateAndTime Input date and time from user."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Formatted date and time."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static LocalDateTime formatDateTime(String dateAndTime) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return LocalDateTime.parse(dateAndTime, formatterDateTime(DATE_TIME_INPUT_FORMAT));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Converts the string status date to a LocalDateTime object."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param statusDate Input status date."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return LocalDateTime object."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static LocalDateTime convertToDateTime(String statusDate) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (isDateTimeFormat(statusDate)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return formatDateTime(statusDate);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } else if (isDateFormat(statusDate)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return formatDate(statusDate);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assert false : ERROR_MESSAGE;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Creates a DateTimeFormatter using the input pattern."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param pattern String pattern."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return The DateTimeFormatter based the pattern."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static DateTimeFormatter formatterDateTime(String pattern) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return DateTimeFormatter.ofPattern(pattern);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 107
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/ItemUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * ItemUtil class which provides the alias for all items."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class ItemUtil {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String COMPANY_ALIAS \u003d \"com\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String INTERNSHIP_ALIAS \u003d \"int\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String APPLICATION_ALIAS \u003d \"app\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String PROFILE_ALIAS \u003d \"me\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String COMPANY_NAME \u003d \"company\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String INTERNSHIP_NAME \u003d \"internship\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String APPLICATION_NAME \u003d \"application\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String PROFILE_NAME \u003d \"profile\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/ProfileItemCategoryUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "public class ProfileItemCategoryUtil {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final String EXPERIENCE_KEYWORD \u003d \"experience\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final String ACHIEVEMENT_KEYWORD \u003d \"achievement\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "    public static final String SKILL_KEYWORD \u003d \"skill\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "orzymandias": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ItemList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"family\")),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public static ItemList\u003cPerson\u003e getSampleAddressBook() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        ItemList\u003cPerson\u003e sampleAb \u003d new ItemList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            sampleAb.addItem(samplePerson);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 4,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/StatusUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * StatusUtil class which provides the available statuses for an internship application."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class StatusUtil {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String APPLIED_KEYWORD \u003d \"Applied\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String INTERVIEW_KEYWORD \u003d \"Interview\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String WAITING_KEYWORD \u003d \"Waiting\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String REJECTED_KEYWORD \u003d \"Rejected\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String OFFERED_KEYWORD \u003d \"Offered\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String ACCEPTED_KEYWORD \u003d \"Accepted\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/wrapper/AlphaNumericWord.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.model.wrapper;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Represents a alphanumeric word object."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAlphaNumericWord(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class AlphaNumericWord {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Constructs a {@code AlNumWord}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param alphaNumericWord A valid word consisting of only alphanumeric characters."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public AlphaNumericWord(String alphaNumericWord, String messageConstraints) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireNonNull(alphaNumericWord);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        checkArgument(isValidAlphaNumericWord(alphaNumericWord), messageConstraints);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        value \u003d alphaNumericWord;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns true if a given string only consists of alphanumeric characters."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static boolean isValidAlphaNumericWord(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                || (other instanceof AlphaNumericWord // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                \u0026\u0026 value.equals(((AlphaNumericWord) other).value)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/wrapper/NonEmptyString.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.model.wrapper;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Represents a non empty string object."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidNonEmptyString(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class NonEmptyString {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Represents a string that contains at least one non-space character."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^(?!\\\\s*$).+\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Constructs a {@code AlNumWord}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param nonEmptyString A valid word that has at least one non-space character."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public NonEmptyString(String nonEmptyString, String messageConstraints) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireNonNull(nonEmptyString);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        checkArgument(isValidNonEmptyString(nonEmptyString), messageConstraints);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        value \u003d nonEmptyString;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns true if a given string is a not empty."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static boolean isValidNonEmptyString(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                || (other instanceof NonEmptyString // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                \u0026\u0026 value.equals(((NonEmptyString) other).value)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/wrapper/PositiveNumber.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.model.wrapper;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Represents a positive number object."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPositiveNumber(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class PositiveNumber {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[1-9]\\\\d*\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Constructs a {@code PositiveNumber}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param number Input number."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public PositiveNumber(String number, String messageConstraints) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        requireNonNull(number);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        checkArgument(isValidPositiveNumber(number), messageConstraints);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        value \u003d number;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns true if a given string is a valid number."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Valid PositiveNumber is defined as a positive number."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static boolean isValidPositiveNumber(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                || (other instanceof PositiveNumber // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                \u0026\u0026 value.equals(((PositiveNumber) other).value)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonItemListStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ReadOnlyItemList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.item.JsonAdaptedItem;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " * A class to access ItemList data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "public class JsonItemListStorage\u003cT extends Item, U extends JsonAdaptedItem\u003e implements ListStorage\u003cT, U\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonItemListStorage.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final Class\u003cT\u003e contentClass;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final Class\u003cU\u003e jsonClass;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Initializes the json item list storage."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @param filePath     path of the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @param contentClass item class saved in the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @param jsonClass    json adapted class of the item."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public JsonItemListStorage(Path filePath, Class\u003cT\u003e contentClass, Class\u003cU\u003e jsonClass) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.contentClass \u003d contentClass;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.jsonClass \u003d jsonClass;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public Path getItemListFilePath() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public Optional\u003cReadOnlyItemList\u003cT\u003e\u003e readItemList() throws DataConversionException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return readItemList(filePath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Similar to {@link #readItemList()}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public Optional\u003cReadOnlyItemList\u003cT\u003e\u003e readItemList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        Optional\u003cJsonSerializableItemList\u003cT, U\u003e\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                filePath, contentClass, jsonClass);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (jsonAddressBook.isEmpty()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void saveItemList(ReadOnlyItemList\u003cT\u003e itemList) throws IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        saveItemList(itemList, filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Similar to {@link #saveItemList(ReadOnlyItemList)}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void saveItemList(ReadOnlyItemList\u003cT\u003e itemList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        requireNonNull(itemList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableItemList\u003cT, U\u003e(itemList), filePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 39,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableItemList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ItemList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ReadOnlyItemList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.item.JsonAdaptedItem;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " * An Immutable Item List that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "public class JsonSerializableItemList\u003cT extends Item, U extends JsonAdaptedItem\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ITEM \u003d \"Item list contains duplicate item(s).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final List\u003cU\u003e items \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Constructs a {@code JsonSerializableItemList} with the given items."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public JsonSerializableItemList(@JsonProperty(\"items\") List\u003cU\u003e items) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.items.addAll(items);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Converts a given {@code ReadOnlyItemList} into this class for Jackson use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableItemList}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public JsonSerializableItemList(ReadOnlyItemList\u003cT\u003e source) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        items.addAll(source.getItemList().stream().map(item -\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                (U) item.getJsonAdaptedItem()).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Converts this item list into the model\u0027s {@code ItemList\u003cT\u003e} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public ItemList\u003cT\u003e toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        ItemList\u003cT\u003e itemList \u003d new ItemList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        for (U jsonAdaptedItem : items) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            T item \u003d (T) jsonAdaptedItem.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            if (itemList.hasItem(item)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ITEM);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            itemList.addItem(item);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return itemList;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonUserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 2,
      "-": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/ListStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ItemList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ReadOnlyItemList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.item.JsonAdaptedItem;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " * Represents a storage for {@link seedu.address.model.item.ItemList}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "public interface ListStorage\u003cT extends Item, U extends JsonAdaptedItem\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    Path getItemListFilePath();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Returns ItemList data as a {@link ItemList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    Optional\u003cReadOnlyItemList\u003cT\u003e\u003e readItemList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @see #getItemListFilePath()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    Optional\u003cReadOnlyItemList\u003cT\u003e\u003e readItemList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Saves the given {@link ItemList} to the storage."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @param itemList cannot be null."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    void saveItemList(ReadOnlyItemList\u003cT\u003e itemList) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @see #saveItemList(ReadOnlyItemList)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    void saveItemList(ReadOnlyItemList\u003cT\u003e itemList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.application.ApplicationItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.company.CompanyItem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.profile.ProfileItem;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.application.JsonAdaptedApplicationItem;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.company.JsonAdaptedCompanyItem;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.person.JsonAdaptedPerson;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.profile.JsonAdaptedProfileItem;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "public interface Storage extends UserPrefsStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Gets the address book storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @return address book storage."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    ListStorage\u003cPerson, JsonAdaptedPerson\u003e getAddressBookStorage();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Gets the application item list storage."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @return application item list storage."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    ListStorage\u003cApplicationItem, JsonAdaptedApplicationItem\u003e getApplicationItemListStorage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Gets the company item list storage."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @return company item list storage."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    ListStorage\u003cCompanyItem, JsonAdaptedCompanyItem\u003e getCompanyItemListStorage();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Gets the profile item list storage."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @return profile item list storage."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    ListStorage\u003cProfileItem, JsonAdaptedProfileItem\u003e getProfileItemListStorage();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 35,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.application.ApplicationItem;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.company.CompanyItem;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.profile.ProfileItem;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.application.JsonAdaptedApplicationItem;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.company.JsonAdaptedCompanyItem;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.person.JsonAdaptedPerson;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.profile.JsonAdaptedProfileItem;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " * Manages storage of ItemList data in local storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final ListStorage\u003cPerson, JsonAdaptedPerson\u003e addressBookStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final ListStorage\u003cApplicationItem, JsonAdaptedApplicationItem\u003e applicationItemListStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final ListStorage\u003cCompanyItem, JsonAdaptedCompanyItem\u003e companyItemListStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final ListStorage\u003cProfileItem, JsonAdaptedProfileItem\u003e profileItemListStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code ItemListStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public StorageManager(ListStorage\u003cPerson, JsonAdaptedPerson\u003e addressBookStorage,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            ListStorage\u003cApplicationItem, JsonAdaptedApplicationItem\u003e applicationItemListStorage,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            ListStorage\u003cCompanyItem, JsonAdaptedCompanyItem\u003e companyItemListStorage,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            ListStorage\u003cProfileItem, JsonAdaptedProfileItem\u003e profileItemListStorage,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.applicationItemListStorage \u003d applicationItemListStorage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.companyItemListStorage \u003d companyItemListStorage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.profileItemListStorage \u003d profileItemListStorage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Get ListStorage \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public ListStorage\u003cPerson, JsonAdaptedPerson\u003e getAddressBookStorage() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return addressBookStorage;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public ListStorage\u003cApplicationItem, JsonAdaptedApplicationItem\u003e getApplicationItemListStorage() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return applicationItemListStorage;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public ListStorage\u003cCompanyItem, JsonAdaptedCompanyItem\u003e getCompanyItemListStorage() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return companyItemListStorage;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public ListStorage\u003cProfileItem, JsonAdaptedProfileItem\u003e getProfileItemListStorage() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return profileItemListStorage;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 32,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/application/JsonAdaptedApplicationItem.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "package seedu.address.storage.application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.application.ApplicationItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.application.Status;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.application.StatusDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.internship.InternshipItem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.util.DateUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.internship.JsonAdaptedInternshipItem;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.item.JsonAdaptedItem;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " * Jackson-friendly version of {@link ApplicationItem}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "public class JsonAdaptedApplicationItem extends JsonAdaptedItem {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Application item\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final String status;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final String statusDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final JsonAdaptedInternshipItem internshipItem;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Constructs a {@code JsonAdaptedApplicationItem} with the given application item details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public JsonAdaptedApplicationItem(@JsonProperty(\"status\") String status,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            @JsonProperty(\"statusDate\") String statusDate,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            @JsonProperty(\"internshipItem\") JsonAdaptedInternshipItem internshipItem) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.statusDate \u003d statusDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.internshipItem \u003d internshipItem;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Converts a given {@code ApplicationItem} into this class for Jackson use."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public JsonAdaptedApplicationItem(ApplicationItem source) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        status \u003d source.getStatus().toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        statusDate \u003d source.getStatusDate().toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        internshipItem \u003d new JsonAdaptedInternshipItem(source.getInternshipItem());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Converts this Jackson-friendly adapted internship item object into the model\u0027s {@code ApplicationItem} object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted application item."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public ApplicationItem toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        final InternshipItem itemInternship \u003d internshipItem.toModelType();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (status \u003d\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                    Status.class.getSimpleName()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (!Status.isValidStatus(status)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            throw new IllegalValueException(Status.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        final Status itemStatus \u003d Status.valueOf(status);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (statusDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                    StatusDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (!StatusDate.isValidDate(statusDate)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            throw new IllegalValueException(StatusDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        final StatusDate itemStatusDate \u003d new StatusDate(DateUtil.convertToDateTime(statusDate));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return new ApplicationItem(itemInternship, itemStatus, itemStatusDate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/company/JsonAdaptedCompanyItem.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "package seedu.address.storage.company;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.company.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.company.CompanyItem;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.company.CompanyName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.company.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.company.Industry;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.company.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.internship.InternshipItem;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.internship.JsonAdaptedInternshipItem;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.item.JsonAdaptedItem;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " * Jackson-friendly version of {@link CompanyItem}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "public class JsonAdaptedCompanyItem extends JsonAdaptedItem {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Company item\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final String companyName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final Set\u003cJsonAdaptedIndustry\u003e industries \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final List\u003cJsonAdaptedInternshipItem\u003e internships \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Constructs a {@code JsonAdaptedCompanyItem} with the given company item details."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public JsonAdaptedCompanyItem(@JsonProperty(\"companyName\") String companyName,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            @JsonProperty(\"phone\") String phone, @JsonProperty(\"email\") String email,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            @JsonProperty(\"address\") String address, @JsonProperty(\"industries\") Set\u003cJsonAdaptedIndustry\u003e industries,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            @JsonProperty(\"internships\") List\u003cJsonAdaptedInternshipItem\u003e internships) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.companyName \u003d companyName;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.industries.addAll(industries);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.internships.addAll(internships);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Converts a given {@code CompanyItem} into this class for Jackson use."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public JsonAdaptedCompanyItem(CompanyItem source) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        companyName \u003d source.getCompanyName().value;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        address \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        industries.addAll(source.getIndustries().stream()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                .map(JsonAdaptedIndustry::new)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        internships.addAll(source.getInternships().stream()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                .map(JsonAdaptedInternshipItem::new)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Converts this Jackson-friendly adapted company item object into the model\u0027s {@code CompanyItem} object."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted company item."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public CompanyItem toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (companyName \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                    CompanyName.class.getSimpleName()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (!CompanyName.isValidAlphaNumericWord(companyName)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            throw new IllegalValueException(CompanyName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        final CompanyName itemCompanyName \u003d new CompanyName(companyName);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                    Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        final Phone itemPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                    Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        final Email itemEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                    Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        final Address itemAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        final Set\u003cIndustry\u003e itemIndustries \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        for (JsonAdaptedIndustry industry : industries) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            itemIndustries.add(industry.toModelType());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        final List\u003cInternshipItem\u003e itemInternships \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        for (JsonAdaptedInternshipItem internship : internships) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            itemInternships.add(internship.toModelType());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return new CompanyItem(itemCompanyName, itemPhone, itemEmail, itemAddress, itemIndustries);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 126
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/company/JsonAdaptedIndustry.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "package seedu.address.storage.company;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.company.Industry;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " * Jackson-friendly version of {@link Industry}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "class JsonAdaptedIndustry {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final String industryType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Constructs a {@code JsonAdaptedIndustry} with the given {@code industry}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public JsonAdaptedIndustry(String industryType) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.industryType \u003d industryType;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Converts a given {@code Industry} into this class for Jackson use."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public JsonAdaptedIndustry(Industry source) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        industryType \u003d source.value;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public String getIndustryName() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return industryType;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Converts this Jackson-friendly adapted industry object into the model\u0027s {@code Industry} object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted industry."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public Industry toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (!Industry.isValidAlphaNumericWord(industryType)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            throw new IllegalValueException(Industry.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return new Industry(industryType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/internship/JsonAdaptedInternshipItem.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "package seedu.address.storage.internship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.company.CompanyName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.internship.InternshipItem;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.internship.JobTitle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.internship.Period;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.internship.Requirement;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.internship.Wage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.item.JsonAdaptedItem;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " * Jackson-friendly version of {@link InternshipItem}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "public class JsonAdaptedInternshipItem extends JsonAdaptedItem {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Internship item\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final String companyName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final String jobTitle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final String period;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final String wage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final Set\u003cJsonAdaptedRequirement\u003e requirements \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Constructs a {@code JsonAdaptedInternshipItem} with the given internship item details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public JsonAdaptedInternshipItem(@JsonProperty(\"companyName\") String companyName,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            @JsonProperty(\"jobTitle\") String jobTitle, @JsonProperty(\"period\") String period,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            @JsonProperty(\"wage\") String wage, @JsonProperty(\"requirements\") Set\u003cJsonAdaptedRequirement\u003e requirements) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.companyName \u003d companyName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.jobTitle \u003d jobTitle;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.period \u003d period;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.wage \u003d wage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.requirements.addAll(requirements);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Converts a given {@code InternshipItem} into this class for Jackson use."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public JsonAdaptedInternshipItem(InternshipItem source) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        companyName \u003d source.getCompanyName().value;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        jobTitle \u003d source.getJobTitle().value;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        period \u003d source.getPeriod().value;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        wage \u003d source.getWage().value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        requirements.addAll(source.getRequirements().stream()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                .map(JsonAdaptedRequirement::new)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Converts this Jackson-friendly adapted internship item object into the model\u0027s {@code InternshipItem} object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted internship item."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public InternshipItem toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (companyName \u003d\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                    CompanyName.class.getSimpleName()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (!CompanyName.isValidAlphaNumericWord(companyName)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            throw new IllegalValueException(CompanyName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        final CompanyName itemCompanyName \u003d new CompanyName(companyName);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (jobTitle \u003d\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                    JobTitle.class.getSimpleName()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (!JobTitle.isValidAlphaNumericWord(jobTitle)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            throw new IllegalValueException(JobTitle.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        final JobTitle itemJobTitle \u003d new JobTitle(jobTitle);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (period \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                    Period.class.getSimpleName()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (!Period.isValidNonEmptyString(period)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            throw new IllegalValueException(Period.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        final Period itemPeriod \u003d new Period(period);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (wage \u003d\u003d null) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Wage.class.getSimpleName()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (!Wage.isValidPositiveNumber(wage)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            throw new IllegalValueException(Wage.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        final Wage itemWage \u003d new Wage(wage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        final Set\u003cRequirement\u003e itemRequirements \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        for (JsonAdaptedRequirement requirement : requirements) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            itemRequirements.add(requirement.toModelType());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return new InternshipItem(itemCompanyName, itemJobTitle, itemPeriod, itemWage, itemRequirements);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 109
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/internship/JsonAdaptedRequirement.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "package seedu.address.storage.internship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.internship.Requirement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " * Jackson-friendly version of {@link Requirement}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "public class JsonAdaptedRequirement {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final String requirement;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Constructs a {@code JsonAdaptedRequirement} with the given {@code requirement}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public JsonAdaptedRequirement(String requirement) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.requirement \u003d requirement;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Converts a given {@code Requirement} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public JsonAdaptedRequirement(Requirement source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        requirement \u003d source.value;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public String getRequirementName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return requirement;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Converts this Jackson-friendly adapted requirement object into the model\u0027s {@code Requirement} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted requirement."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public Requirement toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (!Requirement.isValidNonEmptyString(requirement)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            throw new IllegalValueException(Requirement.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return new Requirement(requirement);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/item/JsonAdaptedItem.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "package seedu.address.storage.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "/*"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    Represents a Jackson-friendly version  of an item."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "public abstract class JsonAdaptedItem {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Converts this Jackson-friendly adapted item object into the model\u0027s {@code Item} object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted item."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public abstract Item toModelType() throws IllegalValueException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/person/JsonAdaptedPerson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "package seedu.address.storage.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.item.JsonAdaptedItem;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "public class JsonAdaptedPerson extends JsonAdaptedItem {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelTags);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 4,
      "-": 107
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/person/JsonAdaptedTag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "package seedu.address.storage.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        tagName \u003d source.getName();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 1,
      "-": 46,
      "seanjyjy": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/profile/JsonAdaptedDescriptor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "package seedu.address.storage.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.profile.Descriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " * Jackson-friendly version of {@link Descriptor}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "public class JsonAdaptedDescriptor {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final String descriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Constructs a {@code JsonAdaptedDescriptor} with the given {@code descriptor}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public JsonAdaptedDescriptor(String descriptor) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.descriptor \u003d descriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Converts a given {@code Descriptor} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public JsonAdaptedDescriptor(Descriptor source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        descriptor \u003d source.descriptor;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public String getDescriptorName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Converts this Jackson-friendly adapted industry object into the model\u0027s {@code Descriptor} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted industry."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public Descriptor toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (!Descriptor.isValidDescriptor(descriptor)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            throw new IllegalValueException(Descriptor.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return new Descriptor(descriptor);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/profile/JsonAdaptedProfileItem.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "package seedu.address.storage.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.profile.Descriptor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.profile.ProfileItem;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.profile.ProfileItemCategory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.profile.Title;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.item.JsonAdaptedItem;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " * Jackson-friendly version of {@link ProfileItem}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "public class JsonAdaptedProfileItem extends JsonAdaptedItem {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Profile item\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final String profileType;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final Set\u003cJsonAdaptedDescriptor\u003e descriptors \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Constructs a {@code JsonAdaptedProfileItem} with the given profile item details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public JsonAdaptedProfileItem(@JsonProperty(\"title\") String title, @JsonProperty(\"profileType\") String profileType,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            @JsonProperty(\"descriptors\") Set\u003cJsonAdaptedDescriptor\u003e descriptors) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.profileType \u003d profileType;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.descriptors.addAll(descriptors);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Converts a given {@code ProfileItem} into this class for Jackson use."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public JsonAdaptedProfileItem(ProfileItem source) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        title \u003d source.getTitle().value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        profileType \u003d source.getType().toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        descriptors.addAll(source.getDescriptors().stream()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                .map(JsonAdaptedDescriptor::new)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Converts this Jackson-friendly adapted profile item object into the model\u0027s {@code ProfileItem} object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted company item."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public ProfileItem toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (title \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                    Title.class.getSimpleName()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (!Title.isValidAlphaNumericWord(title)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            throw new IllegalValueException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        final Title itemTitle \u003d new Title(title);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (profileType \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                    ProfileItemCategory.class.getSimpleName()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        if (!ProfileItemCategory.isValidProfileItemCategory(profileType)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            throw new IllegalValueException(ProfileItemCategory.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        final ProfileItemCategory itemProfileType \u003d ProfileItemCategory.valueOf(profileType);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        final Set\u003cDescriptor\u003e itemDescriptors \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        for (JsonAdaptedDescriptor descriptor : descriptors) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            itemDescriptors.add(descriptor.toModelType());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return new ProfileItem(itemTitle, itemProfileType, itemDescriptors);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.layout.Priority;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    // Style class"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    // FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    // Image Link"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String ARROW_IMAGE_LINK \u003d \"/images/sendarrow.png\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private ImageView buttonImage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code CommandBox} with the given {@code CommandExecutor}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setCommandTextFieldProperties();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setSendButtonProperties();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Loads the arrow image and set the image as the button icon."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void setSendButtonIcon() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Image arrow \u003d new Image(this.getClass().getResourceAsStream(ARROW_IMAGE_LINK));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        buttonImage.setImage(arrow);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets the button style."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void setSendButtonProperties() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        HBox.setHgrow(sendButton, Priority.ALWAYS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setSendButtonIcon();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets the command text field style."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void setCommandTextFieldProperties() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        HBox.setHgrow(commandTextField, Priority.ALWAYS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 80,
      "seanjyjy": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ExitDialog.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import javafx.scene.control.Dialog;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import javafx.scene.control.DialogPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import javafx.stage.Window;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "public class ExitDialog extends UiPart\u003cDialogPane\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private static final String FXML \u003d \"ExitDialog.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private DialogPane dialogPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private Button yesButton;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private Button noButton;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private Dialog\u003cBoolean\u003e dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private WindowEvent event;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * Creates a new Exit dialog."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     * @param event event that triggers the creation of exit dialog."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public ExitDialog(WindowEvent event, HelpWindow helpWindow) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        dialog \u003d new Dialog\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        dialog.setDialogPane(dialogPane);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        Window window \u003d dialog.getDialogPane().getScene().getWindow();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        window.setOnCloseRequest((e) -\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            dialog.hide();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            event.consume();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        });"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.event \u003d event;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        this.helpWindow \u003d helpWindow;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        dialog.showAndWait();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private boolean confirmExit() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        dialog.setResult(Boolean.TRUE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        dialog.hide();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private boolean cancelExit() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        dialog.setResult(Boolean.TRUE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        dialog.hide();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        event.consume();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.display.ApplicationDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.display.CompanyDisplay;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.display.InformationDisplay;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.display.ProfileDisplay;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.panel.ApplicationListPanel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.panel.CompanyListPanel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.panel.ListPanel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.panel.ProfileListPanel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.tabs.Tabs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    //FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    //FXML properties"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final int PERSON_LIST_HEIGHT_SHRINK \u003d 255;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final int RESULT_HEIGHT_SHRINK \u003d 350;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private ListPanel listPanel;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private InformationDisplay informationDisplay;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Tabs tabs;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private VBox cardList;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private StackPane listPanelPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private VBox display;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private ScrollPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private VBox commandBoxPlaceholder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private VBox tabsContainer;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        initializeUi(primaryStage, logic);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * todo Javadocs"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets up the GUI properties in the {@code primaryStage} using the stored user settings in {@code logic}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void initializeUi(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        bindHeights(primaryStage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        primaryStage.setOnCloseRequest(event -\u003e {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                    (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            ExitDialog exitDialog \u003d new ExitDialog(event, helpWindow);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            exitDialog.show();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Binds the height of {@code personList} and {@code resultDisplayPlaceHolder} in the {@code primaryStage}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void bindHeights(Stage primaryStage) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        cardList.prefWidthProperty().bind(primaryStage.widthProperty().subtract(PERSON_LIST_HEIGHT_SHRINK));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        resultDisplayPlaceholder.prefWidthProperty().bind(primaryStage.widthProperty().subtract(RESULT_HEIGHT_SHRINK));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        listPanel \u003d new CompanyListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        listPanelPlaceholder.getChildren().add(listPanel.getRoot());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        resultDisplayPlaceholder.setContent(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        display.getChildren().clear();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        informationDisplay \u003d CompanyDisplay.getCompanyDisplay(primaryStage);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        display.getChildren().add(informationDisplay.getRoot());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        tabs \u003d Tabs.getTabs(this, primaryStage, logic);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        tabsContainer.getChildren().add(tabs);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Displays the GUI."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        primaryStage.fireEvent(new WindowEvent(primaryStage, WindowEvent.WINDOW_CLOSE_REQUEST));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public ListPanel getListPanel() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return listPanel;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Switch the tabs of the application."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void switchTab() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        tabs.switchTab();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            if (commandResult.isSwitchTab()) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                switchTab();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Changes the display of screen, depending on {@code input}, in the {@code primaryStage}."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void changeDisplay(TabName input, Stage primaryStage) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assert (input.equals(TabName.APPLICATION) || input.equals(TabName.COMPANY) || input.equals(TabName.PROFILE));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        display.getChildren().clear();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        listPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        switch (input) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case COMPANY:"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            informationDisplay \u003d CompanyDisplay.getCompanyDisplay(primaryStage);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            listPanel \u003d new CompanyListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case APPLICATION:"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            informationDisplay \u003d ApplicationDisplay.getApplicationDisplay(primaryStage);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            listPanel \u003d new ApplicationListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case PROFILE:"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            informationDisplay \u003d ProfileDisplay.getProfileDisplay(primaryStage);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            listPanel \u003d new ProfileListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        display.getChildren().add(informationDisplay.getRoot());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        listPanelPlaceholder.getChildren().add(listPanel.getRoot());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 10,
      "-": 140,
      "seanjyjy": 91
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PanelDisplayKeyword.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Contains the panel display names."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class PanelDisplayKeyword {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /** Internship display names */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String JOB_TITLE_DISPLAY_NAME \u003d \"Job title\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String COMPANY_DISPLAY_NAME \u003d \"Company name\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String PERIOD_DISPLAY_NAME \u003d \"Period\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String WAGE_DISPLAY_NAME \u003d \"Wage\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String REQUIREMENTS_DISPLAY_NAME \u003d \"Requirements\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /** Application display names */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String STATUS_DISPLAY_NAME \u003d \"Status\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String DATE_DISPLAY_NAME \u003d \"Date\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ResultDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.text.TextFlow;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    // FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    // FXML properties"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String TEXT_COLOR \u003d \"#5A4DEB\"; // TODO change to red"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String TEXT_FONT \u003d \"Nunito\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private TextFlow resultDisplay;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Construct a display containing the results of the command."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Displays the {@code feedbackToUser} in {@code resultDisplay}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Text text \u003d new Text(feedbackToUser);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        clearHistory();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setNewText(text);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets the color and font of the {@code text}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void setTextStyle(Text text) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        text.setFill(Color.web(TEXT_COLOR));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        text.setFont(Font.font(TEXT_FONT));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Clears any old text in {@code resultDisplay}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void clearHistory() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        resultDisplay.getChildren().clear();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Displays the {@code text} in {@code resultDisplay}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void setNewText(Text text) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setTextStyle(text);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        resultDisplay.getChildren().add(text);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 25,
      "seanjyjy": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/MainWindow.css\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 88,
      "seanjyjy": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/cards/ApplicationCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.ui.cards;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * todo Javadocs"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class ApplicationCard extends Card {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    //Image Link"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String CALENDAR_IMAGE_LINK \u003d \"/images/calendar.png\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * todo Javadocs"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public ApplicationCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(person, displayedIndex);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        initializeInternshipCardGui();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * todo Javadocs"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void initializeInternshipCardGui() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // to be edited in the future!"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        initializeHeader(displayedIndex);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        initializeBody();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        initializeTags();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        initializeDate();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        initializeStatus();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * todo Javadocs"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void initializeStatus() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setRandomStatus(); // to be change in when other classes are ready."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * todo Javadocs"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void initializeDate() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Image calendarIcon \u003d new Image(this.getClass().getResourceAsStream(CALENDAR_IMAGE_LINK));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        calendar.setImage(calendarIcon);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        date.setText(\"21/07/2020\"); // to be changed later!"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    // TEMPORARY FUNCTION TO ALLOW DISPLAYS"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void setRandomStatus() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        int num \u003d (int) (Math.random() * (4));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        switch (num) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case (0):"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            status.setText(\"Accepted\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            statusBox.setStyle(\"-fx-background-color: #3ADB9D\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case (1):"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            status.setText(\"Rejected\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            statusBox.setStyle(\"-fx-background-color: #F02E62\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case (2):"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            status.setText(\"Waiting\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            statusBox.setStyle(\"-fx-background-color: #F4D014\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case (3):"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            status.setText(\"Ongoing\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            statusBox.setStyle(\"-fx-background-color: #3A65DB\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/cards/Card.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.ui.cards;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.textstyle.TitleDescription.createTitleDescription;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.text.TextFlow;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.textstyle.TitleDescription;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * A UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public abstract class Card extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    //FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String FXML \u003d \"Card.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    //Person\u0027s Attribute"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String ATTRIBUTE_PHONE \u003d \"Phone\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String ATTRIBUTE_ADDRESS \u003d \"Address\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String ATTRIBUTE_EMAIL \u003d \"Email\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    protected int displayedIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    protected VBox statusBox;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    protected Label status;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    protected ImageView calendar;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    protected Label date;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private TextFlow phone;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private TextFlow address;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private TextFlow email;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * todo Javadocs"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public Card(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.displayedIndex \u003d displayedIndex;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        //initializePersonCard(displayedIndex);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * todo Javadocs"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    protected void initializeHeader(int displayedIndex) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * todo Javadocs"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    protected void initializeBody() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setStyling(ATTRIBUTE_PHONE, person.getPhone().value);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setStyling(ATTRIBUTE_ADDRESS, person.getAddress().value);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setStyling(ATTRIBUTE_EMAIL, person.getEmail().value);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * todo Javadocs"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    protected void initializeTags() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            .sorted(Comparator.comparing(Tag::getName))"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            .forEach(tag -\u003e tags.getChildren().add(new Label(tag.getName())));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * todo Javadocs"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void setStyling(String type, String description) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        TitleDescription titleDescription \u003d createTitleDescription(type + \": \", description);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Text styledTitle \u003d titleDescription.getTitle();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Text styledDescription \u003d titleDescription.getDescription();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case ATTRIBUTE_PHONE:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            phone.getChildren().addAll(styledTitle, styledDescription);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case ATTRIBUTE_ADDRESS:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            address.getChildren().addAll(styledTitle, styledDescription);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case ATTRIBUTE_EMAIL:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            email.getChildren().addAll(styledTitle, styledDescription);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (!(other instanceof Card)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Card card \u003d (Card) other;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 52,
      "seanjyjy": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/cards/CompanyCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.ui.cards;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * todo Javadocs"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class CompanyCard extends Card {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * todo Javadocs"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public CompanyCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(person, displayedIndex);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        initializeCompanyCardGui();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * todo Javadocs"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void initializeCompanyCardGui() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // to be edited in the future!"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        initializeHeader(displayedIndex);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        initializeBody();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        initializeTags();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/cards/ProfileCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.ui.cards;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * todo Javadocs"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class ProfileCard extends Card {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * todo Javadocs"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public ProfileCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(person, displayedIndex);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        initializeUserCardGui();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * todo Javadocs"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void initializeUserCardGui() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // to be edited in the future!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        initializeHeader(displayedIndex);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        initializeBody();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        initializeTags();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/display/ApplicationDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.ui.display;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.display.TitleDescriptionDisplay.addTitleDescriptionDisplay;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * A display containing information about the chosen application."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class ApplicationDisplay extends InformationDisplay {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Constructs a {@code ApplicationDisplay} in the given {@code primaryStage}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private ApplicationDisplay(Stage primaryStage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(primaryStage);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setInformationTitle(\"Software Engineering\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // todo change when internship class is ready."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String[] titleArr \u003d {\"Company\", \"Industry\", \"Email\", \"Address\", \"Skills\", \"Wage\", \"Status\", \"Date\"};"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String[] descriptionArr \u003d {\"Shopee\", \"Software\", \"support@shopee.sg\", \"abc location\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \"Java, JavaScript, ReactJS, React Native, C++, C#, Rust, Objective-C, HTML, CSS, Python\", \"$3000\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \"Accepted\", \"25 March 2020\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        };"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        for (int i \u003d 0; i \u003c titleArr.length; i++) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            TitleDescriptionDisplay applicationInformation \u003d addTitleDescriptionDisplay(titleArr[i], descriptionArr[i],"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                TabName.APPLICATION);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            addInformation(applicationInformation);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates the {@code ApplicationDisplay} information in the {@code primaryStage}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static ApplicationDisplay getApplicationDisplay(Stage primaryStage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return new ApplicationDisplay(primaryStage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/display/CompanyDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.ui.display;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.display.TitleDescriptionDisplay.addTitleDescriptionDisplay;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * A display containing information about the chosen company."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class CompanyDisplay extends InformationDisplay {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Constructs a {@code CompanyDisplay} in the given {@code primaryStage}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private CompanyDisplay(Stage primaryStage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(primaryStage);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setInformationTitle(\"Google\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // todo change when Company class is ready."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String[] titleArr \u003d {\"Industry\", \"Jobs\"};"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String[] descriptionArr \u003d {\"Internet, Cloud Computing\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \"Artificial Intelligence, Software Engineering, Cloud Architect\"};"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        for (int i \u003d 0; i \u003c titleArr.length; i++) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            TitleDescriptionDisplay companyInformation \u003d addTitleDescriptionDisplay(titleArr[i], descriptionArr[i],"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                TabName.COMPANY);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            addInformation(companyInformation);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates the {@code CompanyDisplay} information in the {@code primaryStage}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static CompanyDisplay getCompanyDisplay(Stage primaryStage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return new CompanyDisplay(primaryStage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/display/InformationDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.ui.display;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * A display that contains information."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public abstract class InformationDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    //FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String FXML \u003d \"InformationDisplay.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    //FXML properties"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final int INFORMATION_HEIGHT_SHRINK \u003d 155;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private VBox informationDisplay;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private HBox nameBar;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Label informationTitle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private VBox information;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Constructs a {@code InformationDisplay} in the given {@code primaryStage}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public InformationDisplay(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        initializeInformationDisplay(primaryStage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets the size of {@code InformationDisplay} in the given {@code primaryStage}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void initializeInformationDisplay(Stage primaryStage) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        informationDisplay.prefHeightProperty().bind(primaryStage.heightProperty().subtract(INFORMATION_HEIGHT_SHRINK));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        nameBar.maxWidthProperty().bind(informationDisplay.widthProperty().subtract(100));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Adds {@code titleDescriptionDisplay} into {@code InformationDisplay}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    void addInformation(TitleDescriptionDisplay titleDescriptionDisplay) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        information.getChildren().addAll(titleDescriptionDisplay);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets the title of the {@code InformationDisplay}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    void setInformationTitle(String title) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        informationTitle.setText(title);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/display/ProfileDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.ui.display;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.display.TitleDescriptionDisplay.addTitleDescriptionDisplay;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * A display containing information about the chosen profile\u0027s item."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class ProfileDisplay extends InformationDisplay {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Constructs a {@code ProfileDisplay} in the given {@code primaryStage}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private ProfileDisplay(Stage primaryStage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(primaryStage);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setInformationTitle(\"Shoppee\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // todo change when internship class is ready."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String[] titleArr \u003d {\"Experience\", \"Achievement\", \"Skills\"};"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String[] descriptionArr \u003d {\"Internship at Govtech, Internship at Google, Internship at Facebook\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \"Special recognition in Hack n Roll, Leetcode weekly champion, Google code jam champion\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \"HTML, CSS, JavaScript, Java, Python, React, React Native, Vue, Angular, C, C++, C#, PHP, Rust\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        };"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        for (int i \u003d 0; i \u003c titleArr.length; i++) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            TitleDescriptionDisplay profileInformation \u003d addTitleDescriptionDisplay(titleArr[i], descriptionArr[i],"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                TabName.PROFILE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            addInformation(profileInformation);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates the {@code ProfileDisplay} information in the {@code primaryStage}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static ProfileDisplay getProfileDisplay(Stage primaryStage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return new ProfileDisplay(primaryStage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/display/TitleDescriptionDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.ui.display;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.ui.textstyle.TitleDescription.createTitleDescription;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.text.TextFlow;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.MainWindow;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.textstyle.TitleDescription;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * A display containing a title and a description."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class TitleDescriptionDisplay extends HBox {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    //FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String FXML \u003d \"/view/TitleDescriptionDisplay.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    //FXML properties"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String PROFILE_INFORMATION_WIDTH \u003d \"-fx-min-width: 95\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String COMPANY_AND_APPLICATION_INFORMATION_WIDTH \u003d \"-fx-min-width: 75\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private TextFlow title;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private TextFlow description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private VBox titleInformation;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private VBox descriptionInformation;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Constructs a {@code TitleDescriptionDisplay} with {@code displayTitle}, {@code displayDescription} for"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * {@code tab} display."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private TitleDescriptionDisplay(String displayTitle, String displayDescription, TabName tab) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(FXML));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        addDisplayInformation(displayTitle, displayDescription);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setWidth(tab);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Accessor to add a {@code TitleDescriptionDisplay} with {@code displayTitle}, {@code displayDescription} for"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * {@code tab} display."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static TitleDescriptionDisplay addTitleDescriptionDisplay(String displayTitle, String displayDescription,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        TabName tab) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return new TitleDescriptionDisplay(displayTitle, displayDescription, tab);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Adds a title and description into the {@code TitleDescriptionDisplay}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void addDisplayInformation(String displayTitle, String displayDescription) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        TitleDescription titleDescription \u003d createTitleDescription(displayTitle, displayDescription);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        title.getChildren().addAll(titleDescription.getTitle());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        description.getChildren().addAll(titleDescription.getDescription());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Adjust the width of the title based on which {@code tab} display."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void setWidth(TabName tab) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        switch (tab) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case COMPANY:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case APPLICATION:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            titleInformation.setStyle(COMPANY_AND_APPLICATION_INFORMATION_WIDTH);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case PROFILE:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            titleInformation.setStyle(PROFILE_INFORMATION_WIDTH);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 90
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/panel/ApplicationListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.ui.panel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.cards.ApplicationCard;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * todo Javadocs"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class ApplicationListPanel extends ListPanel {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * todo Javadocs"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public ApplicationListPanel(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(personList);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new ApplicationListViewCell());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * todo Javadocs"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    class ApplicationListViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                setGraphic(new ApplicationCard(person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/panel/CompanyListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.ui.panel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.cards.CompanyCard;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * todo Javadocs"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class CompanyListPanel extends ListPanel {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * todo Javadocs"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public CompanyListPanel(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(personList);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new CompanyListViewCell());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * todo Javadocs"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    class CompanyListViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                setGraphic(new CompanyCard(person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/panel/ListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.ui.panel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * todo Javadocs"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public abstract class ListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String FXML \u003d \"ListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    protected ListView\u003cPerson\u003e personListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ListPanel.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * todo Javadocs"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public ListPanel(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        personListView.setItems(personList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/panel/ProfileListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.ui.panel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.cards.ProfileCard;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * todo Javadocs"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class ProfileListPanel extends ListPanel {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * todo Javadocs"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public ProfileListPanel(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(personList);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new ProfileListViewCell());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * todo Javadocs"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    class ProfileListViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                setGraphic(new ProfileCard(person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/tabs/TabName.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.ui.tabs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Type of Tabs available."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public enum TabName {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    APPLICATION, COMPANY, PROFILE"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/tabs/Tabs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.ui.tabs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.layout.Pane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.MainWindow;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Tabs which allow switching of screens for different information."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class Tabs extends VBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    //FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String FXML \u003d \"/view/Tabs.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    //FXML properties"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String TRANSPARENT \u003d \"-fx-background-color: transparent;\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String TAB_COLOR \u003d \"-fx-background-color: #BED0F7;\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String APPLICATION_Y_TRANSLATE \u003d \"-fx-translate-y: -13.5\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String COMPANY_Y_TRANSLATE \u003d \"-fx-translate-y: 0\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String PROFILE_Y_TRANSLATE \u003d \"-fx-translate-y: -27\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    // Image links"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String APPLICATION_IMAGE_LINK \u003d \"/images/application.png\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String COMPANY_IMAGE_LINK \u003d \"/images/company.png\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String PROFILE_IMAGE_LINK \u003d \"/images/profile.png\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Button applicationButton;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Button companyButton;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Button profileButton;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private VBox application;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private VBox company;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private VBox profile;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private ImageView applicationIcon;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private ImageView companyIcon;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private ImageView profileIcon;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Constructs the {@code Tabs} in the given {@code primaryStage} of the {@code mainWindow}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Tabs(MainWindow mainWindow, Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            stage \u003d primaryStage;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            this.mainWindow \u003d mainWindow;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            this.logic \u003d logic;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            // Loading the information of the GUI"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(FXML));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            // initialize the GUI of the tabs."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            company.setStyle(TAB_COLOR);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            setTabIcons();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates the {@code Tabs} information in the {@code primaryStage} of the {@code mainWindow}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static Tabs getTabs(MainWindow mainWindow, Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return new Tabs(mainWindow, primaryStage, logic);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Handles the click {@code event} on the tabs."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void handleClick(ActionEvent event) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (event.getSource() \u003d\u003d applicationButton) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            selectApplication(stage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            logic.setTabName(TabName.APPLICATION);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } else if (event.getSource() \u003d\u003d companyButton) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            selectCompany(stage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            logic.setTabName(TabName.COMPANY);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } else if (event.getSource() \u003d\u003d profileButton) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            selectProfile(stage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            logic.setTabName(TabName.PROFILE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assert false : \"Invalid button\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Switch tabs."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void switchTab() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        TabName tabName \u003d logic.getTabName();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        switch (tabName) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case COMPANY:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            selectCompany(stage);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case APPLICATION:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            selectApplication(stage);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case PROFILE:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            selectProfile(stage);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets up the tab icons in GUI of {@code MainWindow}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void setTabIcons() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Image applicationIconImage \u003d new Image(getClass().getResourceAsStream(APPLICATION_IMAGE_LINK));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        applicationIcon.setImage(applicationIconImage);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Image companyIconPicture \u003d new Image(getClass().getResourceAsStream(COMPANY_IMAGE_LINK));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        companyIcon.setImage(companyIconPicture);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Image profileIconPicture \u003d new Image(getClass().getResourceAsStream(PROFILE_IMAGE_LINK));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        profileIcon.setImage(profileIconPicture);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets the display and tab to be of {@code application} in the {@code stage}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Currently it only switches the information display."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void selectApplication(Stage stage) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // adjust tab bar position"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setColor(application, APPLICATION_Y_TRANSLATE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setTransparent(company, COMPANY_Y_TRANSLATE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setTransparent(profile, PROFILE_Y_TRANSLATE);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // adjust the display of the gui"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        mainWindow.changeDisplay(TabName.APPLICATION, stage);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets the display and tab to be of {@code company} in the {@code stage}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Currently it only switches the information display."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void selectCompany(Stage stage) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // adjust tab bar position"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setTransparent(application, APPLICATION_Y_TRANSLATE);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setColor(company, COMPANY_Y_TRANSLATE);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setTransparent(profile, PROFILE_Y_TRANSLATE);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // adjust the display of the gui"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        mainWindow.changeDisplay(TabName.COMPANY, stage);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets the display and tab to be of {@code profile} in the {@code stage}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Currently it only switches the information display."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void selectProfile(Stage stage) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // adjust tab bar position"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setTransparent(application, APPLICATION_Y_TRANSLATE);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setTransparent(company, COMPANY_Y_TRANSLATE);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setColor(profile, PROFILE_Y_TRANSLATE);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // adjust the display of the gui"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        mainWindow.changeDisplay(TabName.PROFILE, stage);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets the color of the {@code scene} to be transparent."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private \u003cT extends Pane\u003e void setTransparent(T scene, String distance) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        scene.setStyle(TRANSPARENT + distance);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets the color of the {@code scene} to be {@code TAB_COLOR}."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private \u003cT extends Pane\u003e void setColor(T scene, String distance) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        scene.setStyle(TAB_COLOR + distance);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 199
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/textstyle/TitleDescription.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.ui.textstyle;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.text.FontWeight;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class TitleDescription {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String DISPLAY_FONT \u003d \"Nunito\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final int DISPLAY_SIZE \u003d 12;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String TITLE_COLOR \u003d \"#363F80\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String DESCRIPTION_COLOR \u003d \"#8E8FB5\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Text title;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Text description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Constructs a {@code TitleDescription} containing a title and a description."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private TitleDescription(Text title, Text description) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public Text getTitle() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public Text getDescription() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Constructs a {@code TitleDescription} that contains both the styled title and the styled description."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static TitleDescription createTitleDescription(String displayTitle, String displayDescription) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Text styledTitle \u003d new Text(displayTitle);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Text styledDescription \u003d new Text(displayDescription);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setTextStyle(styledTitle, Color.web(TITLE_COLOR));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setTextStyle(styledDescription, Color.web(DESCRIPTION_COLOR));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return new TitleDescription(styledTitle, styledDescription);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sets a text with a pre-defined font and its {@code color}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static void setTextStyle(Text text, Color color) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        text.setFont(Font.font(DISPLAY_FONT, FontWeight.BOLD, DISPLAY_SIZE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        text.setFill(color);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 52
    }
  },
  {
    "path": "src/main/resources/view/Card.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.text.TextFlow?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "      \u003cTextFlow fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "      \u003cTextFlow fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "      \u003cTextFlow fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  \u003cVBox styleClass\u003d\"cell_right_portion\" minHeight\u003d\"-Infinity\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    \u003cVBox fx:id\u003d\"statusBox\" styleClass\u003d\"cell_status_box_label\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "      \u003cLabel fx:id\u003d\"status\" styleClass\u003d\"cell_status_label\"/\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    \u003cImageView fitHeight\u003d\"23.0\" fitWidth\u003d\"23.0\" fx:id\u003d\"calendar\" translateY\u003d\"25\"/\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_date_label\"/\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 32,
      "seanjyjy": 13
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003cHBox xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  \u003cTextField focusTraversable\u003d\"false\" maxWidth\u003d\"Infinity\" styleClass\u003d\"text_field_style\" fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  \u003cButton styleClass\u003d\"button_style\" fx:id\u003d\"sendButton\" onAction\u003d\"#handleCommandEntered\" mnemonicParsing\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    \u003cgraphic\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "      \u003cImageView fitHeight\u003d\"20.0\" fitWidth\u003d\"20.0\" pickOnBounds\u003d\"true\" fx:id\u003d\"buttonImage\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    \u003c/graphic\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  \u003c/Button\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 3,
      "seanjyjy": 11
    }
  },
  {
    "path": "src/main/resources/view/ExitDialog.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "\u003c?import javafx.scene.control.ButtonBar?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "\u003c?import javafx.scene.control.DialogPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003cDialogPane fx:id\u003d\"dialogPane\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"144.0\" prefWidth\u003d\"300.0\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "   \u003cheader\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "      \u003cLabel text\u003d\"Confirm Exit\" textFill\u003d\"#363f80\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            \u003cFont name\u003d\"Nunito Bold\" size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "   \u003c/header\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "   \u003ccontent\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "      \u003cVBox spacing\u003d\"20.0\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            \u003cLabel text\u003d\"Are you sure you want to exit?\" textFill\u003d\"#8e8fb5\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            \u003cButtonBar buttonOrder\u003d\"\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "              \u003cbuttons\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                  \u003cButton fx:id\u003d\"yesButton\" alignment\u003d\"CENTER\" mnemonicParsing\u003d\"false\" onAction\u003d\"#confirmExit\" style\u003d\"-fx-background-color: #363f80;\" text\u003d\"Yes\" textFill\u003d\"WHITE\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                  \u003cButton fx:id\u003d\"noButton\" alignment\u003d\"CENTER\" mnemonicParsing\u003d\"false\" onAction\u003d\"#cancelExit\" style\u003d\"-fx-background-color: #8E8FB5;\" text\u003d\"No\" textFill\u003d\"WHITE\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "              \u003c/buttons\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            \u003c/ButtonBar\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "   \u003c/content\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "      \u003cInsets top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "\u003c/DialogPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 40,
      "seanjyjy": 1
    }
  },
  {
    "path": "src/main/resources/view/InformationDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003cVBox fx:id\u003d\"informationDisplay\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" styleClass\u003d\"information_display\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003cVBox minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003cVBox styleClass\u003d\"information_display_container\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \u003cLabel fx:id\u003d\"informationTitle\" styleClass\u003d\"information_display_title\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \u003cHBox fx:id\u003d\"nameBar\" styleClass\u003d\"information_display_bar\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003cVBox fx:id\u003d\"information\" styleClass\u003d\"information_container\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 19
    }
  },
  {
    "path": "src/main/resources/view/ListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cListView fx:id\u003d\"personListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "seanjyjy": 1
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" title\u003d\"InternHunter\" minWidth\u003d\"932\" minHeight\u003d\"743\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003cURL value\u003d\"@MainWindow.css\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "      \u003cAnchorPane styleClass\u003d\"main_background_style\" maxHeight\u003d\"Infinity\" maxWidth\u003d\"Infinity\" minHeight\u003d\"-Infinity\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "          \u003cGridPane styleClass\u003d\"main_background_style\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "              \u003cColumnConstraints hgrow\u003d\"SOMETIMES\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "              \u003cRowConstraints vgrow\u003d\"SOMETIMES\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "              \u003cVBox GridPane.columnIndex\u003d\"0\" GridPane.columnSpan\u003d\"1\" GridPane.rowIndex\u003d\"0\" GridPane.rowSpan\u003d\"5\" styleClass\u003d\"tabs_background_style\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \u003cVBox fx:id\u003d\"tabsContainer\" AnchorPane.topAnchor\u003d\"0.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" VBox.vgrow\u003d\"ALWAYS\" styleClass\u003d\"tabs_container_style\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "              \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "              \u003cScrollPane fx:id\u003d\"resultDisplayPlaceholder\" AnchorPane.bottomAnchor\u003d\"1.0\" GridPane.columnIndex\u003d\"1\" GridPane.columnSpan\u003d\"5\" GridPane.rowIndex\u003d\"3\" GridPane.valignment\u003d\"CENTER\" styleClass\u003d\"result_display_style\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "              \u003cVBox fillWidth\u003d\"true\" VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" AnchorPane.bottomAnchor\u003d\"1.0\" GridPane.columnIndex\u003d\"1\" GridPane.columnSpan\u003d\"5\" GridPane.rowIndex\u003d\"4\" GridPane.valignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "              \u003cVBox maxHeight\u003d\"Infinity\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"0\" GridPane.columnSpan\u003d\"4\" styleClass\u003d\"cards_container_style\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \u003cVBox fx:id\u003d\"cardList\" VBox.vgrow\u003d\"ALWAYS\" styleClass\u003d\"cards_container_inner_style\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                  \u003cStackPane fx:id\u003d\"listPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/VBox\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "              \u003cVBox fx:id\u003d\"display\" GridPane.columnIndex\u003d\"5\" GridPane.rowIndex\u003d\"0\" styleClass\u003d\"display_container_style\"/\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "          \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "      \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "seanjyjy": 33
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.text.TextFlow?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  \u003cpadding\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  \u003c/padding\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  \u003cTextFlow fx:id\u003d\"resultDisplay\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 2,
      "seanjyjy": 9
    }
  },
  {
    "path": "src/main/resources/view/Tabs.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003cfx:root type\u003d\"javafx.scene.layout.VBox\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" prefHeight\u003d\"100.0\" prefWidth\u003d\"95.0\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    \u003cHBox styleClass\u003d\"tab_parameter_style\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003cButton onAction\u003d\"#handleClick\" fx:id\u003d\"companyButton\" mnemonicParsing\u003d\"false\" styleClass\u003d\"tab_button_style\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003cgraphic\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \u003cVBox styleClass\u003d\"tab_container_style\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    \u003cImageView fitHeight\u003d\"26.0\" fitWidth\u003d\"26.0\" fx:id\u003d\"companyIcon\" translateY\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    \u003cLabel text\u003d\"Company\" styleClass\u003d\"tab_label_style\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    \u003cHBox styleClass\u003d\"tab_line_style\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003c/graphic\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003c/Button\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003cVBox fx:id\u003d\"company\" styleClass\u003d\"tab_bar_style\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    \u003cHBox styleClass\u003d\"tab_parameter_style\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003cButton translateY \u003d \"-13.5\" onAction\u003d\"#handleClick\" fx:id\u003d\"applicationButton\" mnemonicParsing\u003d\"false\" styleClass\u003d\"tab_button_style\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003cgraphic\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \u003cVBox styleClass\u003d\"tab_container_style\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    \u003cImageView fitHeight\u003d\"27.0\" fitWidth\u003d\"27.0\" fx:id\u003d\"applicationIcon\" translateY\u003d\"10\" translateX\u003d\"2\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    \u003cLabel text\u003d\"Application\" styleClass\u003d\"tab_label_style\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    \u003cHBox styleClass\u003d\"tab_line_style\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003c/graphic\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003c/Button\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003cVBox fx:id\u003d\"application\" styleClass\u003d\"tab_bar_style\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    \u003cHBox styleClass\u003d\"tab_parameter_style\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003cButton translateY \u003d \"-27\" onAction\u003d\"#handleClick\" fx:id\u003d\"profileButton\" mnemonicParsing\u003d\"false\" styleClass\u003d\"tab_button_style\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003cgraphic\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \u003cVBox  styleClass\u003d\"tab_container_style\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    \u003cImageView fitHeight\u003d\"23.0\" fitWidth\u003d\"23.0\" fx:id\u003d\"profileIcon\" translateY\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    \u003cLabel text\u003d\"Profile\" styleClass\u003d\"tab_label_style\"/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    \u003cHBox styleClass\u003d\"tab_line_style\"/\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003c/graphic\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003c/Button\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003cVBox fx:id\u003d\"profile\" styleClass\u003d\"tab_bar_style\"/\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 44
    }
  },
  {
    "path": "src/main/resources/view/TitleDescriptionDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.text.TextFlow?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003cfx:root type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" styleClass\u003d\"title_description_container\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    \u003cVBox fx:id\u003d\"titleInformation\" styleClass\u003d\"title_information\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003cTextFlow fx:id\u003d\"title\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    \u003cVBox fx:id\u003d\"descriptionInformation\" styleClass\u003d\"description_information\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003cTextFlow fx:id\u003d\"description\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c/fx:root\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.add.AddCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.application.ApplicationItem;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.company.CompanyItem;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ItemList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ReadOnlyItemList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.profile.ProfileItem;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.JsonItemListStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.application.JsonAdaptedApplicationItem;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.company.JsonAdaptedCompanyItem;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.person.JsonAdaptedPerson;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.profile.JsonAdaptedProfileItem;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        JsonItemListStorage\u003cPerson, JsonAdaptedPerson\u003e addressBookStorage \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                new JsonItemListStorage\u003c\u003e(temporaryFolder.resolve(\"addressBook.json\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                        Person.class, JsonAdaptedPerson.class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        JsonItemListStorage\u003cApplicationItem, JsonAdaptedApplicationItem\u003e applicationItemListStorage \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                new JsonItemListStorage\u003c\u003e(temporaryFolder.resolve(\"applicationitemlist.json\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                        ApplicationItem.class, JsonAdaptedApplicationItem.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        JsonItemListStorage\u003cCompanyItem, JsonAdaptedCompanyItem\u003e companyItemListStorage \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                new JsonItemListStorage\u003c\u003e(temporaryFolder.resolve(\"companyitemlist.json\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                        CompanyItem.class, JsonAdaptedCompanyItem.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        JsonItemListStorage\u003cProfileItem, JsonAdaptedProfileItem\u003e profileItemListStorage \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                new JsonItemListStorage\u003c\u003e(temporaryFolder.resolve(\"profileitemlist.json\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                        ProfileItem.class, JsonAdaptedProfileItem.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, applicationItemListStorage,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                companyItemListStorage, profileItemListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        //        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        //        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        // Setup LogicManager with JsonItemListIoExceptionThrowingStub"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        JsonItemListStorage\u003cPerson, JsonAdaptedPerson\u003e addressBookStorage \u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                new JsonItemListIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        JsonItemListStorage\u003cApplicationItem, JsonAdaptedApplicationItem\u003e applicationItemListStorage \u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                new JsonItemListStorage\u003c\u003e(temporaryFolder.resolve(\"applicationitemlist.json\"),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                        ApplicationItem.class, JsonAdaptedApplicationItem.class);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        JsonItemListStorage\u003cCompanyItem, JsonAdaptedCompanyItem\u003e companyItemListStorage \u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                new JsonItemListStorage\u003c\u003e(temporaryFolder.resolve(\"companyitemlist.json\"),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                        CompanyItem.class, JsonAdaptedCompanyItem.class);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        JsonItemListStorage\u003cProfileItem, JsonAdaptedProfileItem\u003e profileItemListStorage \u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                new JsonItemListStorage\u003c\u003e(temporaryFolder.resolve(\"profileitemlist.json\"),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                        ProfileItem.class, JsonAdaptedProfileItem.class);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, applicationItemListStorage,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                companyItemListStorage, profileItemListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + \" int \" + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        expectedModel.getAddressBook().addItem(expectedPerson);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // Todo: Update testcase for expected model"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        //        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook().getUnfilteredItemList(), new ItemList\u003c\u003e(),"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                new ItemList\u003c\u003e(), new ItemList\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private static class JsonItemListIoExceptionThrowingStub extends JsonItemListStorage\u003cPerson, JsonAdaptedPerson\u003e {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        private JsonItemListIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            super(filePath, Person.class, JsonAdaptedPerson.class);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        public void saveItemList(ReadOnlyItemList\u003cPerson\u003e addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 6,
      "ZoroarkDarkrai": 50,
      "-": 141
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.add.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ItemList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new ItemList\u003c\u003e(), new ItemList\u003c\u003e(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                new ItemList\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook().getUnfilteredItemList(), new ItemList\u003c\u003e(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                new ItemList\u003c\u003e(), new ItemList\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        expectedModel.getAddressBook().addItem(validPerson);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPerson), model,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getUnfilteredItemList().getItemList().get(0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 1,
      "ZoroarkDarkrai": 7,
      "-": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.add.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.FilterableItemList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.ItemListManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.application.ApplicationItem;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.company.CompanyItem;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.profile.ProfileItem;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(addAliceCommand, addAliceCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(addAliceCommandCopy, addAliceCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertNotEquals(addAliceCommand, 1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertNotEquals(addAliceCommand, null);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertNotEquals(addBobCommand, addAliceCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        public Path getInternHunterFilePath() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        public void setInternHunterFilePath(Path internHunterFilePath) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        public FilterableItemList\u003cPerson\u003e getAddressBook() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        public FilterableItemList\u003cCompanyItem\u003e getCompanyList() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        public FilterableItemList\u003cApplicationItem\u003e getApplicationList() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        public FilterableItemList\u003cProfileItem\u003e getProfileList() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void setTabName(TabName tabName) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public TabName getTabName() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        public FilterableItemList\u003cPerson\u003e getAddressBook() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            FilterableItemList\u003cPerson\u003e itemList \u003d new ItemListManager\u003c\u003e();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            itemList.addItem(person);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            return itemList;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        public FilterableItemList\u003cPerson\u003e getAddressBook() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            return new ItemListManager\u003c\u003e();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 8,
      "orzymandias": 1,
      "ZoroarkDarkrai": 13,
      "-": 145,
      "shawn-nyk": 2,
      "seanjyjy": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ItemList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new ItemList\u003c\u003e(), new ItemList\u003c\u003e(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                new ItemList\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new ItemList\u003c\u003e(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                new ItemList\u003c\u003e(), new ItemList\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        expectedModel.getAddressBook().setItemList(new ItemList\u003c\u003e());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 5,
      "-": 28,
      "shawn-nyk": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true, false)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true, false).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 49,
      "seanjyjy": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ItemCliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ItemCliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ItemCliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ItemCliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ItemCliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.edit.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ItemList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        ItemList\u003cPerson\u003e expectedAddressBook \u003d new ItemList\u003c\u003e(actualModel.getAddressBook().getUnfilteredItemList());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getAddressBook().getFilteredItemList());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook().getUnfilteredItemList());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getAddressBook().getFilteredItemList());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getAddressBook().getFilteredItemList().size());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        Person person \u003d model.getAddressBook().getFilteredItemList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        model.getAddressBook().updateFilteredItemList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertEquals(1, model.getAddressBook().getFilteredItemList().size());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 6,
      "ZoroarkDarkrai": 9,
      "-": 114
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.delete.DeleteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ItemList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new ItemList\u003c\u003e(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            new ItemList\u003c\u003e(), new ItemList\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        Person personToDelete \u003d model.getAddressBook().getFilteredItemList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook().getUnfilteredItemList(), new ItemList\u003c\u003e(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                new ItemList\u003c\u003e(), new ItemList\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        expectedModel.getAddressBook().deleteItem(personToDelete);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getAddressBook().getFilteredItemList().size() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        Person personToDelete \u003d model.getAddressBook().getFilteredItemList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook().getUnfilteredItemList(), new ItemList\u003c\u003e(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                new ItemList\u003c\u003e(), new ItemList\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        expectedModel.getAddressBook().deleteItem(personToDelete);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                \u003c model.getAddressBook().getUnfilteredItemList().getItemList().size());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        model.getAddressBook().updateFilteredItemList(p -\u003e false);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertTrue(model.getAddressBook().getFilteredItemList().isEmpty());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 1,
      "ZoroarkDarkrai": 15,
      "-": 98,
      "shawn-nyk": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.edit.EditCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.edit.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ItemList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new ItemList\u003c\u003e(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            new ItemList\u003c\u003e(), new ItemList\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ItemList\u003c\u003e(model.getAddressBook().getUnfilteredItemList()),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                new ItemList\u003c\u003e(), new ItemList\u003c\u003e(), new ItemList\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        expectedModel.getAddressBook().setItem(model.getAddressBook().getFilteredItemList().get(0), editedPerson);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getAddressBook().getFilteredItemList().size());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        Person lastPerson \u003d model.getAddressBook().getFilteredItemList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ItemList\u003c\u003e(model.getAddressBook().getUnfilteredItemList()),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                new ItemList\u003c\u003e(), new ItemList\u003c\u003e(), new ItemList\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        expectedModel.getAddressBook().setItem(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        Person editedPerson \u003d model.getAddressBook().getFilteredItemList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ItemList\u003c\u003e(model.getAddressBook().getUnfilteredItemList()),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                new ItemList\u003c\u003e(), new ItemList\u003c\u003e(), new ItemList\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        Person personInFilteredList \u003d model.getAddressBook().getFilteredItemList()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                .get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ItemList\u003c\u003e(model.getAddressBook().getUnfilteredItemList()),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                new ItemList\u003c\u003e(), new ItemList\u003c\u003e(), new ItemList\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        expectedModel.getAddressBook().setItem(model.getAddressBook().getFilteredItemList().get(0), editedPerson);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        Person firstPerson \u003d model.getAddressBook().getFilteredItemList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getUnfilteredItemList().getItemList()"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                .get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getAddressBook().getFilteredItemList().size() + 1);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getUnfilteredItemList()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                .getItemList().size());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 2,
      "ZoroarkDarkrai": 25,
      "-": 155
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.edit.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "seanjyjy": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ItemList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new ItemList\u003c\u003e(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            new ItemList\u003c\u003e(), new ItemList\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new ItemList\u003c\u003e(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            new ItemList\u003c\u003e(), new ItemList\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        expectedModel.getAddressBook().updateFilteredItemList(predicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getAddressBook().getFilteredItemList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        expectedModel.getAddressBook().updateFilteredItemList(predicate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getAddressBook().getFilteredItemList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 7,
      "-": 77,
      "shawn-nyk": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "seanjyjy": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ItemList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new ItemList\u003c\u003e(), new ItemList\u003c\u003e(),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                new ItemList\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook().getUnfilteredItemList(), new ItemList\u003c\u003e(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                new ItemList\u003c\u003e(), new ItemList\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        ;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 6,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SwitchCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import seedu.address.ui.tabs.TabName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class SwitchCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    // Default screen is Internship."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String SAME_SCREEN_TEXT \u003d \"Already in Company tab\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String SWITCHED_SCREEN_TEXT_PROFILE \u003d \"Switching to Profile tab\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String SWITCHED_SCREEN_TEXT_APPLICATION \u003d \"Switching to Application tab\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private final Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void execute_switchToProfileTab_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SWITCHED_SCREEN_TEXT_PROFILE, false, false,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            true);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertCommandSuccess(new SwitchCommand(TabName.PROFILE), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void execute_switchToCompanyTab_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SAME_SCREEN_TEXT, false,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            false, true);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertCommandSuccess(new SwitchCommand(TabName.COMPANY), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void execute_switchToApplicationTab_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SWITCHED_SCREEN_TEXT_APPLICATION, false, false,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            true);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertCommandSuccess(new SwitchCommand(TabName.APPLICATION), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.add.AddCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.parser.add.AddCommandParser;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 2,
      "-": 140
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.delete.DeleteCommandAbstract;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.logic.parser.delete.DeleteCommandParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "                DeleteCommandAbstract.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 1,
      "orzymandias": 3,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ItemCliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.edit.EditCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.edit.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 3,
      "-": 208
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/MainParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.edit.EditCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.edit.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class MainParserTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final MainParser parser \u003d new MainParser();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        // Todo: Update test cases after add commands are added."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        //        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        //        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "        //        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 2,
      "orzymandias": 6,
      "-": 86
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ItemList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ReadOnlyItemList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.exceptions.DuplicateItemException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private final ItemList\u003cPerson\u003e addressBook \u003d new ItemList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getItemList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        ItemList\u003cPerson\u003e newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertThrows(DuplicateItemException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasItem(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertFalse(addressBook.hasItem(ALICE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        addressBook.addItem(ALICE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertTrue(addressBook.hasItem(ALICE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        addressBook.addItem(ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertTrue(addressBook.hasItem(editedAlice));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getItemList().remove(0));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyItemList\u003cPerson\u003e {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        public ObservableList\u003cPerson\u003e getItemList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 16,
      "-": 88
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import static seedu.address.model.FilterableItemList.PREDICATE_SHOW_ALL_ITEMS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import seedu.address.model.application.ApplicationItem;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import seedu.address.model.company.CompanyItem;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.internship.InternshipItem;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ItemList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.profile.ProfileItem;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertEquals(new ItemListManager\u003cPerson\u003e(), modelManager.getAddressBook());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertEquals(new ItemListManager\u003cCompanyItem\u003e(), modelManager.getCompanyList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(new ItemListManager\u003cApplicationItem\u003e(), modelManager.getApplicationList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertEquals(new ItemListManager\u003cProfileItem\u003e(), modelManager.getProfileList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void setInternHunterFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setInternHunterFilePath(null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void setInternHunterFilePath_validPath_setsInternHunterFilePath() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        modelManager.setInternHunterFilePath(path);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertEquals(path, modelManager.getInternHunterFilePath());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.getAddressBook().hasItem(null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertFalse(modelManager.getAddressBook().hasItem(ALICE));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        modelManager.getAddressBook().addItem(ALICE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertTrue(modelManager.getAddressBook().hasItem(ALICE));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getAddressBook()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                .getFilteredItemList().remove(0));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        ItemList\u003cPerson\u003e addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        ItemList\u003cPerson\u003e differentAddressBook \u003d new ItemList\u003c\u003e();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        ItemList\u003cCompanyItem\u003e companyList \u003d new ItemList\u003c\u003e();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        ItemList\u003cInternshipItem\u003e internshipList \u003d new ItemList\u003c\u003e();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        ItemList\u003cApplicationItem\u003e applicationList \u003d new ItemList\u003c\u003e();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        ItemList\u003cProfileItem\u003e profileList \u003d new ItemList\u003c\u003e();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, companyList, applicationList,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                profileList,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                userPrefs);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, companyList,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                applicationList, profileList, userPrefs);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(modelManagerCopy, modelManager);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(modelManager, modelManager);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertNotEquals(modelManager, null);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertNotEquals(modelManager, 5);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertNotEquals(new ModelManager(differentAddressBook, companyList,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                applicationList, profileList, userPrefs), modelManager);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        modelManager.getAddressBook()"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                .updateFilteredItemList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertNotEquals(new ModelManager(addressBook, companyList,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                applicationList, profileList, userPrefs), modelManager);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        modelManager.getAddressBook().updateFilteredItemList(PREDICATE_SHOW_ALL_ITEMS);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertNotEquals(new ModelManager(addressBook, companyList,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                applicationList, profileList, differentUserPrefs), modelManager);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 12,
      "ZoroarkDarkrai": 30,
      "-": 107,
      "shawn-nyk": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/model/item/ItemListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "orzymandias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "public class ItemListTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertTrue(ALICE.isSameItem(ALICE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertFalse(ALICE.isSameItem(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertFalse(ALICE.isSameItem(editedAlice));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertFalse(ALICE.isSameItem(editedAlice));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertTrue(ALICE.isSameItem(editedAlice));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertTrue(ALICE.isSameItem(editedAlice));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertTrue(ALICE.isSameItem(editedAlice));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 7,
      "-": 88
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonItemListStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ItemList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ReadOnlyItemList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.person.JsonAdaptedPerson;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "public class JsonItemListStorageTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private java.util.Optional\u003cReadOnlyItemList\u003cPerson\u003e\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return new JsonItemListStorage\u003c\u003e(Paths.get(filePath),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                Person.class, JsonAdaptedPerson.class).readItemList(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        ItemList\u003cPerson\u003e original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        JsonItemListStorage\u003cPerson, JsonAdaptedPerson\u003e jsonItemListStorage \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                new JsonItemListStorage(filePath, Person.class, JsonAdaptedPerson.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        jsonItemListStorage.saveItemList(original, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        ReadOnlyItemList\u003cPerson\u003e readBack \u003d jsonItemListStorage.readItemList(filePath).get();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertEquals(original, new ItemList\u003c\u003e(readBack));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        original.addItem(HOON);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        original.removeItem(ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        jsonItemListStorage.saveItemList(original, filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        readBack \u003d jsonItemListStorage.readItemList(filePath).get();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertEquals(original, new ItemList\u003c\u003e(readBack));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        original.addItem(IDA);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        jsonItemListStorage.saveItemList(original); // file path not specified"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        readBack \u003d jsonItemListStorage.readItemList().get(); // file path not specified"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertEquals(original, new ItemList\u003c\u003e(readBack));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private void saveAddressBook(ItemList\u003cPerson\u003e addressBook, String filePath) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            new JsonItemListStorage\u003c\u003e(Paths.get(filePath), Person.class,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                    JsonAdaptedPerson.class).saveItemList(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new ItemList\u003c\u003e(), null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 27,
      "-": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableAddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ItemList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.person.JsonAdaptedPerson;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        JsonSerializableItemList\u003cPerson, JsonAdaptedPerson\u003e dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                Person.class, JsonAdaptedPerson.class).get();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        ItemList\u003cPerson\u003e addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        ItemList\u003cPerson\u003e typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        JsonSerializableItemList\u003cPerson, JsonAdaptedPerson\u003e dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                Person.class, JsonAdaptedPerson.class).get();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        JsonSerializableItemList\u003cPerson, JsonAdaptedPerson\u003e dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                Person.class, JsonAdaptedPerson.class).get();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableItemList.MESSAGE_DUPLICATE_ITEM,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 12,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.application.ApplicationItem;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.company.CompanyItem;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ItemList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ReadOnlyItemList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.profile.ProfileItem;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.application.JsonAdaptedApplicationItem;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.company.JsonAdaptedCompanyItem;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.person.JsonAdaptedPerson;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.storage.profile.JsonAdaptedProfileItem;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        JsonItemListStorage\u003cPerson, JsonAdaptedPerson\u003e addressBookStorage \u003d new JsonItemListStorage\u003c\u003e("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                getTempFilePath(\"ab\"), Person.class, JsonAdaptedPerson.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        JsonItemListStorage\u003cApplicationItem, JsonAdaptedApplicationItem\u003e applicationItemListStorage \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                new JsonItemListStorage\u003c\u003e(getTempFilePath(\"app\"), ApplicationItem.class,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                        JsonAdaptedApplicationItem.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        JsonItemListStorage\u003cCompanyItem, JsonAdaptedCompanyItem\u003e companyItemListStorage \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                new JsonItemListStorage\u003c\u003e(getTempFilePath(\"app\"), CompanyItem.class,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                        JsonAdaptedCompanyItem.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        JsonItemListStorage\u003cProfileItem, JsonAdaptedProfileItem\u003e profileItemListStorage \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                new JsonItemListStorage\u003c\u003e(getTempFilePath(\"app\"), ProfileItem.class,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                        JsonAdaptedProfileItem.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, applicationItemListStorage, companyItemListStorage,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "                profileItemListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "         * {@link JsonItemListStorage} class."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBoolStorageTest} class."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        ItemList\u003cPerson\u003e original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        storageManager.getAddressBookStorage().saveItemList(original);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        ReadOnlyItemList\u003cPerson\u003e retrieved \u003d storageManager.getAddressBookStorage().readItemList().get();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertEquals(original, new ItemList\u003c\u003e(retrieved));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public void getItemListFilePath() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        assertNotNull(storageManager.getAddressBookStorage().getItemListFilePath());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 32,
      "-": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/person/JsonAdaptedPersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "package seedu.address.storage.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import static seedu.address.storage.person.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 2,
      "-": 108
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ItemList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    private ItemList\u003cPerson\u003e addressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        addressBook \u003d new ItemList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public AddressBookBuilder(ItemList\u003cPerson\u003e addressBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a new {@code Person} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder withPerson(Person person) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        addressBook.addItem(person);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public ItemList\u003cPerson\u003e build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 6,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.edit.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 1,
      "-": 86
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ItemCliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ItemCliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ItemCliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ItemCliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import static seedu.address.logic.parser.clisyntax.ItemCliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.add.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "orzymandias"
        },
        "content": "import seedu.address.logic.commands.edit.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.getName() + \" \")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.getName()).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "orzymandias": 7,
      "-": 53,
      "seanjyjy": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return Index.fromOneBased(model.getAddressBook().getFilteredItemList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return Index.fromOneBased(model.getAddressBook().getFilteredItemList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the person in the {@code model}\u0027s person list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        return model.getAddressBook().getFilteredItemList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 3,
      "-": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "import seedu.address.model.item.ItemList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "    public static ItemList\u003cPerson\u003e getTypicalAddressBook() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "        ItemList\u003cPerson\u003e ab \u003d new ItemList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZoroarkDarkrai"
        },
        "content": "            ab.addItem(person);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZoroarkDarkrai": 4,
      "-": 72
    }
  }
]
